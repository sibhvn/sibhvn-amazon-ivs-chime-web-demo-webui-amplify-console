{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst LogLevel_1 = require(\"../logger/LogLevel\");\n\nconst IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\n\nconst Log_1 = require(\"./Log\");\n/**\n * `MeetingSessionPOSTLogger` publishes log messages in batches to a URL\n * supplied during its construction.\n *\n * Be sure to call {@link MeetingSessionPOSTLogger.destroy} when you're done\n * with the logger in order to avoid leaks.\n */\n\n\nclass MeetingSessionPOSTLogger {\n  constructor(name, configuration, batchSize, intervalMs, url) {\n    let level = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : LogLevel_1.default.WARN;\n    let headers = arguments.length > 6 ? arguments[6] : undefined;\n    this.name = name;\n    this.configuration = configuration;\n    this.batchSize = batchSize;\n    this.intervalMs = intervalMs;\n    this.url = url;\n    this.level = level;\n    this.headers = headers;\n    this.logCapture = [];\n    this.sequenceNumber = 0;\n    this.lock = false;\n    this.startLogPublishScheduler(this.batchSize);\n\n    this.eventListener = () => {\n      this.stop();\n    };\n\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    if (!this.eventListener || !('window' in global) || !window.addEventListener) {\n      return;\n    }\n\n    window.addEventListener('unload', this.eventListener);\n  }\n\n  removeEventListener() {\n    if (!this.eventListener || !('window' in global) || !window.removeEventListener) {\n      return;\n    }\n\n    window.removeEventListener('unload', this.eventListener);\n  }\n\n  debug(debugFunction) {\n    if (LogLevel_1.default.DEBUG < this.level) {\n      return;\n    }\n\n    if (typeof debugFunction === 'string') {\n      this.log(LogLevel_1.default.DEBUG, debugFunction);\n    } else if (debugFunction) {\n      this.log(LogLevel_1.default.DEBUG, debugFunction());\n    } else {\n      this.log(LogLevel_1.default.DEBUG, '' + debugFunction);\n    }\n  }\n\n  info(msg) {\n    this.log(LogLevel_1.default.INFO, msg);\n  }\n\n  warn(msg) {\n    this.log(LogLevel_1.default.WARN, msg);\n  }\n\n  error(msg) {\n    this.log(LogLevel_1.default.ERROR, msg);\n  }\n\n  setLogLevel(level) {\n    this.level = level;\n  }\n\n  getLogLevel() {\n    return this.level;\n  }\n\n  getLogCaptureSize() {\n    return this.logCapture.length;\n  }\n\n  startLogPublishScheduler(batchSize) {\n    var _a;\n\n    this.addEventListener();\n    (_a = this.intervalScheduler) === null || _a === void 0 ? void 0 : _a.stop();\n    this.intervalScheduler = new IntervalScheduler_1.default(this.intervalMs);\n    this.intervalScheduler.start(() => __awaiter(this, void 0, void 0, function* () {\n      if (this.lock === true || this.getLogCaptureSize() === 0) {\n        return;\n      }\n\n      this.lock = true;\n      const batch = this.logCapture.slice(0, batchSize);\n      const body = this.makeRequestBody(batch);\n\n      try {\n        const response = yield fetch(this.url, Object.assign({\n          method: 'POST',\n          body\n        }, this.headers ? {\n          headers: this.headers\n        } : {}));\n\n        if (response.status === 200) {\n          this.logCapture = this.logCapture.slice(batch.length);\n        }\n      } catch (error) {\n        console.warn('[MeetingSessionPOSTLogger] ' + error.message);\n      } finally {\n        this.lock = false;\n      }\n    }));\n  }\n\n  stop() {\n    var _a; // Clean up to avoid resource leaks.\n\n\n    (_a = this.intervalScheduler) === null || _a === void 0 ? void 0 : _a.stop();\n    this.intervalScheduler = undefined;\n    this.removeEventListener();\n    const body = this.makeRequestBody(this.logCapture);\n    navigator.sendBeacon(this.url, body);\n  }\n  /**\n   * Permanently clean up the logger. A new logger must be created to\n   * resume logging.\n   */\n\n\n  destroy() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      (_a = this.intervalScheduler) === null || _a === void 0 ? void 0 : _a.stop();\n      this.intervalScheduler = undefined;\n      this.removeEventListener();\n      this.configuration = undefined;\n      this.logCapture = [];\n    });\n  }\n\n  makeRequestBody(batch) {\n    return JSON.stringify({\n      meetingId: this.configuration.meetingId,\n      attendeeId: this.configuration.credentials.attendeeId,\n      appName: this.name,\n      logs: batch\n    });\n  }\n\n  log(type, msg) {\n    if (type < this.level) {\n      return;\n    }\n\n    const now = Date.now(); // Handle undefined.\n\n    this.logCapture.push(new Log_1.default(this.sequenceNumber, msg, now, LogLevel_1.default[type]));\n    this.sequenceNumber += 1;\n  }\n\n}\n\nexports.default = MeetingSessionPOSTLogger;","map":{"version":3,"mappings":"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","names":["MeetingSessionPOSTLogger","constructor","name","configuration","batchSize","intervalMs","url","level","LogLevel_1","WARN","headers","startLogPublishScheduler","eventListener","stop","addEventListener","global","window","removeEventListener","debug","debugFunction","DEBUG","log","info","msg","INFO","warn","error","ERROR","setLogLevel","getLogLevel","getLogCaptureSize","logCapture","length","intervalScheduler","_a","IntervalScheduler_1","start","__awaiter","lock","batch","slice","body","makeRequestBody","response","fetch","Object","method","status","console","message","undefined","navigator","sendBeacon","destroy","JSON","stringify","meetingId","attendeeId","credentials","appName","logs","type","now","Date","push","Log_1","sequenceNumber","exports"],"sourceRoot":"","sources":["../../src/logger/MeetingSessionPOSTLogger.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
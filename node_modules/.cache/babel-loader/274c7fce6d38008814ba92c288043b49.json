{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DataMessage_1 = require(\"../datamessage/DataMessage\");\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n\nclass SendAndReceiveDataMessagesTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'SendAndReceiveDataMessagesTask';\n\n    this.sendDataMessageHandler = (topic, data, // eslint-disable-line @typescript-eslint/no-explicit-any\n    lifetimeMs) => {\n      if (this.context.signalingClient.ready()) {\n        let uint8Data;\n\n        if (data instanceof Uint8Array) {\n          uint8Data = data;\n        } else if (typeof data === 'string') {\n          uint8Data = new TextEncoder().encode(data);\n        } else {\n          uint8Data = new TextEncoder().encode(JSON.stringify(data));\n        }\n\n        this.validateDataMessage(topic, uint8Data, lifetimeMs);\n        const message = SignalingProtocol_js_1.SdkDataMessagePayload.create();\n        message.topic = topic;\n        message.lifetimeMs = lifetimeMs;\n        message.data = uint8Data;\n        const messageFrame = SignalingProtocol_js_1.SdkDataMessageFrame.create();\n        messageFrame.messages = [message];\n        this.context.signalingClient.sendDataMessage(messageFrame);\n      } else {\n        this.context.logger.error('Signaling client is not ready');\n      }\n    };\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.context.removableObservers.push(this);\n      this.context.signalingClient.registerObserver(this);\n      this.context.realtimeController.realtimeSubscribeToSendDataMessage(this.sendDataMessageHandler);\n    });\n  }\n\n  removeObserver() {\n    this.context.realtimeController.realtimeUnsubscribeFromSendDataMessage(this.sendDataMessageHandler);\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  handleSignalingClientEvent(event) {\n    if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame && event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.DATA_MESSAGE) {\n      for (const message of event.message.dataMessage.messages) {\n        const dataMessage = new DataMessage_1.default(message.ingestTimeNs / 1000000, message.topic, message.data, message.senderAttendeeId, message.senderExternalUserId, message.ingestTimeNs === 0);\n        this.context.realtimeController.realtimeReceiveDataMessage(dataMessage);\n      }\n    }\n  }\n\n  validateDataMessage(topic, data, lifetimeMs) {\n    if (!SendAndReceiveDataMessagesTask.TOPIC_REGEX.test(topic)) {\n      throw new Error('Invalid topic');\n    }\n\n    if (data.length > SendAndReceiveDataMessagesTask.DATA_SIZE) {\n      throw new Error('Data size has to be less than 2048 bytes');\n    }\n\n    if (lifetimeMs && lifetimeMs < 0) {\n      throw new Error('The life time of the message has to be non negative');\n    }\n  }\n\n}\n\nexports.default = SendAndReceiveDataMessagesTask;\nSendAndReceiveDataMessagesTask.TOPIC_REGEX = new RegExp(/^[a-zA-Z0-9_-]{1,36}$/);\nSendAndReceiveDataMessagesTask.DATA_SIZE = 2048;","map":{"version":3,"mappings":"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","names":["SendAndReceiveDataMessagesTask","BaseTask_1","constructor","context","logger","topic","data","lifetimeMs","signalingClient","ready","uint8Data","Uint8Array","TextEncoder","encode","JSON","stringify","validateDataMessage","message","SignalingProtocol_js_1","create","messageFrame","messages","sendDataMessage","error","run","removableObservers","push","registerObserver","realtimeController","realtimeSubscribeToSendDataMessage","sendDataMessageHandler","removeObserver","realtimeUnsubscribeFromSendDataMessage","handleSignalingClientEvent","event","type","SignalingClientEventType_1","ReceivedSignalFrame","Type","DATA_MESSAGE","dataMessage","DataMessage_1","ingestTimeNs","senderAttendeeId","senderExternalUserId","realtimeReceiveDataMessage","TOPIC_REGEX","test","Error","length","DATA_SIZE","exports","RegExp"],"sourceRoot":"","sources":["../../src/task/SendAndReceiveDataMessagesTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ContentShareConstants_1 = require(\"../contentsharecontroller/ContentShareConstants\");\n\nconst VideoPreference_1 = require(\"./VideoPreference\");\n\nconst VideoPreferences_1 = require(\"./VideoPreferences\");\n\nconst VideoPriorityBasedPolicy_1 = require(\"./VideoPriorityBasedPolicy\");\n\nclass VideoAdaptiveProbePolicy extends VideoPriorityBasedPolicy_1.default {\n  constructor(logger) {\n    super(logger);\n    this.logger = logger;\n    super.shouldPauseTiles = false;\n    this.videoPreferences = undefined;\n  }\n\n  reset() {\n    super.reset();\n    super.shouldPauseTiles = false;\n    this.videoPreferences = undefined;\n  }\n\n  updateIndex(videoIndex) {\n    super.updateIndex(videoIndex);\n    const newPreferences = VideoPreferences_1.VideoPreferences.prepare();\n    let containsContent = false;\n    const remoteInfos = videoIndex.remoteStreamDescriptions(); // If there is active content then set that as high priority, and the rest at lower\n\n    for (const info of remoteInfos) {\n      // I don't know why we need to do this duplicate check.\n      if (!newPreferences.some(preference => preference.attendeeId === info.attendeeId)) {\n        // For now always subscribe to content even if higher bandwidth then target\n        if (info.attendeeId.endsWith(ContentShareConstants_1.default.Modality)) {\n          newPreferences.add(new VideoPreference_1.default(info.attendeeId, 1));\n          containsContent = true;\n        } else {\n          newPreferences.add(new VideoPreference_1.default(info.attendeeId, 2));\n        }\n      }\n    }\n\n    if (containsContent) {\n      this.videoPreferences = newPreferences.build();\n      this.videoPreferencesUpdated = true;\n    } else {\n      this.videoPreferences = undefined;\n    }\n  }\n  /**\n   * [[VideoAdaptiveProbePolicy]] does not allow setting video preferences and this function\n   * will be a no-op.  Please use [[VideoPriorityBasedPolicy]] directly if you would like to set\n   * preferences.\n   */\n\n\n  chooseRemoteVideoSources(_preferences) {\n    this.logger.error('chooseRemoteVideoSources should not be called by VideoAdaptiveProbePolicy');\n    return;\n  }\n\n}\n\nexports.default = VideoAdaptiveProbePolicy;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAEA;;AAIA;;AACA;;AACA;;AAEA,MAAqBA,wBAArB,SAAsDC,kCAAtD,CAA8E;EAC5EC,YAAsBC,MAAtB,EAAoC;IAClC,MAAMA,MAAN;IADoB;IAEpB,MAAMC,gBAAN,GAAyB,KAAzB;IACA,KAAKC,gBAAL,GAAwBC,SAAxB;EACD;;EAEDC,KAAK;IACH,MAAMA,KAAN;IACA,MAAMH,gBAAN,GAAyB,KAAzB;IACA,KAAKC,gBAAL,GAAwBC,SAAxB;EACD;;EAEDE,WAAW,CAACC,UAAD,EAA6B;IACtC,MAAMD,WAAN,CAAkBC,UAAlB;IAEA,MAAMC,cAAc,GAAGC,oCAAiBC,OAAjB,EAAvB;IACA,IAAIC,eAAe,GAAG,KAAtB;IACA,MAAMC,WAAW,GAA6BL,UAAU,CAACM,wBAAX,EAA9C,CALsC,CAMtC;;IACA,KAAK,MAAMC,IAAX,IAAmBF,WAAnB,EAAgC;MAC9B;MACA,IAAI,CAACJ,cAAc,CAACO,IAAf,CAAoBC,UAAU,IAAIA,UAAU,CAACC,UAAX,KAA0BH,IAAI,CAACG,UAAjE,CAAL,EAAmF;QACjF;QACA,IAAIH,IAAI,CAACG,UAAL,CAAgBC,QAAhB,CAAyBC,gCAAsBC,QAA/C,CAAJ,EAA8D;UAC5DZ,cAAc,CAACa,GAAf,CAAmB,IAAIC,yBAAJ,CAAoBR,IAAI,CAACG,UAAzB,EAAqC,CAArC,CAAnB;UACAN,eAAe,GAAG,IAAlB;QACD,CAHD,MAGO;UACLH,cAAc,CAACa,GAAf,CAAmB,IAAIC,yBAAJ,CAAoBR,IAAI,CAACG,UAAzB,EAAqC,CAArC,CAAnB;QACD;MACF;IACF;;IAED,IAAIN,eAAJ,EAAqB;MACnB,KAAKR,gBAAL,GAAwBK,cAAc,CAACe,KAAf,EAAxB;MACA,KAAKC,uBAAL,GAA+B,IAA/B;IACD,CAHD,MAGO;MACL,KAAKrB,gBAAL,GAAwBC,SAAxB;IACD;EACF;EAED;;;;;;;EAKAqB,wBAAwB,CAACC,YAAD,EAA+B;IACrD,KAAKzB,MAAL,CAAY0B,KAAZ,CAAkB,2EAAlB;IACA;EACD;;AAjD2E;;AAA9EC","names":["VideoAdaptiveProbePolicy","VideoPriorityBasedPolicy_1","constructor","logger","shouldPauseTiles","videoPreferences","undefined","reset","updateIndex","videoIndex","newPreferences","VideoPreferences_1","prepare","containsContent","remoteInfos","remoteStreamDescriptions","info","some","preference","attendeeId","endsWith","ContentShareConstants_1","Modality","add","VideoPreference_1","build","videoPreferencesUpdated","chooseRemoteVideoSources","_preferences","error","exports"],"sourceRoot":"","sources":["../../src/videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BackgroundFilterVideoFrameProcessor_1 = require(\"../backgroundfilter/BackgroundFilterVideoFrameProcessor\");\n\nconst ConsoleLogger_1 = require(\"../logger/ConsoleLogger\");\n\nconst LogLevel_1 = require(\"../logger/LogLevel\");\n\nconst NoOpVideoFrameProcessor_1 = require(\"../videoframeprocessor/NoOpVideoFrameProcessor\");\n\nconst BackgroundReplacementFilter_1 = require(\"./BackgroundReplacementFilter\");\n/**\n * No-op implementation of the background replacement processor. An instance of this class will be returned when a user attempts\n * to create a background replacement processor when it is not supported.\n */\n\n/** @internal */\n\n\nclass NoOpBackgroundReplacementProcessor extends NoOpVideoFrameProcessor_1.default {\n  /**\n   * no-op\n   * @returns\n   */\n  loadAssets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return;\n    });\n  }\n  /**\n   * no-op\n   */\n\n\n  addObserver() {}\n  /**\n   * no-op\n   */\n\n\n  removeObserver() {}\n  /**\n   * no-op\n   */\n\n\n  setImageBlob() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return;\n    });\n  }\n\n}\n/**\n * [[BackgroundReplacementVideoFrameProcessor]]\n * Creates a background replacement processor which identifies the foreground person and replaces the background.\n */\n\n\nclass BackgroundReplacementVideoFrameProcessor extends BackgroundFilterVideoFrameProcessor_1.default {\n  /**\n   * A factory method that will call the private constructor to instantiate the processor and asynchronously\n   * initialize the worker, wasm, and ML models. Upon completion of the initialization the promise will either\n   * be resolved or rejected.\n   * @param spec The spec defines the assets that will be used for adding background filter to a frame\n   * @param imagePath The background replacement image path\n   */\n  static create(spec, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      spec = this.resolveSpec(spec);\n      options = this.resolveOptions(options);\n      yield this.resolveOptionsAsync(options);\n      const {\n        logger\n      } = options;\n      const supported = yield BackgroundReplacementVideoFrameProcessor.isSupported(spec, options); // if background replacement is not supported do not initialize. The processor will become a no op if not supported.\n\n      if (!supported) {\n        logger.warn('Using no-op processor because background replacement is not supported');\n        return new NoOpBackgroundReplacementProcessor();\n      }\n\n      logger.info('Using background replacement filter');\n      const processor = new BackgroundReplacementFilter_1.default(spec, options);\n      yield processor.loadAssets();\n      return processor;\n    });\n  }\n  /**\n   * Based on the options that are passed in set defaults for options\n   * @param options  the options that are passed in\n   * @returns An updated set of options with defaults set\n   */\n\n\n  static resolveOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!options.logger) {\n      options.logger = new ConsoleLogger_1.default('BackgroundReplacementProcessor', LogLevel_1.default.INFO);\n    }\n\n    return super.resolveOptions(options);\n  }\n\n  static resolveOptionsAsync(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!options.imageBlob) {\n        const canvas = document.createElement('canvas');\n        canvas.width = 100;\n        canvas.height = 100;\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'blue';\n        ctx.fillRect(0, 0, 100, 100);\n        const blob = yield new Promise(resolve => {\n          canvas.toBlob(resolve);\n        });\n        options.imageBlob = blob;\n      }\n\n      return;\n    });\n  }\n  /**\n   * This method will detect the environment in which it is being used and determine if background\n   * replacement can be used.\n   * @param spec The {@link BackgroundFilterSpec} spec that will be used to initialize assets\n   * @param options options such as logger and imagePath\n   * @returns a boolean promise that will resolve to true if supported and false if not\n   */\n\n\n  static isSupported(spec, options) {\n    const _super = Object.create(null, {\n      isSupported: {\n        get: () => super.isSupported\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      spec = this.resolveSpec(spec);\n      options = this.resolveOptions(options);\n      yield this.resolveOptionsAsync(options);\n      const imageBlob = options.imageBlob;\n      const imageUrl = URL.createObjectURL(imageBlob);\n\n      try {\n        yield BackgroundReplacementFilter_1.default.loadImage(imageUrl);\n      } catch (e) {\n        options.logger.info(`Failed to fetch load replacement image ${e.message}`);\n        return false;\n      } finally {\n        URL.revokeObjectURL(imageUrl);\n      }\n\n      return _super.isSupported.call(this, spec, options);\n    });\n  }\n\n}\n\nexports.default = BackgroundReplacementVideoFrameProcessor;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAEA;;AACA;;AACA;;AACA;AAGA;;;;;AAIA;;;AACA,MAAMA,kCAAN,SACUC,iCADV,CACiC;EAE/B;;;;EAIMC,UAAU;;MACd;IACD;EAAA;EAED;;;;;EAGAC,WAAW,IAAW;EAEtB;;;;;EAGAC,cAAc,IAAW;EAEzB;;;;;EAGMC,YAAY;;MAChB;IACD;EAAA;;AAzB8B;AA4BjC;;;;;;AAIA,MAAqBC,wCAArB,SAAsEC,6CAAtE,CAAyG;EACvG;;;;;;;EAOmB,OAANC,MAAM,CACjBC,IADiB,EAEjBC,OAFiB,EAEqB;;MAEtCD,IAAI,GAAG,KAAKE,WAAL,CAAiBF,IAAjB,CAAP;MACAC,OAAO,GAAG,KAAKE,cAAL,CAAoBF,OAApB,CAAV;MACA,MAAM,KAAKG,mBAAL,CAAyBH,OAAzB,CAAN;MACA,MAAM;QAAEI;MAAF,IAAaJ,OAAnB;MAEA,MAAMK,SAAS,GAAG,MAAMT,wCAAwC,CAACU,WAAzC,CAAqDP,IAArD,EAA2DC,OAA3D,CAAxB,EACA;;MACA,IAAI,CAACK,SAAL,EAAgB;QACdD,MAAM,CAACG,IAAP,CAAY,uEAAZ;QACA,OAAO,IAAIjB,kCAAJ,EAAP;MACD;;MAEDc,MAAM,CAACI,IAAP,CAAY,qCAAZ;MACA,MAAMC,SAAS,GAAG,IAAIC,qCAAJ,CAAgCX,IAAhC,EAAsCC,OAAtC,CAAlB;MAEA,MAAMS,SAAS,CAACjB,UAAV,EAAN;MACA,OAAOiB,SAAP;IACD;EAAA;EAED;;;;;;;EAK+B,OAAdP,cAAc,GACa;IAAA,IAA1CF,OAA0C,uEAAF,EAAE;;IAE1C,IAAI,CAACA,OAAO,CAACI,MAAb,EAAqB;MACnBJ,OAAO,CAACI,MAAR,GAAiB,IAAIO,uBAAJ,CAAkB,gCAAlB,EAAoDC,mBAASC,IAA7D,CAAjB;IACD;;IAED,OAAO,MAAMX,cAAN,CAAqBF,OAArB,CAAP;EACD;;EAEuC,OAAnBG,mBAAmB,CAACH,OAAD,EAAsC;;MAC5E,IAAI,CAACA,OAAO,CAACc,SAAb,EAAwB;QACtB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;QACAF,MAAM,CAACG,KAAP,GAAe,GAAf;QACAH,MAAM,CAACI,MAAP,GAAgB,GAAhB;QACA,MAAMC,GAAG,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAZ;QACAD,GAAG,CAACE,SAAJ,GAAgB,MAAhB;QACAF,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,GAAnB,EAAwB,GAAxB;QACA,MAAMC,IAAI,GAAG,MAAM,IAAIC,OAAJ,CAAkBC,OAAO,IAAG;UAC7CX,MAAM,CAACY,MAAP,CAAcD,OAAd;QACD,CAFkB,CAAnB;QAGA1B,OAAO,CAACc,SAAR,GAAoBU,IAApB;MACD;;MACD;IACD;EAAA;EAED;;;;;;;;;EAOwB,OAAXlB,WAAW,CACtBP,IADsB,EAEtBC,OAFsB,EAEgB;;;;;;;;MAEtCD,IAAI,GAAG,KAAKE,WAAL,CAAiBF,IAAjB,CAAP;MACAC,OAAO,GAAG,KAAKE,cAAL,CAAoBF,OAApB,CAAV;MACA,MAAM,KAAKG,mBAAL,CAAyBH,OAAzB,CAAN;MACA,MAAMc,SAAS,GAAGd,OAAO,CAACc,SAA1B;MACA,MAAMc,QAAQ,GAAGC,GAAG,CAACC,eAAJ,CAAoBhB,SAApB,CAAjB;;MACA,IAAI;QACF,MAAMJ,sCAA4BqB,SAA5B,CAAsCH,QAAtC,CAAN;MACD,CAFD,CAEE,OAAOI,CAAP,EAAU;QACVhC,OAAO,CAACI,MAAR,CAAeI,IAAf,CAAoB,0CAA0CwB,CAAC,CAACC,OAAO,EAAvE;QACA,OAAO,KAAP;MACD,CALD,SAKU;QACRJ,GAAG,CAACK,eAAJ,CAAoBN,QAApB;MACD;;MACD,OAAOO,OAAM7B,WAAN,CAAiB8B,IAAjB,CAAiB,IAAjB,EAAkBrC,IAAlB,EAAwBC,OAAxB,CAAP;IACD;EAAA;;AAvFsG;;AAAzGqC","names":["NoOpBackgroundReplacementProcessor","NoOpVideoFrameProcessor_1","loadAssets","addObserver","removeObserver","setImageBlob","BackgroundReplacementVideoFrameProcessor","BackgroundFilterVideoFrameProcessor_1","create","spec","options","resolveSpec","resolveOptions","resolveOptionsAsync","logger","supported","isSupported","warn","info","processor","BackgroundReplacementFilter_1","ConsoleLogger_1","LogLevel_1","INFO","imageBlob","canvas","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","blob","Promise","resolve","toBlob","imageUrl","URL","createObjectURL","loadImage","e","message","revokeObjectURL","_super","call","exports"],"sourceRoot":"","sources":["../../src/backgroundreplacementprocessor/BackgroundReplacementVideoFrameProcessor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst DefaultSDP_1 = require(\"../sdp/DefaultSDP\");\n\nconst ZLIBTextCompressor_1 = require(\"../sdp/ZLIBTextCompressor\");\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst SignalingClientSubscribe_1 = require(\"../signalingclient/SignalingClientSubscribe\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[SubscribeAndReceiveSubscribeAckTask]] sends a subscribe frame with the given settings\n * and receives SdkSubscribeAckFrame.\n */\n\n\nclass SubscribeAndReceiveSubscribeAckTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'SubscribeAndReceiveSubscribeAckTask';\n    this.taskCanceler = null;\n    this.textCompressor = new ZLIBTextCompressor_1.default(context.logger);\n  }\n\n  cancel() {\n    if (this.taskCanceler) {\n      this.taskCanceler.cancel();\n      this.taskCanceler = null;\n    }\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let localSdp = '';\n\n      if (this.context.peer && this.context.peer.localDescription) {\n        if (this.context.browserBehavior.requiresUnifiedPlanMunging()) {\n          localSdp = new DefaultSDP_1.default(this.context.peer.localDescription.sdp).withUnifiedPlanFormat().sdp;\n        } else {\n          localSdp = this.context.peer.localDescription.sdp;\n        }\n      }\n\n      if (!this.context.enableSimulcast) {\n        // backward compatibility\n        let frameRate = 0;\n        let maxEncodeBitrateKbps = 0;\n\n        if (this.context.videoCaptureAndEncodeParameter) {\n          frameRate = this.context.videoCaptureAndEncodeParameter.captureFrameRate();\n          maxEncodeBitrateKbps = this.context.videoCaptureAndEncodeParameter.encodeBitrates()[0];\n        }\n\n        const param = {\n          rid: 'hi',\n          maxBitrate: maxEncodeBitrateKbps * 1000,\n          maxFramerate: frameRate,\n          active: true\n        };\n        this.context.videoStreamIndex.integrateUplinkPolicyDecision([param]);\n      }\n\n      this.context.videoStreamIndex.subscribeFrameSent(); // See comment above `fixUpSubscriptionOrder`\n\n      const videoSubscriptions = this.context.browserBehavior.requiresUnifiedPlan() ? this.fixUpSubscriptionOrder(localSdp, this.context.videoSubscriptions) : this.context.videoSubscriptions;\n      const isSendingStreams = this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.TX || this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX;\n      let compressedSDPOffer;\n      const localSdpOffer = localSdp;\n\n      if (this.context.serverSupportsCompression) {\n        // If the server supports compression, then send the compressed version of the sdp\n        // and exclude the original sdp offer.\n        const prevOffer = this.context.previousSdpOffer ? this.context.previousSdpOffer.sdp : '';\n        compressedSDPOffer = this.textCompressor.compress(localSdpOffer, prevOffer);\n        this.context.logger.info(`Compressed the SDP message from ${localSdpOffer.length} to ${compressedSDPOffer.length} bytes.`);\n        localSdp = '';\n      }\n\n      this.context.previousSdpOffer = new DefaultSDP_1.default(localSdpOffer);\n      const subscribe = new SignalingClientSubscribe_1.default(this.context.meetingSessionConfiguration.credentials.attendeeId, localSdp, this.context.meetingSessionConfiguration.urls.audioHostURL, this.context.realtimeController.realtimeIsLocalAudioMuted(), false, videoSubscriptions, isSendingStreams, this.context.videoStreamIndex.localStreamDescriptions(), // TODO: handle check-in mode, or remove this param\n      true, compressedSDPOffer);\n      this.context.logger.info(`sending subscribe: ${JSON.stringify(subscribe)}`);\n      this.context.signalingClient.subscribe(subscribe);\n      const subscribeAckFrame = yield this.receiveSubscribeAck();\n      this.context.logger.info(`got subscribe ack: ${JSON.stringify(subscribeAckFrame)}`);\n      let decompressedText = '';\n\n      if (subscribeAckFrame.compressedSdpAnswer && subscribeAckFrame.compressedSdpAnswer.length) {\n        decompressedText = this.textCompressor.decompress(subscribeAckFrame.compressedSdpAnswer, this.context.previousSdpAnswerAsString);\n\n        if (decompressedText.length === 0) {\n          this.context.sdpAnswer = '';\n          this.context.previousSdpAnswerAsString = '';\n          this.logAndThrow(`Error occurred while trying to decompress the SDP answer.`);\n        }\n\n        this.context.logger.info(`Decompressed the SDP message from ${subscribeAckFrame.compressedSdpAnswer.length} to ${decompressedText.length} bytes.`);\n        this.context.sdpAnswer = decompressedText;\n      } else {\n        this.context.sdpAnswer = subscribeAckFrame.sdpAnswer;\n      }\n\n      this.context.previousSdpAnswerAsString = this.context.sdpAnswer;\n      this.context.videoStreamIndex.integrateSubscribeAckFrame(subscribeAckFrame);\n    });\n  } // Our backends currently expect the video subscriptions passed in subscribe to precisely\n  // line up with the media sections, with a zero for any video send or inactive section.\n  //\n  // Firefox occasionally tosses stopped transceivers at the end of the SDP without reason\n  // and in general we don't want to be at the mercy of SDP sections not being in the same\n  // order as `getTransceivers`, so we simply recalculate the array here to enforce that\n  // expected invarient until we refactor our signaling to simply take a mapping of MID to\n  // subscription.\n  //\n  // This only works on Unified Plan SDPs\n\n\n  fixUpSubscriptionOrder(sdp, videoSubscriptions) {\n    if (this.context.transceiverController.getMidForStreamId === undefined) {\n      return videoSubscriptions;\n    }\n\n    const midsToStreamIds = new Map();\n\n    for (const streamId of videoSubscriptions) {\n      // The local description will have been set by the time this task is running, so all\n      // of the transceivers should have `mid` set by now (see comment above `getMidForStreamId`)\n      const mid = this.context.transceiverController.getMidForStreamId(streamId);\n\n      if (mid === undefined) {\n        if (streamId !== 0) {\n          // Send section or inactive section\n          this.context.logger.warn(`Could not find MID for stream ID: ${streamId}`);\n        }\n\n        continue;\n      }\n\n      midsToStreamIds.set(mid, streamId);\n    }\n\n    const sections = new DefaultSDP_1.default(sdp).mediaSections();\n    const newSubscriptions = [];\n\n    for (const section of sections) {\n      if (section.mediaType !== 'video') {\n        continue;\n      }\n\n      if (section.direction === 'recvonly') {\n        const streamId = midsToStreamIds.get(section.mid);\n\n        if (streamId === undefined) {\n          this.context.logger.warn(`Could not find stream ID for MID: ${section.mid}`);\n          continue;\n        }\n\n        newSubscriptions.push(streamId);\n      } else {\n        newSubscriptions.push(0);\n      }\n    }\n\n    this.context.logger.info(`Fixed up ${JSON.stringify(videoSubscriptions)} to ${JSON.stringify(newSubscriptions)} (may be same))}`);\n    return newSubscriptions;\n  }\n\n  receiveSubscribeAck() {\n    return new Promise((resolve, reject) => {\n      const context = this.context;\n\n      class Interceptor {\n        constructor(signalingClient) {\n          this.signalingClient = signalingClient;\n        }\n\n        cancel() {\n          this.signalingClient.removeObserver(this);\n          reject(new Error(`SubscribeAndReceiveSubscribeAckTask got canceled while waiting for SdkSubscribeAckFrame`));\n        }\n\n        handleSignalingClientEvent(event) {\n          if (event.isConnectionTerminated()) {\n            const message = `SubscribeAndReceiveSubscribeAckTask connection was terminated with code ${event.closeCode} and reason: ${event.closeReason}`;\n            context.logger.warn(message);\n            let statusCode = MeetingSessionStatusCode_1.default.TaskFailed;\n\n            if (event.closeCode >= 4500 && event.closeCode < 4600) {\n              statusCode = MeetingSessionStatusCode_1.default.SignalingInternalServerError;\n            }\n\n            context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(statusCode), new Error(message));\n            return;\n          }\n\n          if (event.type !== SignalingClientEventType_1.default.ReceivedSignalFrame || event.message.type !== SignalingProtocol_js_1.SdkSignalFrame.Type.SUBSCRIBE_ACK) {\n            return;\n          }\n\n          this.signalingClient.removeObserver(this); // @ts-ignore: force cast to SdkSubscribeAckFrame\n\n          const subackFrame = event.message.suback;\n          resolve(subackFrame);\n        }\n\n      }\n\n      const interceptor = new Interceptor(this.context.signalingClient);\n      this.context.signalingClient.registerObserver(interceptor);\n      this.taskCanceler = interceptor;\n    });\n  }\n\n}\n\nexports.default = SubscribeAndReceiveSubscribeAckTask;","map":{"version":3,"mappings":"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","names":["SubscribeAndReceiveSubscribeAckTask","BaseTask_1","constructor","context","logger","textCompressor","ZLIBTextCompressor_1","cancel","taskCanceler","run","localSdp","peer","localDescription","browserBehavior","requiresUnifiedPlanMunging","DefaultSDP_1","sdp","withUnifiedPlanFormat","enableSimulcast","frameRate","maxEncodeBitrateKbps","videoCaptureAndEncodeParameter","captureFrameRate","encodeBitrates","param","rid","maxBitrate","maxFramerate","active","videoStreamIndex","integrateUplinkPolicyDecision","subscribeFrameSent","videoSubscriptions","requiresUnifiedPlan","fixUpSubscriptionOrder","isSendingStreams","videoDuplexMode","SignalingProtocol_js_1","TX","DUPLEX","compressedSDPOffer","localSdpOffer","serverSupportsCompression","prevOffer","previousSdpOffer","compress","info","length","subscribe","SignalingClientSubscribe_1","meetingSessionConfiguration","credentials","attendeeId","urls","audioHostURL","realtimeController","realtimeIsLocalAudioMuted","localStreamDescriptions","JSON","stringify","signalingClient","subscribeAckFrame","receiveSubscribeAck","decompressedText","compressedSdpAnswer","decompress","previousSdpAnswerAsString","sdpAnswer","logAndThrow","integrateSubscribeAckFrame","transceiverController","getMidForStreamId","undefined","midsToStreamIds","Map","streamId","mid","warn","set","sections","mediaSections","newSubscriptions","section","mediaType","direction","get","push","Promise","resolve","reject","Interceptor","removeObserver","Error","handleSignalingClientEvent","event","isConnectionTerminated","message","closeCode","closeReason","statusCode","MeetingSessionStatusCode_1","TaskFailed","SignalingInternalServerError","audioVideoController","handleMeetingSessionStatus","MeetingSessionStatus_1","type","SignalingClientEventType_1","ReceivedSignalFrame","Type","SUBSCRIBE_ACK","subackFrame","suback","interceptor","registerObserver","exports"],"sourceRoot":"","sources":["../../src/task/SubscribeAndReceiveSubscribeAckTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
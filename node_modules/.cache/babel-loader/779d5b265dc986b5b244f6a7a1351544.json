{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst VideoLogEvent_1 = require(\"../statscollector/VideoLogEvent\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[AttachMediaInputTask]] adds audio and video input to peer connection.\n */\n\n\nclass AttachMediaInputTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'AttachMediaInputTask';\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const transceiverController = this.context.transceiverController;\n      transceiverController.setPeer(this.context.peer);\n      transceiverController.setupLocalTransceivers();\n      const audioInput = this.context.activeAudioInput;\n\n      if (audioInput) {\n        const audioTracks = audioInput.getAudioTracks();\n\n        if (this.context.browserBehavior.requiresUnifiedPlan()) {\n          this.context.logger.info('attaching audio track to peer connection (unified-plan)');\n          yield transceiverController.setAudioInput(audioTracks.length ? audioTracks[0] : null);\n        } else {\n          this.context.logger.info('attaching audio track to peer connection (plan-b)'); // @ts-ignore\n\n          const senders = this.context.peer.getSenders();\n          audioInput.getAudioTracks().forEach(track => {\n            if (!senders.find(sender => {\n              return sender.track.id === track.id;\n            })) {\n              // unclear why this does not deal with the case of removing\n              // an existing track as we do in attachVideoInput\n              // @ts-ignore\n              this.context.localAudioSender = this.context.peer.addTrack(track, audioInput);\n            }\n          });\n        }\n      } else {\n        yield transceiverController.setAudioInput(null);\n        this.context.logger.info('no audio track');\n      }\n\n      const videoInput = this.context.activeVideoInput;\n\n      if (videoInput) {\n        const videoTracks = videoInput.getVideoTracks();\n        const videoTrack = videoTracks.length ? videoTracks[0] : null;\n\n        if (this.context.browserBehavior.requiresUnifiedPlan()) {\n          this.context.logger.info('attaching video track to peer connection (unified-plan)');\n          yield transceiverController.setVideoInput(videoTrack);\n\n          if (this.context.enableSimulcast && this.context.videoUplinkBandwidthPolicy) {\n            const encodingParam = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n            transceiverController.setEncodingParameters(encodingParam);\n          }\n        } else {\n          this.context.logger.info('attaching video track to peer connection (plan-b)'); // @ts-ignore\n\n          const senders = this.context.peer.getSenders();\n\n          if (!senders.find(sender => {\n            return sender.track && sender.track.id === videoTracks[0].id;\n          })) {\n            if (this.context.localVideoSender) {\n              // @ts-ignore\n              this.context.peer.removeTrack(this.context.localVideoSender);\n              this.context.localVideoSender = null;\n            }\n\n            this.context.localVideoSender = this.context.peer.addTrack(videoTracks[0], videoInput);\n          }\n        }\n\n        if (videoTrack) {\n          this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.InputAttached, this.context.videoDeviceInformation);\n          this.context.videoInputAttachedTimestampMs = Date.now();\n        }\n      } else {\n        yield transceiverController.setVideoInput(null);\n        this.context.logger.info('no video track');\n\n        if (this.context.localVideoSender) {\n          this.context.logger.info('removing track from peer'); // @ts-ignore\n\n          this.context.peer.removeTrack(this.context.localVideoSender);\n          this.context.localVideoSender = null;\n        }\n      }\n\n      this.context.videoSubscriptions = transceiverController.updateVideoTransceivers(this.context.videoStreamIndex, this.context.videosToReceive);\n    });\n  }\n\n}\n\nexports.default = AttachMediaInputTask;","map":{"version":3,"mappings":"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","names":["AttachMediaInputTask","BaseTask_1","constructor","context","logger","run","transceiverController","setPeer","peer","setupLocalTransceivers","audioInput","activeAudioInput","audioTracks","getAudioTracks","browserBehavior","requiresUnifiedPlan","info","setAudioInput","length","senders","getSenders","forEach","track","find","sender","id","localAudioSender","addTrack","videoInput","activeVideoInput","videoTracks","getVideoTracks","videoTrack","setVideoInput","enableSimulcast","videoUplinkBandwidthPolicy","encodingParam","chooseEncodingParameters","setEncodingParameters","localVideoSender","removeTrack","statsCollector","logVideoEvent","VideoLogEvent_1","InputAttached","videoDeviceInformation","videoInputAttachedTimestampMs","Date","now","videoSubscriptions","updateVideoTransceivers","videoStreamIndex","videosToReceive","exports"],"sourceRoot":"","sources":["../../src/task/AttachMediaInputTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
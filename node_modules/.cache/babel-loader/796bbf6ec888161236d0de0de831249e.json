{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultDevicePixelRatioMonitor_1 = require(\"../devicepixelratiomonitor/DefaultDevicePixelRatioMonitor\");\n\nconst DevicePixelRatioWindowSource_1 = require(\"../devicepixelratiosource/DevicePixelRatioWindowSource\");\n\nconst Types_1 = require(\"../utils/Types\");\n\nclass DefaultVideoTileController {\n  constructor(tileFactory, audioVideoController, logger) {\n    this.tileFactory = tileFactory;\n    this.audioVideoController = audioVideoController;\n    this.logger = logger;\n    this.tileMap = new Map();\n    this.nextTileId = 1;\n    this.currentLocalTile = null;\n    this.currentPausedTilesByIds = new Set();\n    this.keepLastFrameWhenPaused = false;\n    this.keepLastFrameWhenPaused = audioVideoController.configuration.keepLastFrameWhenPaused;\n  }\n\n  createDevicePixelRatioMonitorIfNeeded() {\n    if (this.devicePixelRatioMonitor) {\n      return;\n    }\n\n    this.devicePixelRatioMonitor = new DefaultDevicePixelRatioMonitor_1.default(new DevicePixelRatioWindowSource_1.default(), this.logger);\n  }\n\n  discardDevicePixelRatioMonitorIfNotNeeded() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.tileMap.size || !this.devicePixelRatioMonitor) {\n        return;\n      }\n\n      const monitor = this.devicePixelRatioMonitor;\n      this.devicePixelRatioMonitor = undefined;\n      return monitor.destroy();\n    });\n  }\n\n  bindVideoElement(tileId, videoElement) {\n    const tile = this.getVideoTile(tileId);\n\n    if (tile === null) {\n      this.logger.warn(`Ignoring video element binding for unknown tile id ${tileId}`);\n      return;\n    }\n\n    tile.bindVideoElement(videoElement);\n  }\n\n  unbindVideoElement(tileId) {\n    this.bindVideoElement(tileId, null);\n  }\n\n  startLocalVideoTile() {\n    const tile = this.findOrCreateLocalVideoTile();\n    this.currentLocalTile.stateRef().localTileStarted = true;\n    this.audioVideoController.update({\n      needsRenegotiation: true\n    });\n    return tile.id();\n  }\n\n  stopLocalVideoTile() {\n    if (!this.currentLocalTile) {\n      return;\n    }\n\n    this.currentLocalTile.stateRef().localTileStarted = false;\n    this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n    this.audioVideoController.update({\n      needsRenegotiation: true\n    });\n  }\n\n  hasStartedLocalVideoTile() {\n    return !!(this.currentLocalTile && this.currentLocalTile.stateRef().localTileStarted);\n  }\n\n  removeLocalVideoTile() {\n    if (this.currentLocalTile) {\n      this.removeVideoTile(this.currentLocalTile.id());\n    }\n  }\n\n  getLocalVideoTile() {\n    return this.currentLocalTile;\n  }\n\n  pauseVideoTile(tileId) {\n    const tile = this.getVideoTile(tileId);\n\n    if (tile) {\n      if (!this.currentPausedTilesByIds.has(tileId)) {\n        this.audioVideoController.pauseReceivingStream(tile.stateRef().streamId);\n        this.currentPausedTilesByIds.add(tileId);\n      }\n\n      tile.pause();\n    }\n  }\n\n  unpauseVideoTile(tileId) {\n    const tile = this.getVideoTile(tileId);\n\n    if (tile) {\n      if (this.currentPausedTilesByIds.has(tileId)) {\n        this.audioVideoController.resumeReceivingStream(tile.stateRef().streamId);\n        this.currentPausedTilesByIds.delete(tileId);\n      }\n\n      tile.unpause();\n    }\n  }\n\n  getVideoTile(tileId) {\n    return this.tileMap.has(tileId) ? this.tileMap.get(tileId) : null;\n  }\n\n  getVideoTileArea(tile) {\n    const state = tile.state();\n    let tileHeight = 0;\n    let tileWidth = 0;\n\n    if (state.boundVideoElement) {\n      tileHeight = state.boundVideoElement.clientHeight * state.devicePixelRatio;\n      tileWidth = state.boundVideoElement.clientWidth * state.devicePixelRatio;\n    }\n\n    return tileHeight * tileWidth;\n  }\n\n  getAllRemoteVideoTiles() {\n    const result = new Array();\n    this.tileMap.forEach((tile, tileId) => {\n      if (!this.currentLocalTile || tileId !== this.currentLocalTile.id()) {\n        result.push(tile);\n      }\n    });\n    return result;\n  }\n\n  getAllVideoTiles() {\n    return Array.from(this.tileMap.values());\n  }\n\n  addVideoTile() {\n    let localTile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const tileId = this.nextTileId;\n    this.nextTileId += 1;\n    this.createDevicePixelRatioMonitorIfNeeded();\n    const tile = this.tileFactory.makeTile(tileId, localTile, this, this.devicePixelRatioMonitor);\n    this.tileMap.set(tileId, tile);\n    return tile;\n  }\n\n  removeVideoTile(tileId) {\n    if (!this.tileMap.has(tileId)) {\n      return;\n    }\n\n    const tile = this.tileMap.get(tileId);\n\n    if (this.currentLocalTile === tile) {\n      this.currentLocalTile = null;\n    }\n\n    tile.destroy();\n    this.tileMap.delete(tileId);\n    this.audioVideoController.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.videoTileWasRemoved).map(f => f.bind(observer)(tileId));\n    });\n    this.discardDevicePixelRatioMonitorIfNotNeeded();\n  }\n\n  removeVideoTilesByAttendeeId(attendeeId) {\n    const tilesRemoved = [];\n\n    for (const tile of this.getAllVideoTiles()) {\n      const state = tile.state();\n\n      if (state.boundAttendeeId === attendeeId) {\n        this.removeVideoTile(state.tileId);\n        tilesRemoved.push(state.tileId);\n      }\n    }\n\n    return tilesRemoved;\n  }\n\n  removeAllVideoTiles() {\n    const tileIds = Array.from(this.tileMap.keys());\n\n    for (const tileId of tileIds) {\n      this.removeVideoTile(tileId);\n    }\n  }\n\n  sendTileStateUpdate(tileState) {\n    this.audioVideoController.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.videoTileDidUpdate).map(f => f.bind(observer)(tileState));\n    });\n  }\n\n  haveVideoTilesWithStreams() {\n    for (const tile of this.getAllVideoTiles()) {\n      if (tile.state().boundVideoStream) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  haveVideoTileForAttendeeId(attendeeId) {\n    return !!this.getVideoTileForAttendeeId(attendeeId);\n  }\n\n  getVideoTileForAttendeeId(attendeeId) {\n    for (const tile of this.getAllVideoTiles()) {\n      const state = tile.state();\n\n      if (state.boundAttendeeId === attendeeId) {\n        return tile;\n      }\n    }\n\n    return undefined;\n  }\n\n  captureVideoTile(tileId) {\n    const tile = this.getVideoTile(tileId);\n\n    if (!tile) {\n      return null;\n    }\n\n    return tile.capture();\n  }\n\n  findOrCreateLocalVideoTile() {\n    if (this.currentLocalTile) {\n      return this.currentLocalTile;\n    }\n\n    this.currentLocalTile = this.addVideoTile(true);\n    this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n    return this.currentLocalTile;\n  }\n\n}\n\nexports.default = DefaultVideoTileController;","map":{"version":3,"mappings":"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","names":["DefaultVideoTileController","constructor","tileFactory","audioVideoController","logger","Map","Set","keepLastFrameWhenPaused","configuration","createDevicePixelRatioMonitorIfNeeded","devicePixelRatioMonitor","DefaultDevicePixelRatioMonitor_1","DevicePixelRatioWindowSource_1","discardDevicePixelRatioMonitorIfNotNeeded","tileMap","size","monitor","undefined","destroy","bindVideoElement","tileId","videoElement","tile","getVideoTile","warn","unbindVideoElement","startLocalVideoTile","findOrCreateLocalVideoTile","currentLocalTile","stateRef","localTileStarted","update","needsRenegotiation","id","stopLocalVideoTile","bindVideoStream","credentials","attendeeId","externalUserId","hasStartedLocalVideoTile","removeLocalVideoTile","removeVideoTile","getLocalVideoTile","pauseVideoTile","currentPausedTilesByIds","has","pauseReceivingStream","streamId","add","pause","unpauseVideoTile","resumeReceivingStream","delete","unpause","get","getVideoTileArea","state","tileHeight","tileWidth","boundVideoElement","clientHeight","devicePixelRatio","clientWidth","getAllRemoteVideoTiles","result","Array","forEach","push","getAllVideoTiles","from","values","addVideoTile","localTile","nextTileId","makeTile","set","forEachObserver","observer","Types_1","of","videoTileWasRemoved","map","f","bind","removeVideoTilesByAttendeeId","tilesRemoved","boundAttendeeId","removeAllVideoTiles","tileIds","keys","sendTileStateUpdate","tileState","videoTileDidUpdate","haveVideoTilesWithStreams","boundVideoStream","haveVideoTileForAttendeeId","getVideoTileForAttendeeId","captureVideoTile","capture","exports"],"sourceRoot":"","sources":["../../src/videotilecontroller/DefaultVideoTileController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
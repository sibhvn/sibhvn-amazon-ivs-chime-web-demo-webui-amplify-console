{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Versioning_1 = require(\"../versioning/Versioning\");\n\nconst WebSocketReadyState_1 = require(\"./WebSocketReadyState\");\n\nclass DefaultWebSocketAdapter {\n  constructor(logger) {\n    this.logger = logger;\n  }\n\n  create(url, protocols, isSignedUrl) {\n    this.connection = new WebSocket(isSignedUrl ? url : Versioning_1.default.urlWithVersion(url), protocols);\n    this.connection.binaryType = 'arraybuffer';\n  }\n\n  send(message) {\n    if (!this.connection) {\n      this.logger.error('WebSocket not yet created or already destroyed.');\n      return false;\n    }\n\n    try {\n      if (message instanceof Uint8Array) {\n        this.connection.send(message.buffer);\n      } else {\n        this.connection.send(message);\n      }\n\n      return true;\n    } catch (err) {\n      this.logger.debug(() => `send error: ${err.message}, websocket state=${WebSocketReadyState_1.default[this.readyState()]}`);\n      return false;\n    }\n  }\n\n  close(code, reason) {\n    var _a;\n\n    (_a = this.connection) === null || _a === void 0 ? void 0 : _a.close(code, reason);\n  }\n\n  destroy() {\n    this.connection = undefined;\n  }\n\n  addEventListener(handler, eventListener) {\n    /* istanbul ignore if */\n    if (!this.connection) {\n      this.logger.warn('Cannot add event listener with no WebSocket connection.');\n      return;\n    }\n\n    this.connection.addEventListener(handler, eventListener);\n  }\n\n  removeEventListener(handler, eventListener) {\n    var _a;\n\n    (_a = this.connection) === null || _a === void 0 ? void 0 : _a.removeEventListener(handler, eventListener);\n  }\n\n  readyState() {\n    if (!this.connection) {\n      return WebSocketReadyState_1.default.None;\n    }\n\n    switch (this.connection.readyState) {\n      case WebSocket.CONNECTING:\n        return WebSocketReadyState_1.default.Connecting;\n\n      case WebSocket.OPEN:\n        return WebSocketReadyState_1.default.Open;\n\n      case WebSocket.CLOSING:\n        return WebSocketReadyState_1.default.Closing;\n\n      case WebSocket.CLOSED:\n        return WebSocketReadyState_1.default.Closed;\n    }\n  }\n\n}\n\nexports.default = DefaultWebSocketAdapter;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAGA;;AAEA;;AAEA,MAAqBA,uBAArB,CAA4C;EAG1CC,YAAoBC,MAApB,EAAkC;IAAd;EAAkB;;EAEtCC,MAAM,CAACC,GAAD,EAAcC,SAAd,EAAmCC,WAAnC,EAAwD;IAC5D,KAAKC,UAAL,GAAkB,IAAIC,SAAJ,CAAcF,WAAW,GAAGF,GAAH,GAASK,qBAAWC,cAAX,CAA0BN,GAA1B,CAAlC,EAAkEC,SAAlE,CAAlB;IACA,KAAKE,UAAL,CAAgBI,UAAhB,GAA6B,aAA7B;EACD;;EAEDC,IAAI,CAACC,OAAD,EAA6B;IAC/B,IAAI,CAAC,KAAKN,UAAV,EAAsB;MACpB,KAAKL,MAAL,CAAYY,KAAZ,CAAkB,iDAAlB;MACA,OAAO,KAAP;IACD;;IAED,IAAI;MACF,IAAID,OAAO,YAAYE,UAAvB,EAAmC;QACjC,KAAKR,UAAL,CAAgBK,IAAhB,CAAqBC,OAAO,CAACG,MAA7B;MACD,CAFD,MAEO;QACL,KAAKT,UAAL,CAAgBK,IAAhB,CAAqBC,OAArB;MACD;;MACD,OAAO,IAAP;IACD,CAPD,CAOE,OAAOI,GAAP,EAAY;MACZ,KAAKf,MAAL,CAAYgB,KAAZ,CACE,MACE,eAAeD,GAAG,CAACJ,OAAO,qBAAqBM,8BAAoB,KAAKC,UAAL,EAApB,CAAsC,EAFzF;MAIA,OAAO,KAAP;IACD;EACF;;EAEDC,KAAK,CAACC,IAAD,EAAgBC,MAAhB,EAA+B;;;IAClC,WAAKhB,UAAL,MAAe,IAAf,IAAeiB,aAAf,GAAe,MAAf,GAAeA,GAAEH,KAAF,CAAQC,IAAR,EAAcC,MAAd,CAAf;EACD;;EAEDE,OAAO;IACL,KAAKlB,UAAL,GAAkBmB,SAAlB;EACD;;EAEDC,gBAAgB,CAACC,OAAD,EAAkBC,aAAlB,EAA8C;IAC5D;IACA,IAAI,CAAC,KAAKtB,UAAV,EAAsB;MACpB,KAAKL,MAAL,CAAY4B,IAAZ,CAAiB,yDAAjB;MACA;IACD;;IACD,KAAKvB,UAAL,CAAgBoB,gBAAhB,CAAiCC,OAAjC,EAA0CC,aAA1C;EACD;;EAEDE,mBAAmB,CAACH,OAAD,EAAkBC,aAAlB,EAA8C;;;IAC/D,WAAKtB,UAAL,MAAe,IAAf,IAAeiB,aAAf,GAAe,MAAf,GAAeA,GAAEO,mBAAF,CAAsBH,OAAtB,EAA+BC,aAA/B,CAAf;EACD;;EAEDT,UAAU;IACR,IAAI,CAAC,KAAKb,UAAV,EAAsB;MACpB,OAAOY,8BAAoBa,IAA3B;IACD;;IACD,QAAQ,KAAKzB,UAAL,CAAgBa,UAAxB;MACE,KAAKZ,SAAS,CAACyB,UAAf;QACE,OAAOd,8BAAoBe,UAA3B;;MACF,KAAK1B,SAAS,CAAC2B,IAAf;QACE,OAAOhB,8BAAoBiB,IAA3B;;MACF,KAAK5B,SAAS,CAAC6B,OAAf;QACE,OAAOlB,8BAAoBmB,OAA3B;;MACF,KAAK9B,SAAS,CAAC+B,MAAf;QACE,OAAOpB,8BAAoBqB,MAA3B;IARJ;EAUD;;AAnEyC;;AAA5CC","names":["DefaultWebSocketAdapter","constructor","logger","create","url","protocols","isSignedUrl","connection","WebSocket","Versioning_1","urlWithVersion","binaryType","send","message","error","Uint8Array","buffer","err","debug","WebSocketReadyState_1","readyState","close","code","reason","_a","destroy","undefined","addEventListener","handler","eventListener","warn","removeEventListener","None","CONNECTING","Connecting","OPEN","Open","CLOSING","Closing","CLOSED","Closed","exports"],"sourceRoot":"","sources":["../../src/websocketadapter/DefaultWebSocketAdapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
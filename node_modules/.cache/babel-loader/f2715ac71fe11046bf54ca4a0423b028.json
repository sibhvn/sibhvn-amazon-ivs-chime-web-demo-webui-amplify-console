{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[ReceiveVideoInputTask]] acquires a video input from [[DeviceController]].\n */\n\n\nclass ReceiveVideoInputTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'ReceiveVideoInputTask';\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: move videoDuplexMode and videoCaptureAndEncodeParameters to video tile controller\n      const receiveEnabled = this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.RX || this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX;\n\n      if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n        this.context.videoDuplexMode = receiveEnabled ? SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX : SignalingProtocol_js_1.SdkStreamServiceType.TX;\n      } else {\n        this.context.videoDuplexMode = receiveEnabled ? SignalingProtocol_js_1.SdkStreamServiceType.RX : 0;\n      }\n\n      this.context.videoCaptureAndEncodeParameter = this.context.videoUplinkBandwidthPolicy.chooseCaptureAndEncodeParameters();\n\n      if (!this.context.videoTileController.hasStartedLocalVideoTile()) {\n        this.context.logger.info('has not started local video tile');\n\n        if (this.context.activeVideoInput) {\n          this.stopVideoInput(); // Indicate to the stream index that we are no longer sending video.  We will\n          // no longer be tracking irrelevant local sending bitrates sent via received Bitrate message, nor will\n          // we track any spurious allocated stream IDs from the backend.\n\n          this.context.videoStreamIndex.integrateUplinkPolicyDecision([]);\n        }\n\n        return;\n      } // TODO: bind after ICE connection started in case of a failure to resubscribe\n      //       or perform error handling to unbind video stream.\n\n\n      const localTile = this.context.videoTileController.getLocalVideoTile();\n      let videoInput = null;\n\n      try {\n        videoInput = yield this.context.mediaStreamBroker.acquireVideoInputStream();\n      } catch (error) {\n        this.context.logger.warn('could not acquire video input from current device');\n      }\n\n      if (this.context.enableSimulcast) {\n        const encodingParams = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n        this.context.videoStreamIndex.integrateUplinkPolicyDecision(Array.from(encodingParams.values()));\n      }\n\n      this.context.activeVideoInput = videoInput;\n\n      if (videoInput) {\n        const videoTracks = videoInput.getVideoTracks(); // There can be a race condition when there are several audioVideo.update calls (e.g., calling\n        // startLocalVideoTile and stopLocalVideoTile at the same time)\n        // that causes the video stream to not contain any video track.\n        // This should recovers in the next update call.\n\n        if (!videoTracks || videoTracks.length === 0) {\n          return;\n        }\n\n        const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n        const trackSettings = videoTracks[0].getSettings();\n\n        if (this.context.enableSimulcast) {\n          const constraint = this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();\n          this.context.logger.info(`simulcast: choose constraint ${JSON.stringify(constraint)}`);\n\n          try {\n            yield videoTracks[0].applyConstraints(constraint);\n          } catch (error) {\n            this.context.logger.info('simulcast: pass video without more constraint');\n          }\n        }\n\n        const externalUserId = this.context.audioVideoController.configuration.credentials.externalUserId;\n        localTile.bindVideoStream(attendeeId, true, videoInput, trackSettings.width, trackSettings.height, null, externalUserId);\n\n        for (let i = 0; i < videoTracks.length; i++) {\n          const track = videoTracks[i];\n          this.logger.info(`using video device label=${track.label} id=${track.id}`);\n          this.context.videoDeviceInformation['current_camera_name'] = track.label;\n          this.context.videoDeviceInformation['current_camera_id'] = track.id;\n        }\n      }\n    });\n  }\n\n  stopVideoInput() {\n    this.context.mediaStreamBroker.releaseMediaStream(this.context.activeVideoInput);\n    this.context.activeVideoInput = null;\n  }\n\n}\n\nexports.default = ReceiveVideoInputTask;","map":{"version":3,"mappings":"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","names":["ReceiveVideoInputTask","BaseTask_1","constructor","context","logger","run","receiveEnabled","videoDuplexMode","SignalingProtocol_js_1","RX","DUPLEX","videoTileController","hasStartedLocalVideoTile","TX","videoCaptureAndEncodeParameter","videoUplinkBandwidthPolicy","chooseCaptureAndEncodeParameters","info","activeVideoInput","stopVideoInput","videoStreamIndex","integrateUplinkPolicyDecision","localTile","getLocalVideoTile","videoInput","mediaStreamBroker","acquireVideoInputStream","error","warn","enableSimulcast","encodingParams","chooseEncodingParameters","Array","from","values","videoTracks","getVideoTracks","length","attendeeId","meetingSessionConfiguration","credentials","trackSettings","getSettings","constraint","chooseMediaTrackConstraints","JSON","stringify","applyConstraints","externalUserId","audioVideoController","configuration","bindVideoStream","width","height","i","track","label","id","videoDeviceInformation","releaseMediaStream","exports"],"sourceRoot":"","sources":["../../src/task/ReceiveVideoInputTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
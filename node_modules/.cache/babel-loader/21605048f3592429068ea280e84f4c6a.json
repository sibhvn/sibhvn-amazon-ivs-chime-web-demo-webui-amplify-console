{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst TimeoutScheduler_1 = require(\"../scheduler/TimeoutScheduler\");\n\nclass DefaultReconnectController {\n  constructor(reconnectTimeoutMs, backoffPolicy) {\n    this.reconnectTimeoutMs = reconnectTimeoutMs;\n    this.backoffPolicy = backoffPolicy;\n    this.shouldReconnect = true;\n    this.onlyRestartPeerConnection = false;\n    this.firstConnectionAttempted = false;\n    this.firstConnectionAttemptTimestampMs = 0;\n    this.lastActiveTimestampMs = Infinity;\n    this._isFirstConnection = true;\n    this.backoffTimer = null;\n    this.backoffCancel = null;\n    this.reset();\n  }\n\n  timeSpentReconnectingMs() {\n    if (!this.firstConnectionAttempted) {\n      return 0;\n    }\n\n    return Date.now() - this.firstConnectionAttemptTimestampMs;\n  }\n\n  hasPastReconnectDeadline() {\n    if (Date.now() - this.lastActiveTimestampMs >= this.reconnectTimeoutMs) {\n      return true;\n    }\n\n    return this.timeSpentReconnectingMs() >= this.reconnectTimeoutMs;\n  }\n\n  reset() {\n    this.cancel();\n    this.shouldReconnect = true;\n    this.onlyRestartPeerConnection = false;\n    this.firstConnectionAttempted = false;\n    this.firstConnectionAttemptTimestampMs = 0;\n    this.lastActiveTimestampMs = Infinity;\n    this.backoffPolicy.reset();\n  }\n\n  startedConnectionAttempt(isFirstConnection) {\n    this._isFirstConnection = isFirstConnection;\n\n    if (!this.firstConnectionAttempted) {\n      this.firstConnectionAttempted = true;\n      this.firstConnectionAttemptTimestampMs = Date.now();\n    }\n  }\n\n  hasStartedConnectionAttempt() {\n    return this.firstConnectionAttempted;\n  }\n\n  isFirstConnection() {\n    return this._isFirstConnection;\n  }\n\n  disableReconnect() {\n    this.shouldReconnect = false;\n  }\n\n  enableRestartPeerConnection() {\n    this.onlyRestartPeerConnection = true;\n  }\n\n  cancel() {\n    this.disableReconnect();\n\n    if (this.backoffTimer) {\n      this.backoffTimer.stop();\n\n      if (this.backoffCancel) {\n        this.backoffCancel();\n        this.backoffCancel = null;\n      }\n    }\n  }\n\n  retryWithBackoff(retryFunc, cancelFunc) {\n    const willRetry = this.shouldReconnect && !this.hasPastReconnectDeadline();\n\n    if (willRetry) {\n      this.backoffCancel = cancelFunc;\n      this.backoffTimer = new TimeoutScheduler_1.default(this.backoffPolicy.nextBackoffAmountMs());\n      this.backoffTimer.start(() => {\n        this.backoffCancel = null;\n        retryFunc();\n      });\n    }\n\n    return willRetry;\n  }\n\n  shouldOnlyRestartPeerConnection() {\n    return this.onlyRestartPeerConnection;\n  }\n\n  clone() {\n    return new DefaultReconnectController(this.reconnectTimeoutMs, this.backoffPolicy);\n  }\n\n  setLastActiveTimestampMs(timestampMs) {\n    this.lastActiveTimestampMs = timestampMs;\n  }\n\n}\n\nexports.default = DefaultReconnectController;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAGA;;AAGA,MAAqBA,0BAArB,CAA+C;EAU7CC,YAAoBC,kBAApB,EAAwDC,aAAxD,EAAoF;IAAhE;IAAoC;IAThD,uBAA2B,IAA3B;IACA,iCAAqC,KAArC;IACA,gCAAoC,KAApC;IACA,yCAA4C,CAA5C;IACA,6BAAgCC,QAAhC;IACA,0BAA8B,IAA9B;IACA,oBAAwC,IAAxC;IACA,qBAA4B,IAA5B;IAGN,KAAKC,KAAL;EACD;;EAEOC,uBAAuB;IAC7B,IAAI,CAAC,KAAKC,wBAAV,EAAoC;MAClC,OAAO,CAAP;IACD;;IACD,OAAOC,IAAI,CAACC,GAAL,KAAa,KAAKC,iCAAzB;EACD;;EAEOC,wBAAwB;IAC9B,IAAIH,IAAI,CAACC,GAAL,KAAa,KAAKG,qBAAlB,IAA2C,KAAKV,kBAApD,EAAwE;MACtE,OAAO,IAAP;IACD;;IAED,OAAO,KAAKI,uBAAL,MAAkC,KAAKJ,kBAA9C;EACD;;EAEDG,KAAK;IACH,KAAKQ,MAAL;IACA,KAAKC,eAAL,GAAuB,IAAvB;IACA,KAAKC,yBAAL,GAAiC,KAAjC;IACA,KAAKR,wBAAL,GAAgC,KAAhC;IACA,KAAKG,iCAAL,GAAyC,CAAzC;IACA,KAAKE,qBAAL,GAA6BR,QAA7B;IACA,KAAKD,aAAL,CAAmBE,KAAnB;EACD;;EAEDW,wBAAwB,CAACC,iBAAD,EAA2B;IACjD,KAAKC,kBAAL,GAA0BD,iBAA1B;;IACA,IAAI,CAAC,KAAKV,wBAAV,EAAoC;MAClC,KAAKA,wBAAL,GAAgC,IAAhC;MACA,KAAKG,iCAAL,GAAyCF,IAAI,CAACC,GAAL,EAAzC;IACD;EACF;;EAEDU,2BAA2B;IACzB,OAAO,KAAKZ,wBAAZ;EACD;;EAEDU,iBAAiB;IACf,OAAO,KAAKC,kBAAZ;EACD;;EAEDE,gBAAgB;IACd,KAAKN,eAAL,GAAuB,KAAvB;EACD;;EAEDO,2BAA2B;IACzB,KAAKN,yBAAL,GAAiC,IAAjC;EACD;;EAEDF,MAAM;IACJ,KAAKO,gBAAL;;IACA,IAAI,KAAKE,YAAT,EAAuB;MACrB,KAAKA,YAAL,CAAkBC,IAAlB;;MACA,IAAI,KAAKC,aAAT,EAAwB;QACtB,KAAKA,aAAL;QACA,KAAKA,aAAL,GAAqB,IAArB;MACD;IACF;EACF;;EAEDC,gBAAgB,CAACC,SAAD,EAAwBC,UAAxB,EAA8C;IAC5D,MAAMC,SAAS,GAAG,KAAKd,eAAL,IAAwB,CAAC,KAAKH,wBAAL,EAA3C;;IACA,IAAIiB,SAAJ,EAAe;MACb,KAAKJ,aAAL,GAAqBG,UAArB;MACA,KAAKL,YAAL,GAAoB,IAAIO,0BAAJ,CAAqB,KAAK1B,aAAL,CAAmB2B,mBAAnB,EAArB,CAApB;MACA,KAAKR,YAAL,CAAkBS,KAAlB,CAAwB,MAAK;QAC3B,KAAKP,aAAL,GAAqB,IAArB;QACAE,SAAS;MACV,CAHD;IAID;;IACD,OAAOE,SAAP;EACD;;EAEDI,+BAA+B;IAC7B,OAAO,KAAKjB,yBAAZ;EACD;;EAEDkB,KAAK;IACH,OAAO,IAAIjC,0BAAJ,CAA+B,KAAKE,kBAApC,EAAwD,KAAKC,aAA7D,CAAP;EACD;;EAED+B,wBAAwB,CAACC,WAAD,EAAoB;IAC1C,KAAKvB,qBAAL,GAA6BuB,WAA7B;EACD;;AAjG4C;;AAA/CC","names":["DefaultReconnectController","constructor","reconnectTimeoutMs","backoffPolicy","Infinity","reset","timeSpentReconnectingMs","firstConnectionAttempted","Date","now","firstConnectionAttemptTimestampMs","hasPastReconnectDeadline","lastActiveTimestampMs","cancel","shouldReconnect","onlyRestartPeerConnection","startedConnectionAttempt","isFirstConnection","_isFirstConnection","hasStartedConnectionAttempt","disableReconnect","enableRestartPeerConnection","backoffTimer","stop","backoffCancel","retryWithBackoff","retryFunc","cancelFunc","willRetry","TimeoutScheduler_1","nextBackoffAmountMs","start","shouldOnlyRestartPeerConnection","clone","setLastActiveTimestampMs","timestampMs","exports"],"sourceRoot":"","sources":["../../src/reconnectcontroller/DefaultReconnectController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Destroyable_1 = require(\"../destroyable/Destroyable\");\n\nconst InMemoryJSONEventBuffer_1 = require(\"../eventbuffer/InMemoryJSONEventBuffer\");\n\nclass DefaultMeetingEventReporter {\n  constructor(eventIngestionConfiguration, logger) {\n    this.reportingEvents = false;\n    this.importantEvents = ['meetingEnded', 'meetingFailed', 'meetingStartFailed', 'audioInputFailed', 'videoInputFailed', 'meetingStartSucceeded'];\n    this.destroyed = false;\n    const {\n      eventsClientConfiguration,\n      ingestionURL,\n      eventBufferConfiguration\n    } = eventIngestionConfiguration;\n    const {\n      eventsToIgnore\n    } = eventsClientConfiguration;\n    this.eventBuffer = new InMemoryJSONEventBuffer_1.default(eventBufferConfiguration, eventsClientConfiguration, ingestionURL, this.importantEvents, logger);\n    this.logger = logger;\n    this.eventsToIgnore = eventsToIgnore;\n    this.start();\n  }\n\n  start() {\n    if (this.reportingEvents) {\n      return;\n    }\n\n    try {\n      this.eventBuffer.start();\n      this.logger.info('Event reporting started');\n      this.reportingEvents = true;\n    } catch (error) {\n      /* istanbul ignore next */\n      this.logger.error(`Event Reporting - Error starting the event buffer ${error}`);\n    }\n  }\n\n  stop() {\n    if (!this.reportingEvents) {\n      return;\n    }\n\n    try {\n      this.eventBuffer.stop();\n      this.logger.info('Event reporting stopped');\n      this.reportingEvents = false;\n    } catch (error) {\n      /* istanbul ignore next */\n      this.logger.error(`Event Reporting - Error stopping the event buffer ${error}`);\n    }\n  }\n\n  reportEvent(ts, name, attributes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.debug(`Event Reporting - DefaultMeetingEventReporter - event received in reportEvent ${ts}, ${name}, ${JSON.stringify(attributes)}`);\n\n      if (this.eventsToIgnore.includes(name)) {\n        this.logger.debug(`Event Reporting - DefaultMeetingEventReporter - ${name} event will be ignored as it is in events to ignore`);\n        return;\n      }\n\n      try {\n        this.logger.debug(`Event Reporting - DefaultMeetingEventReporter - adding item to event buffer`);\n        yield this.eventBuffer.addItem({\n          ts,\n          name,\n          attributes\n        });\n      } catch (error) {\n        this.logger.error(`Event Reporting - Error adding event to buffer ${error}`);\n      }\n    });\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.destroyed = true;\n      this.stop();\n      /* istanbul ignore else */\n\n      if (Destroyable_1.isDestroyable(this.eventBuffer)) {\n        this.eventBuffer.destroy();\n      }\n\n      this.eventBuffer = undefined;\n    });\n  }\n\n}\n\nexports.default = DefaultMeetingEventReporter;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAEA;;AAOA,MAAqBA,2BAArB,CAAgD;EAe9CC,YAAYC,2BAAZ,EAAsEC,MAAtE,EAAoF;IAZ5E,uBAAkB,KAAlB;IAEA,uBAAyC,CAC/C,cAD+C,EAE/C,eAF+C,EAG/C,oBAH+C,EAI/C,kBAJ+C,EAK/C,kBAL+C,EAM/C,uBAN+C,CAAzC;IAQR,iBAAY,KAAZ;IAGE,MAAM;MACJC,yBADI;MAEJC,YAFI;MAGJC;IAHI,IAIFJ,2BAJJ;IAKA,MAAM;MAAEK;IAAF,IAAqBH,yBAA3B;IACA,KAAKI,WAAL,GAAmB,IAAIC,iCAAJ,CACjBH,wBADiB,EAEjBF,yBAFiB,EAGjBC,YAHiB,EAIjB,KAAKK,eAJY,EAKjBP,MALiB,CAAnB;IAOA,KAAKA,MAAL,GAAcA,MAAd;IACA,KAAKI,cAAL,GAAsBA,cAAtB;IACA,KAAKI,KAAL;EACD;;EAEDA,KAAK;IACH,IAAI,KAAKC,eAAT,EAA0B;MACxB;IACD;;IACD,IAAI;MACF,KAAKJ,WAAL,CAAiBG,KAAjB;MACA,KAAKR,MAAL,CAAYU,IAAZ,CAAiB,yBAAjB;MACA,KAAKD,eAAL,GAAuB,IAAvB;IACD,CAJD,CAIE,OAAOE,KAAP,EAAc;MACd;MACA,KAAKX,MAAL,CAAYW,KAAZ,CAAkB,qDAAqDA,KAAK,EAA5E;IACD;EACF;;EAEDC,IAAI;IACF,IAAI,CAAC,KAAKH,eAAV,EAA2B;MACzB;IACD;;IACD,IAAI;MACF,KAAKJ,WAAL,CAAiBO,IAAjB;MACA,KAAKZ,MAAL,CAAYU,IAAZ,CAAiB,yBAAjB;MACA,KAAKD,eAAL,GAAuB,KAAvB;IACD,CAJD,CAIE,OAAOE,KAAP,EAAc;MACd;MACA,KAAKX,MAAL,CAAYW,KAAZ,CAAkB,qDAAqDA,KAAK,EAA5E;IACD;EACF;;EAEKE,WAAW,CACfC,EADe,EAEfC,IAFe,EAGfC,UAHe,EAGgC;;MAE/C,KAAKhB,MAAL,CAAYiB,KAAZ,CACE,iFAAiFH,EAAE,KAAKC,IAAI,KAAKG,IAAI,CAACC,SAAL,CAC/FH,UAD+F,CAEhG,EAHH;;MAKA,IAAI,KAAKZ,cAAL,CAAoBgB,QAApB,CAA6BL,IAA7B,CAAJ,EAAwC;QACtC,KAAKf,MAAL,CAAYiB,KAAZ,CACE,mDAAmDF,IAAI,qDADzD;QAGA;MACD;;MACD,IAAI;QACF,KAAKf,MAAL,CAAYiB,KAAZ,CACE,6EADF;QAGA,MAAM,KAAKZ,WAAL,CAAiBgB,OAAjB,CAAyB;UAAEP,EAAF;UAAMC,IAAN;UAAYC;QAAZ,CAAzB,CAAN;MACD,CALD,CAKE,OAAOL,KAAP,EAAc;QACd,KAAKX,MAAL,CAAYW,KAAZ,CAAkB,kDAAkDA,KAAK,EAAzE;MACD;IACF;EAAA;;EAEKW,OAAO;;MACX,KAAKC,SAAL,GAAiB,IAAjB;MACA,KAAKX,IAAL;MACA;;MACA,IAAIY,4BAAc,KAAKnB,WAAnB,CAAJ,EAAqC;QACnC,KAAKA,WAAL,CAAiBiB,OAAjB;MACD;;MACD,KAAKjB,WAAL,GAAmBoB,SAAnB;IACD;EAAA;;AAhG6C;;AAAhDC","names":["DefaultMeetingEventReporter","constructor","eventIngestionConfiguration","logger","eventsClientConfiguration","ingestionURL","eventBufferConfiguration","eventsToIgnore","eventBuffer","InMemoryJSONEventBuffer_1","importantEvents","start","reportingEvents","info","error","stop","reportEvent","ts","name","attributes","debug","JSON","stringify","includes","addItem","destroy","destroyed","Destroyable_1","undefined","exports"],"sourceRoot":"","sources":["../../src/eventreporter/DefaultMeetingEventReporter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
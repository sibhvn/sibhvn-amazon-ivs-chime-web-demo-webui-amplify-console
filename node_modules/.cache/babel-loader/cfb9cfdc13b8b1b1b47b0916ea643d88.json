{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass DefaultVideoCaptureAndEncodeParameter {\n  constructor(cameraWidth, cameraHeight, cameraFrameRate, maxEncodeBitrateKbps, isSimulcast) {\n    let scaleResolutionDownBy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n    this.cameraWidth = cameraWidth;\n    this.cameraHeight = cameraHeight;\n    this.cameraFrameRate = cameraFrameRate;\n    this.maxEncodeBitrateKbps = maxEncodeBitrateKbps;\n    this.isSimulcast = isSimulcast;\n    this.scaleResolutionDownBy = scaleResolutionDownBy;\n  }\n\n  equal(other) {\n    let checkForEqual = other.captureWidth() === this.cameraWidth && other.captureHeight() === this.cameraHeight && other.captureFrameRate() === this.cameraFrameRate && other.encodeBitrates().length === this.encodeBitrates().length && other.encodeScaleResolutionDownBy().length === this.encodeScaleResolutionDownBy().length && other.encodeWidths().length === this.encodeWidths().length && other.encodeHeights().length === this.encodeHeights().length;\n\n    if (checkForEqual) {\n      for (let i = 0; i < other.encodeWidths().length; i++) {\n        if (other.encodeWidths()[i] !== this.encodeWidths()[i] || other.encodeHeights()[i] !== this.encodeHeights()[i] || other.encodeBitrates()[i] !== this.encodeBitrates()[i] || other.encodeScaleResolutionDownBy()[i] !== this.encodeScaleResolutionDownBy()[i]) {\n          checkForEqual = false;\n          return checkForEqual;\n        }\n      }\n    }\n\n    return checkForEqual;\n  }\n\n  clone() {\n    return new DefaultVideoCaptureAndEncodeParameter(this.cameraWidth, this.cameraHeight, this.cameraFrameRate, this.maxEncodeBitrateKbps, this.isSimulcast, this.scaleResolutionDownBy);\n  }\n\n  captureWidth() {\n    return this.cameraWidth;\n  }\n\n  captureHeight() {\n    return this.cameraHeight;\n  }\n\n  captureFrameRate() {\n    return this.cameraFrameRate;\n  }\n\n  encodeBitrates() {\n    // TODO: add simulcast layer\n    return [this.maxEncodeBitrateKbps];\n  }\n\n  encodeScaleResolutionDownBy() {\n    return [this.scaleResolutionDownBy];\n  }\n\n  encodeWidths() {\n    return [this.cameraWidth];\n  }\n\n  encodeHeights() {\n    return [this.cameraHeight];\n  }\n\n}\n\nexports.default = DefaultVideoCaptureAndEncodeParameter;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAIA,MAAqBA,qCAArB,CAA0D;EAExDC,YACUC,WADV,EAEUC,YAFV,EAGUC,eAHV,EAIUC,oBAJV,EAKUC,WALV,EAM2C;IAAA,IAAjCC,qBAAiC,uEAAD,CAAC;IALjC;IACA;IACA;IACA;IACA;IACA;EACN;;EAEJC,KAAK,CAACC,KAAD,EAA6C;IAChD,IAAIC,aAAa,GACfD,KAAK,CAACE,YAAN,OAAyB,KAAKT,WAA9B,IACAO,KAAK,CAACG,aAAN,OAA0B,KAAKT,YAD/B,IAEAM,KAAK,CAACI,gBAAN,OAA6B,KAAKT,eAFlC,IAGAK,KAAK,CAACK,cAAN,GAAuBC,MAAvB,KAAkC,KAAKD,cAAL,GAAsBC,MAHxD,IAIAN,KAAK,CAACO,2BAAN,GAAoCD,MAApC,KAA+C,KAAKC,2BAAL,GAAmCD,MAJlF,IAKAN,KAAK,CAACQ,YAAN,GAAqBF,MAArB,KAAgC,KAAKE,YAAL,GAAoBF,MALpD,IAMAN,KAAK,CAACS,aAAN,GAAsBH,MAAtB,KAAiC,KAAKG,aAAL,GAAqBH,MAPxD;;IASA,IAAIL,aAAJ,EAAmB;MACjB,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACQ,YAAN,GAAqBF,MAAzC,EAAiDI,CAAC,EAAlD,EAAsD;QACpD,IACEV,KAAK,CAACQ,YAAN,GAAqBE,CAArB,MAA4B,KAAKF,YAAL,GAAoBE,CAApB,CAA5B,IACAV,KAAK,CAACS,aAAN,GAAsBC,CAAtB,MAA6B,KAAKD,aAAL,GAAqBC,CAArB,CAD7B,IAEAV,KAAK,CAACK,cAAN,GAAuBK,CAAvB,MAA8B,KAAKL,cAAL,GAAsBK,CAAtB,CAF9B,IAGAV,KAAK,CAACO,2BAAN,GAAoCG,CAApC,MAA2C,KAAKH,2BAAL,GAAmCG,CAAnC,CAJ7C,EAKE;UACAT,aAAa,GAAG,KAAhB;UACA,OAAOA,aAAP;QACD;MACF;IACF;;IAED,OAAOA,aAAP;EACD;;EAEDU,KAAK;IACH,OAAO,IAAIpB,qCAAJ,CACL,KAAKE,WADA,EAEL,KAAKC,YAFA,EAGL,KAAKC,eAHA,EAIL,KAAKC,oBAJA,EAKL,KAAKC,WALA,EAML,KAAKC,qBANA,CAAP;EAQD;;EAEDI,YAAY;IACV,OAAO,KAAKT,WAAZ;EACD;;EAEDU,aAAa;IACX,OAAO,KAAKT,YAAZ;EACD;;EAEDU,gBAAgB;IACd,OAAO,KAAKT,eAAZ;EACD;;EAEDU,cAAc;IACZ;IACA,OAAO,CAAC,KAAKT,oBAAN,CAAP;EACD;;EAEDW,2BAA2B;IACzB,OAAO,CAAC,KAAKT,qBAAN,CAAP;EACD;;EAEDU,YAAY;IACV,OAAO,CAAC,KAAKf,WAAN,CAAP;EACD;;EAEDgB,aAAa;IACX,OAAO,CAAC,KAAKf,YAAN,CAAP;EACD;;AA5EuD;;AAA1DkB","names":["DefaultVideoCaptureAndEncodeParameter","constructor","cameraWidth","cameraHeight","cameraFrameRate","maxEncodeBitrateKbps","isSimulcast","scaleResolutionDownBy","equal","other","checkForEqual","captureWidth","captureHeight","captureFrameRate","encodeBitrates","length","encodeScaleResolutionDownBy","encodeWidths","encodeHeights","i","clone","exports"],"sourceRoot":"","sources":["../../src/videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SDPCandidateType_1 = require(\"./SDPCandidateType\");\n\nconst SDPMediaSection_1 = require(\"./SDPMediaSection\");\n/**\n * Implements [[SDP]]. [[SDP]] also includes a few helper functions for parsing string.\n */\n\n\nclass DefaultSDP {\n  constructor(sdp) {\n    this.sdp = sdp;\n  }\n\n  clone() {\n    return new DefaultSDP(this.sdp);\n  }\n\n  static isRTPCandidate(candidate) {\n    const match = /candidate[:](\\S+) (\\d+)/g.exec(candidate);\n\n    if (match === null || match[2] !== '1') {\n      return false;\n    }\n\n    return true;\n  }\n\n  static linesToSDP(lines) {\n    return new DefaultSDP(lines.join(DefaultSDP.CRLF));\n  }\n\n  static candidateTypeFromString(candidateType) {\n    switch (candidateType) {\n      case SDPCandidateType_1.default.Host:\n        return SDPCandidateType_1.default.Host;\n\n      case SDPCandidateType_1.default.ServerReflexive:\n        return SDPCandidateType_1.default.ServerReflexive;\n\n      case SDPCandidateType_1.default.PeerReflexive:\n        return SDPCandidateType_1.default.PeerReflexive;\n\n      case SDPCandidateType_1.default.Relay:\n        return SDPCandidateType_1.default.Relay;\n    }\n\n    return null;\n  }\n\n  static candidateType(sdpLine) {\n    const match = /a[=]candidate[:].* typ ([a-z]+) /g.exec(sdpLine);\n\n    if (match === null) {\n      return null;\n    }\n\n    return DefaultSDP.candidateTypeFromString(match[1]);\n  }\n\n  static mediaType(sdpLine) {\n    const match = /m=(audio|video)/g.exec(sdpLine);\n\n    if (match === null) {\n      return undefined;\n    }\n\n    return match[1];\n  }\n\n  static mid(sdpLine) {\n    if (!sdpLine.includes('a=mid:')) {\n      return undefined;\n    }\n\n    return sdpLine.replace(/^(a=mid:)/, '');\n  }\n\n  static direction(sdpLine) {\n    const match = /a=(sendrecv|sendonly|recvonly|inactive)/g.exec(sdpLine);\n\n    if (match === null) {\n      return undefined;\n    }\n\n    return match[1];\n  }\n\n  static splitLines(blob) {\n    return blob.trim().split('\\n').map(line => {\n      return line.trim();\n    });\n  }\n\n  static splitSections(sdp) {\n    // each section starts with \"m=\"\n    const sections = sdp.split('\\nm=');\n    return sections.map((section, index) => {\n      return (index > 0 ? 'm=' + section : section).trim() + DefaultSDP.CRLF;\n    });\n  }\n\n  static findActiveCameraSection(sections) {\n    let cameraLineIndex = 0;\n    let hasCamera = false;\n\n    for (const sec of sections) {\n      if (/^m=video/.test(sec)) {\n        if (sec.indexOf('sendrecv') > -1) {\n          hasCamera = true;\n          break;\n        }\n      }\n\n      cameraLineIndex++;\n    }\n\n    if (hasCamera === false) {\n      cameraLineIndex = -1;\n    }\n\n    return cameraLineIndex;\n  }\n\n  static parseSSRCMedia(ssrcMediaAttributeLine) {\n    const separator = ssrcMediaAttributeLine.indexOf(' ');\n    let ssrc = 0;\n    let attribute = '';\n    let value = '';\n    ssrc = DefaultSDP.extractSSRCFromAttributeLine(ssrcMediaAttributeLine);\n    const secondColon = ssrcMediaAttributeLine.indexOf(':', separator);\n\n    if (secondColon > -1) {\n      attribute = ssrcMediaAttributeLine.substr(separator + 1, secondColon - separator - 1);\n      value = ssrcMediaAttributeLine.substr(secondColon + 1);\n    } else {\n      attribute = ssrcMediaAttributeLine.substr(separator + 1);\n    }\n\n    return [ssrc, attribute, value];\n  } // a=ssrc-group:<semantics> <ssrc-id> ...\n\n\n  static extractSSRCsFromFIDGroupLine(figGroupLine) {\n    const ssrcStringMatch = /^a=ssrc-group:FID\\s(.+)/.exec(figGroupLine);\n    return ssrcStringMatch[1];\n  } // a=ssrc:<ssrc-id> <attribute> or a=ssrc:<ssrc-id> <attribute>:<value>, ssrc-id is a 32bit integer\n\n\n  static extractSSRCFromAttributeLine(ssrcMediaAttributeLine) {\n    const ssrcStringMatch = /^a=ssrc:([0-9]+)\\s/.exec(ssrcMediaAttributeLine);\n\n    if (ssrcStringMatch === null) {\n      return 0;\n    }\n\n    return parseInt(ssrcStringMatch[1], 10);\n  }\n\n  static matchPrefix(blob, prefix) {\n    return DefaultSDP.splitLines(blob).filter(line => {\n      return line.indexOf(prefix) === 0;\n    });\n  }\n\n  lines() {\n    return this.sdp.split(DefaultSDP.CRLF);\n  }\n\n  hasVideo() {\n    return /^m=video/gm.exec(this.sdp) !== null;\n  }\n\n  hasCandidates() {\n    const match = /a[=]candidate[:]/g.exec(this.sdp);\n\n    if (match === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  hasCandidatesForAllMLines() {\n    const isAnyCLineUsingLocalHost = this.sdp.indexOf('c=IN IP4 0.0.0.0') > -1;\n    const mLinesHaveCandidates = !isAnyCLineUsingLocalHost;\n    return mLinesHaveCandidates;\n  }\n\n  withBundleAudioVideo() {\n    const srcLines = this.lines();\n    const dstLines = [];\n\n    for (const line of srcLines) {\n      const mod = line.replace(/^a=group:BUNDLE audio$/, 'a=group:BUNDLE audio video');\n\n      if (mod !== line) {\n        dstLines.push(mod);\n        continue;\n      }\n\n      dstLines.push(line);\n    }\n\n    return DefaultSDP.linesToSDP(dstLines);\n  }\n\n  copyVideo(otherSDP) {\n    const otherLines = otherSDP.split(DefaultSDP.CRLF);\n    const dstLines = DefaultSDP.splitLines(this.sdp);\n    let inVideoMedia = false;\n\n    for (const line of otherLines) {\n      if (/^m=video/.test(line)) {\n        inVideoMedia = true;\n      } else if (/^m=/.test(line)) {\n        inVideoMedia = false;\n      }\n\n      if (inVideoMedia) {\n        dstLines.push(line);\n      }\n    }\n\n    return DefaultSDP.linesToSDP(dstLines);\n  }\n\n  withoutCandidateType(candidateTypeToExclude) {\n    return DefaultSDP.linesToSDP(this.lines().filter(line => DefaultSDP.candidateType(line) !== candidateTypeToExclude));\n  }\n\n  withoutServerReflexiveCandidates() {\n    return this.withoutCandidateType(SDPCandidateType_1.default.ServerReflexive);\n  }\n\n  withBandwidthRestriction(maxBitrateKbps, isFirefox) {\n    const srcLines = this.lines();\n    const dstLines = [];\n\n    for (const line of srcLines) {\n      dstLines.push(line);\n\n      if (/^m=video/.test(line)) {\n        if (isFirefox) {\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1359854\n          dstLines.push(`b=TIAS:${maxBitrateKbps * 1000}`);\n        } else {\n          dstLines.push(`b=AS:${maxBitrateKbps}`);\n        }\n      }\n    }\n\n    return DefaultSDP.linesToSDP(dstLines);\n  }\n\n  withAudioMaxAverageBitrate(maxAverageBitrate) {\n    if (!maxAverageBitrate) {\n      return this.clone();\n    }\n\n    maxAverageBitrate = Math.trunc(Math.min(Math.max(maxAverageBitrate, DefaultSDP.rfc7587LowestBitrate), DefaultSDP.rfc7587HighestBitrate));\n    const srcLines = this.lines();\n    const fmtpAttributes = DefaultSDP.findOpusFmtpAttributes(srcLines);\n    const dstLines = DefaultSDP.updateOpusFmtpAttributes(srcLines, fmtpAttributes, [`maxaveragebitrate=${maxAverageBitrate}`]);\n    return DefaultSDP.linesToSDP(dstLines);\n  }\n\n  withStereoAudio() {\n    const srcLines = this.lines();\n    const fmtpAttributes = DefaultSDP.findOpusFmtpAttributes(srcLines);\n    const dstLines = DefaultSDP.updateOpusFmtpAttributes(srcLines, fmtpAttributes, ['stereo=1', 'sprop-stereo=1']);\n    return DefaultSDP.linesToSDP(dstLines);\n  }\n  /**\n   * Here we loop through each line in the SDP\n   * and construct an array containing the fmtp\n   * attribute for all the audio m lines that use\n   * the opus codec. If it doesn't use opus codec\n   * we add null to the array which tells\n   * updateOpusFmtpAttributes that no update is\n   * needed for that particular fmtp attribute line\n   */\n\n\n  static findOpusFmtpAttributes(sdpLines) {\n    const opusRtpMapRegex = /^a=rtpmap:\\s*(\\d+)\\s+opus\\/48000/;\n    let lookingForOpusRtpMap = false;\n    const fmtpAttributes = [];\n\n    for (const line of sdpLines) {\n      if (line.startsWith('m=audio')) {\n        fmtpAttributes.push(null);\n        lookingForOpusRtpMap = true;\n      }\n\n      if (line.startsWith('m=video')) {\n        // Opus rtpmap is only part of audio m lines section\n        // Set this to false as we don't need to perform regex\n        // matches for video section\n        lookingForOpusRtpMap = false;\n      }\n\n      if (lookingForOpusRtpMap) {\n        const match = opusRtpMapRegex.exec(line);\n\n        if (match !== null) {\n          fmtpAttributes[fmtpAttributes.length - 1] = `a=fmtp:${match[1]} `;\n        }\n      }\n    }\n\n    return fmtpAttributes;\n  }\n  /**\n   * Update the fmtp lines in each audio m section\n   * that correspond to the opus codec with the parameters\n   * specifief in additionalParams\n   */\n\n\n  static updateOpusFmtpAttributes(srcLines, fmtpAttributes, additionalParams) {\n    const dstLines = [];\n    let fmtpIndex = 0;\n    let currFmtpAttribute = null;\n\n    for (const line of srcLines) {\n      if (line.startsWith('m=audio')) {\n        currFmtpAttribute = fmtpAttributes[fmtpIndex];\n        fmtpIndex++;\n      }\n\n      if (line.startsWith('m=video')) {\n        currFmtpAttribute = null;\n      }\n\n      if (currFmtpAttribute && line.startsWith(currFmtpAttribute)) {\n        const oldParameters = line.slice(currFmtpAttribute.length).split(';');\n        const newParameters = []; // If an existing parameter is in additionalParams\n        // dont add it to newParameters as it will be replaced\n\n        for (const parameter of oldParameters) {\n          const index = additionalParams.findIndex(element => element.startsWith(parameter.split('=')[0]));\n\n          if (index < 0) {\n            newParameters.push(parameter);\n          }\n        }\n\n        for (const parameter of additionalParams) {\n          newParameters.push(parameter);\n        }\n\n        dstLines.push(currFmtpAttribute + newParameters.join(';'));\n      } else {\n        dstLines.push(line);\n      }\n    }\n\n    return dstLines;\n  } // TODO: will remove this soon.\n\n\n  withUnifiedPlanFormat() {\n    let originalSdp = this.sdp;\n\n    if (originalSdp.includes('mozilla')) {\n      return this.clone();\n    } else {\n      originalSdp = originalSdp.replace('o=-', 'o=mozilla-chrome');\n    }\n\n    return new DefaultSDP(originalSdp);\n  }\n\n  getUniqueRtpHeaderExtensionId(srcLines) {\n    const headerExtensionIds = [];\n\n    for (const line of srcLines) {\n      if (/^a=extmap:/.test(line.trim())) {\n        const headerExtension = line.split('a=extmap:')[1].split(' ');\n        const id = +headerExtension[0];\n        headerExtensionIds.push(id);\n      }\n    }\n\n    headerExtensionIds.sort((a, b) => a - b);\n    let previousId = 0; // header extension cannot be 0, refer https://datatracker.ietf.org/doc/html/rfc5285\n\n    for (const id of headerExtensionIds) {\n      if (id - previousId > 1) {\n        return previousId + 1;\n      }\n\n      previousId = id;\n    } // One-Byte Header header extension cannot be bigger than 14, refer https://datatracker.ietf.org/doc/html/rfc5285\n\n\n    return previousId === 14 ? -1 : previousId + 1;\n  } // negotiate with the back end to determine whether to use layers allocation header extension\n  // to avoid resubscribing to preemptively turn off simulcast streams or to switch layers\n  // this will not add the packet overhead unless negotiated to avoid waste\n\n\n  withVideoLayersAllocationRtpHeaderExtension() {\n    const sections = DefaultSDP.splitSections(this.sdp);\n    const newSections = [];\n\n    for (let section of sections) {\n      if (/^m=video/.test(section)) {\n        const srcLines = DefaultSDP.splitLines(section);\n        const dstLines = [];\n        const id = this.getUniqueRtpHeaderExtensionId(srcLines);\n\n        if (id === -1) {\n          // if all ids are used, we won't add new line to it\n          newSections.push(section);\n          continue;\n        }\n\n        for (const line of srcLines) {\n          dstLines.push(line);\n\n          if (/^a=sendrecv/.test(line.trim())) {\n            const targetLine = `a=extmap:` + id + ` http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00`;\n            dstLines.push(targetLine);\n          }\n        }\n\n        section = dstLines.join(DefaultSDP.CRLF) + DefaultSDP.CRLF;\n      }\n\n      newSections.push(section);\n    }\n\n    const newSdp = newSections.join('');\n    return new DefaultSDP(newSdp);\n  }\n\n  preferH264IfExists() {\n    const srcSDP = this.sdp;\n    const sections = DefaultSDP.splitSections(srcSDP);\n\n    if (sections.length < 2) {\n      return new DefaultSDP(this.sdp);\n    }\n\n    const newSections = [];\n\n    for (let i = 0; i < sections.length; i++) {\n      if (/^m=video/.test(sections[i])) {\n        const lines = DefaultSDP.splitLines(sections[i]);\n        let payloadTypeForVP8 = 0;\n        let payloadTypeForH264 = 0;\n        lines.forEach(attribute => {\n          if (/^a=rtpmap:/.test(attribute)) {\n            const payloadMatch = /^a=rtpmap:([0-9]+)\\s/.exec(attribute);\n\n            if (attribute.toLowerCase().includes('vp8')) {\n              payloadTypeForVP8 = parseInt(payloadMatch[1], 10);\n            } else if (attribute.toLowerCase().includes('h264')) {\n              payloadTypeForH264 = parseInt(payloadMatch[1], 10);\n            }\n          }\n        }); // m=video 9 UDP/+++ <payload>\n\n        if (payloadTypeForVP8 !== 0 && payloadTypeForH264 !== 0) {\n          const mline = lines[0].split(' ');\n          let indexForVP8 = -1;\n          let indexForH264 = -1;\n\n          for (let i = 3; i < mline.length; i++) {\n            const payload = parseInt(mline[i], 10);\n\n            if (payload === payloadTypeForVP8) {\n              indexForVP8 = i;\n            } else if (payload === payloadTypeForH264) {\n              indexForH264 = i;\n            }\n          }\n\n          if (indexForVP8 < indexForH264) {\n            mline[indexForVP8] = payloadTypeForH264.toString();\n            mline[indexForH264] = payloadTypeForVP8.toString();\n          }\n\n          lines[0] = mline.join(' ');\n        }\n\n        sections[i] = lines.join(DefaultSDP.CRLF) + DefaultSDP.CRLF; // since there is only H264 or VP8, we don't switch payload places\n      }\n\n      newSections.push(sections[i]);\n    }\n\n    const newSdp = newSections.join('');\n    return new DefaultSDP(newSdp);\n  }\n\n  withOldFashionedMungingSimulcast(videoSimulcastLayerCount) {\n    if (videoSimulcastLayerCount < 2) {\n      return this.clone();\n    }\n\n    const srcSDP = this.sdp;\n    const sections = DefaultSDP.splitSections(srcSDP);\n\n    if (sections.length < 2) {\n      return new DefaultSDP(this.sdp);\n    }\n\n    const cameraLineIndex = DefaultSDP.findActiveCameraSection(sections);\n\n    if (cameraLineIndex === -1) {\n      return new DefaultSDP(this.sdp);\n    }\n\n    let cname = '';\n    let msid = '';\n    DefaultSDP.matchPrefix(sections[cameraLineIndex], 'a=ssrc:').forEach(line => {\n      const ssrcAttrTuple = DefaultSDP.parseSSRCMedia(line);\n\n      if (ssrcAttrTuple[1] === 'cname') {\n        cname = ssrcAttrTuple[2];\n      } else if (ssrcAttrTuple[1] === 'msid') {\n        msid = ssrcAttrTuple[2];\n      }\n    });\n    const fidGroupMatch = DefaultSDP.matchPrefix(sections[cameraLineIndex], 'a=ssrc-group:FID ');\n\n    if (cname === '' || msid === '' || fidGroupMatch.length < 1) {\n      return new DefaultSDP(this.sdp);\n    }\n\n    const fidGroup = DefaultSDP.extractSSRCsFromFIDGroupLine(fidGroupMatch[0]);\n    const cameraSectionLines = sections[cameraLineIndex].trim().split(DefaultSDP.CRLF).filter(line => {\n      return line.indexOf('a=ssrc:') !== 0 && line.indexOf('a=ssrc-group:') !== 0;\n    });\n    const simulcastSSRCs = [];\n    const [videoSSRC1, rtxSSRC1] = fidGroup.split(' ').map(ssrc => parseInt(ssrc, 10));\n    let videoSSRC = videoSSRC1;\n    let rtxSSRC = rtxSSRC1;\n\n    for (let i = 0; i < videoSimulcastLayerCount; i++) {\n      cameraSectionLines.push('a=ssrc:' + videoSSRC + ' cname:' + cname);\n      cameraSectionLines.push('a=ssrc:' + videoSSRC + ' msid:' + msid);\n      cameraSectionLines.push('a=ssrc:' + rtxSSRC + ' cname:' + cname);\n      cameraSectionLines.push('a=ssrc:' + rtxSSRC + ' msid:' + msid);\n      cameraSectionLines.push('a=ssrc-group:FID ' + videoSSRC + ' ' + rtxSSRC);\n      simulcastSSRCs.push(videoSSRC);\n      videoSSRC = videoSSRC + 1;\n      rtxSSRC = videoSSRC + 1;\n    }\n\n    cameraSectionLines.push('a=ssrc-group:SIM ' + simulcastSSRCs.join(' '));\n    sections[cameraLineIndex] = cameraSectionLines.join(DefaultSDP.CRLF) + DefaultSDP.CRLF;\n    const newSDP = sections.join('');\n    return new DefaultSDP(newSDP);\n  }\n\n  ssrcForVideoSendingSection() {\n    const srcSDP = this.sdp;\n    const sections = DefaultSDP.splitSections(srcSDP);\n\n    if (sections.length < 2) {\n      return '';\n    }\n\n    const cameraLineIndex = DefaultSDP.findActiveCameraSection(sections);\n\n    if (cameraLineIndex === -1) {\n      return '';\n    } // TODO: match for Firefox. Currently all failures are not Firefox induced.\n\n\n    const fidGroupMatch = DefaultSDP.matchPrefix(sections[cameraLineIndex], 'a=ssrc-group:FID ');\n\n    if (fidGroupMatch.length < 1) {\n      return '';\n    }\n\n    const fidGroup = DefaultSDP.extractSSRCsFromFIDGroupLine(fidGroupMatch[0]);\n    const [videoSSRC1] = fidGroup.split(' ').map(ssrc => parseInt(ssrc, 10));\n    return videoSSRC1.toString();\n  }\n\n  videoSendSectionHasDifferentSSRC(prevSdp) {\n    const ssrc1 = this.ssrcForVideoSendingSection();\n    const ssrc2 = prevSdp.ssrcForVideoSendingSection();\n\n    if (ssrc1 === '' || ssrc2 === '') {\n      return false;\n    }\n\n    const ssrc1InNumber = parseInt(ssrc1, 10);\n    const ssrc2InNumber = parseInt(ssrc2, 10);\n\n    if (ssrc1InNumber === ssrc2InNumber) {\n      return false;\n    }\n\n    return true;\n  }\n\n  removeH264SupportFromSendSection() {\n    const srcSDP = this.sdp;\n    const sections = DefaultSDP.splitSections(srcSDP);\n    const cameraLineIndex = DefaultSDP.findActiveCameraSection(sections);\n\n    if (cameraLineIndex === -1) {\n      return new DefaultSDP(this.sdp);\n    }\n\n    const cameraSection = sections[cameraLineIndex];\n    const cameraSectionLines = DefaultSDP.splitLines(cameraSection);\n    const payloadTypesForH264 = [];\n    const primaryPayloadTypeToFeedbackPayloadTypes = new Map(); // Loop through camera section (m=video)\n\n    cameraSectionLines.forEach(attribute => {\n      // Find the payload type with H264 codec line (e.g., a=rtpmap:<payload> H264/90000)\n      if (/^a=rtpmap:/.test(attribute)) {\n        const payloadMatch = /^a=rtpmap:([0-9]+)\\s/.exec(attribute);\n\n        if (payloadMatch && attribute.toLowerCase().includes('h264')) {\n          payloadTypesForH264.push(parseInt(payloadMatch[1], 10));\n        }\n      } // Loop through the rtx payload and create a mapping between it and the primary payload.\n      // a=fmtp:<rtx payload> apt=<primary payload>\n\n\n      if (/^a=fmtp:/.test(attribute)) {\n        const feedbackMatches = /^a=fmtp:([0-9]+) apt=([0-9]+)/.exec(attribute);\n\n        if (feedbackMatches && feedbackMatches.length === 3) {\n          const feedbackPayloadType = parseInt(feedbackMatches[1], 10);\n          const primaryPayloadType = parseInt(feedbackMatches[2], 10);\n\n          if (primaryPayloadTypeToFeedbackPayloadTypes.has(primaryPayloadType)) {\n            primaryPayloadTypeToFeedbackPayloadTypes.get(primaryPayloadType).push(feedbackPayloadType);\n          } else {\n            primaryPayloadTypeToFeedbackPayloadTypes.set(primaryPayloadType, [feedbackPayloadType]);\n          }\n        }\n      }\n    }); // Add the rtx payloads corresponding to the H264 codec to the remove list\n\n    const payloadTypesToRemove = new Set();\n\n    for (const type of payloadTypesForH264) {\n      payloadTypesToRemove.add(type);\n      const feedbackTypes = primaryPayloadTypeToFeedbackPayloadTypes.get(type);\n\n      if (feedbackTypes) {\n        for (const feedbackType of feedbackTypes) {\n          payloadTypesToRemove.add(feedbackType);\n        }\n      }\n    } // Remove H264 payload from the media line. m=video 9 UDP/+++ <payload> <payload> <payload>\n\n\n    if (payloadTypesForH264.length > 0) {\n      const mline = cameraSectionLines[0].split(' ');\n      cameraSectionLines[0] = mline.filter(text => !payloadTypesToRemove.has(parseInt(text))).join(' ');\n    } // Filter out lines with H264 payload\n\n\n    const filteredLines = cameraSectionLines.filter(line => {\n      if (!line.includes('rtpmap') && !line.includes('rtcp-fb') && !line.includes('fmtp')) {\n        return true;\n      }\n\n      for (const type of payloadTypesToRemove) {\n        if (line.includes(type.toString())) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n    sections[cameraLineIndex] = filteredLines.join(DefaultSDP.CRLF) + DefaultSDP.CRLF;\n    const newSDP = sections.join('');\n    return new DefaultSDP(newSDP);\n  }\n\n  mediaSections() {\n    const sections = DefaultSDP.splitSections(this.sdp);\n\n    if (sections.length < 2) {\n      return [];\n    }\n\n    const parsedMediaSections = [];\n\n    for (let i = 1; i < sections.length; i++) {\n      const section = new SDPMediaSection_1.default();\n      const lines = DefaultSDP.splitLines(sections[i]);\n\n      for (const line of lines) {\n        const mediaType = DefaultSDP.mediaType(line);\n\n        if (mediaType !== undefined) {\n          section.mediaType = mediaType;\n          continue;\n        }\n\n        const direction = DefaultSDP.direction(line);\n\n        if (direction !== undefined) {\n          section.direction = direction;\n          continue;\n        }\n\n        const mid = DefaultSDP.mid(line);\n\n        if (mid !== undefined) {\n          section.mid = mid;\n          continue;\n        }\n      }\n\n      parsedMediaSections.push(section);\n    }\n\n    return parsedMediaSections;\n  }\n\n}\n\nexports.default = DefaultSDP;\nDefaultSDP.CRLF = '\\r\\n';\nDefaultSDP.rfc7587LowestBitrate = 6000;\nDefaultSDP.rfc7587HighestBitrate = 510000;","map":{"version":3,"mappings":"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","names":["DefaultSDP","constructor","sdp","clone","isRTPCandidate","candidate","match","exec","linesToSDP","lines","join","CRLF","candidateTypeFromString","candidateType","SDPCandidateType_1","Host","ServerReflexive","PeerReflexive","Relay","sdpLine","mediaType","undefined","mid","includes","replace","direction","splitLines","blob","trim","split","map","line","splitSections","sections","section","index","findActiveCameraSection","cameraLineIndex","hasCamera","sec","test","indexOf","parseSSRCMedia","ssrcMediaAttributeLine","separator","ssrc","attribute","value","extractSSRCFromAttributeLine","secondColon","substr","extractSSRCsFromFIDGroupLine","figGroupLine","ssrcStringMatch","parseInt","matchPrefix","prefix","filter","hasVideo","hasCandidates","hasCandidatesForAllMLines","isAnyCLineUsingLocalHost","mLinesHaveCandidates","withBundleAudioVideo","srcLines","dstLines","mod","push","copyVideo","otherSDP","otherLines","inVideoMedia","withoutCandidateType","candidateTypeToExclude","withoutServerReflexiveCandidates","withBandwidthRestriction","maxBitrateKbps","isFirefox","withAudioMaxAverageBitrate","maxAverageBitrate","Math","trunc","min","max","rfc7587LowestBitrate","rfc7587HighestBitrate","fmtpAttributes","findOpusFmtpAttributes","updateOpusFmtpAttributes","withStereoAudio","sdpLines","opusRtpMapRegex","lookingForOpusRtpMap","startsWith","length","additionalParams","fmtpIndex","currFmtpAttribute","oldParameters","slice","newParameters","parameter","findIndex","element","withUnifiedPlanFormat","originalSdp","getUniqueRtpHeaderExtensionId","headerExtensionIds","headerExtension","id","sort","a","b","previousId","withVideoLayersAllocationRtpHeaderExtension","newSections","targetLine","newSdp","preferH264IfExists","srcSDP","i","payloadTypeForVP8","payloadTypeForH264","forEach","payloadMatch","toLowerCase","mline","indexForVP8","indexForH264","payload","toString","withOldFashionedMungingSimulcast","videoSimulcastLayerCount","cname","msid","ssrcAttrTuple","fidGroupMatch","fidGroup","cameraSectionLines","simulcastSSRCs","videoSSRC1","rtxSSRC1","videoSSRC","rtxSSRC","newSDP","ssrcForVideoSendingSection","videoSendSectionHasDifferentSSRC","prevSdp","ssrc1","ssrc2","ssrc1InNumber","ssrc2InNumber","removeH264SupportFromSendSection","cameraSection","payloadTypesForH264","primaryPayloadTypeToFeedbackPayloadTypes","Map","feedbackMatches","feedbackPayloadType","primaryPayloadType","has","get","set","payloadTypesToRemove","Set","type","add","feedbackTypes","feedbackType","text","filteredLines","mediaSections","parsedMediaSections","SDPMediaSection_1","exports"],"sourceRoot":"","sources":["../../src/sdp/DefaultSDP.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst pako = require('pako');\n/**\n * [[ZLIBTextCompressor]] Performs the text compression and decompression using zlib\n */\n\n\nclass ZLIBTextCompressor {\n  /**\n   * Constructs an instance of [[ZLIBTextCompressor]]\n   * @param logger\n   */\n  constructor(logger) {\n    this.logger = logger;\n  }\n  /**\n   * Compresses the given text.\n   *\n   * Note: The dictionary used during compression should be the same as\n   * that being used during decompression.\n   *\n   * @param text - the text that needs to be compressed\n   * @param dictionary - that will be used to seed the compression\n   *      library to improve compression's performance\n   * @returns a compressed text\n   */\n\n\n  compress(text, dictionary) {\n    if (dictionary.length > 0) {\n      const dictionarySize = Math.min(dictionary.length, ZLIBTextCompressor.MAX_DICTIONARY_SIZE);\n      dictionary = dictionary.slice(0, dictionarySize);\n    }\n\n    const options = {\n      memLevel: ZLIBTextCompressor.Z_MEM_LEVEL,\n      dictionary: dictionary\n    };\n    const compressedText = pako.deflateRaw(text, options);\n    return compressedText;\n  }\n  /**\n   * Decompresses the given text and returns the original text.\n   *\n   * Note: The dictionary used during compression should be the same as\n   * that being used during decompression.\n   *\n   * @param compressedText that will be decompressed\n   * @param dictionary that will be used to seed the compression library to improve\n   *      decompression's performance\n   * @returns decompressed string\n   */\n\n\n  decompress(compressedText, dictionary) {\n    if (dictionary.length > 0) {\n      const dictionarySize = Math.min(dictionary.length, ZLIBTextCompressor.MAX_DICTIONARY_SIZE);\n      dictionary = dictionary.slice(0, dictionarySize);\n    }\n\n    const options = {\n      to: 'string',\n      dictionary: dictionary,\n      chunkSize: 4096\n    };\n    let decompressedText = '';\n\n    try {\n      decompressedText = pako.inflateRaw(compressedText, options);\n    } catch (ex) {\n      this.logger.error(`failed to decompress the string with error: [${ex}]`);\n    }\n\n    return decompressedText;\n  }\n\n}\n\nexports.default = ZLIBTextCompressor; // The memory Level parameter specifies how much memory to use for the internal state.\n// Smaller values use less memory but are slower, while higher values use more memory\n// to gain compression speed.\n// Range is between 1 to 9\n\nZLIBTextCompressor.Z_MEM_LEVEL = 9; // 32kB is the maximum dictionary size supported by the zlib format.\n\nZLIBTextCompressor.MAX_DICTIONARY_SIZE = 31744; // 31 KB","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;AAGA;;;;;AAGA,MAAqBC,kBAArB,CAAuC;EAUrC;;;;EAIAC,YAAoBC,MAApB,EAAkC;IAAd;EAAkB;EAEtC;;;;;;;;;;;;;EAWAC,QAAQ,CAACC,IAAD,EAAeC,UAAf,EAAiC;IACvC,IAAIA,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;MACzB,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAL,CAASJ,UAAU,CAACC,MAApB,EAA4BN,kBAAkB,CAACU,mBAA/C,CAAvB;MACAL,UAAU,GAAGA,UAAU,CAACM,KAAX,CAAiB,CAAjB,EAAoBJ,cAApB,CAAb;IACD;;IAED,MAAMK,OAAO,GAAG;MACdC,QAAQ,EAAEb,kBAAkB,CAACc,WADf;MAEdT,UAAU,EAAEA;IAFE,CAAhB;IAKA,MAAMU,cAAc,GAAGjB,IAAI,CAACkB,UAAL,CAAgBZ,IAAhB,EAAsBQ,OAAtB,CAAvB;IACA,OAAOG,cAAP;EACD;EAED;;;;;;;;;;;;;EAWAE,UAAU,CAACF,cAAD,EAA6BV,UAA7B,EAA+C;IACvD,IAAIA,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;MACzB,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAL,CAASJ,UAAU,CAACC,MAApB,EAA4BN,kBAAkB,CAACU,mBAA/C,CAAvB;MACAL,UAAU,GAAGA,UAAU,CAACM,KAAX,CAAiB,CAAjB,EAAoBJ,cAApB,CAAb;IACD;;IAED,MAAMK,OAAO,GAAG;MACdM,EAAE,EAAE,QADU;MAEdb,UAAU,EAAEA,UAFE;MAGdc,SAAS,EAAE;IAHG,CAAhB;IAMA,IAAIC,gBAAgB,GAAG,EAAvB;;IACA,IAAI;MACFA,gBAAgB,GAAGtB,IAAI,CAACuB,UAAL,CAAgBN,cAAhB,EAAgCH,OAAhC,CAAnB;IACD,CAFD,CAEE,OAAOU,EAAP,EAAW;MACX,KAAKpB,MAAL,CAAYqB,KAAZ,CAAkB,gDAAgDD,EAAE,GAApE;IACD;;IACD,OAAOF,gBAAP;EACD;;AAxEoC;;AAAvCI,qC,CACE;AACA;AACA;AACA;;AACexB,iCAAsB,CAAtB,C,CAEf;;AACeA,yCAA8B,KAA9B,C,CAAqC","names":["pako","require","ZLIBTextCompressor","constructor","logger","compress","text","dictionary","length","dictionarySize","Math","min","MAX_DICTIONARY_SIZE","slice","options","memLevel","Z_MEM_LEVEL","compressedText","deflateRaw","decompress","to","chunkSize","decompressedText","inflateRaw","ex","error","exports"],"sourceRoot":"","sources":["../../src/sdp/ZLIBTextCompressor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
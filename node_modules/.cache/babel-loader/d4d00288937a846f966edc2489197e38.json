{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SimulcastLayers_1 = require(\"../simulcastlayers/SimulcastLayers\");\n\nconst SimulcastTransceiverController_1 = require(\"../transceivercontroller/SimulcastTransceiverController\");\n\nconst Types_1 = require(\"../utils/Types\");\n\nconst DefaultVideoCaptureAndEncodeParameter_1 = require(\"../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter\");\n\nconst BitrateParameters_1 = require(\"./BitrateParameters\");\n/**\n * [[DefaultSimulcastUplinkPolicy]] determines capture and encode\n *  parameters that reacts to estimated uplink bandwidth\n */\n\n\nclass DefaultSimulcastUplinkPolicy {\n  constructor(selfAttendeeId, logger) {\n    this.selfAttendeeId = selfAttendeeId;\n    this.logger = logger;\n    this.numSenders = 0; // Simulcast is disabled when there are only 2 or fewer attendees, because in that case the backend will forward REMBs from\n    // receiver to sender. Therefore there is no need for simulcast based adaption.\n\n    this.shouldDisableSimulcast = false;\n    this.newQualityMap = new Map();\n    this.currentQualityMap = new Map();\n    this.newActiveStreams = 1\n    /* kHiAndLow */\n    ;\n    this.currentActiveStreams = 1\n    /* kHiAndLow */\n    ;\n    this.lastUplinkBandwidthKbps = DefaultSimulcastUplinkPolicy.defaultUplinkBandwidthKbps;\n    this.startTimeMs = 0;\n    this.lastUpdatedMs = Date.now();\n    this.videoIndex = null;\n    this.currLocalDescriptions = [];\n    this.nextLocalDescriptions = [];\n    this.observerQueue = new Set();\n    this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, true);\n    this.parametersInEffect = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, true);\n    this.lastUplinkBandwidthKbps = DefaultSimulcastUplinkPolicy.defaultUplinkBandwidthKbps;\n    this.currentQualityMap = this.fillEncodingParamWithBitrates([300, 0, 1200]);\n    this.newQualityMap = this.fillEncodingParamWithBitrates([300, 0, 1200]);\n  }\n\n  updateConnectionMetric(_ref) {\n    let {\n      uplinkKbps = 0\n    } = _ref;\n\n    if (isNaN(uplinkKbps)) {\n      return;\n    } // Check if startup period in order to ignore estimate when video first enabled.\n    // If only audio was active then the estimate will be very low\n\n\n    if (this.startTimeMs === 0) {\n      this.startTimeMs = Date.now();\n    }\n\n    if (Date.now() - this.startTimeMs < DefaultSimulcastUplinkPolicy.startupDurationMs) {\n      this.lastUplinkBandwidthKbps = DefaultSimulcastUplinkPolicy.defaultUplinkBandwidthKbps;\n    } else {\n      this.lastUplinkBandwidthKbps = uplinkKbps;\n    }\n\n    this.logger.debug(() => {\n      return `simulcast: uplink policy update metrics ${this.lastUplinkBandwidthKbps}`;\n    });\n    let holdTime = DefaultSimulcastUplinkPolicy.holdDownDurationMs;\n\n    if (this.currentActiveStreams === 3\n    /* kLow */\n    ) {\n      holdTime = DefaultSimulcastUplinkPolicy.holdDownDurationMs * 2;\n    } else if (this.currentActiveStreams === 2\n    /* kMidAndLow */\n    && uplinkKbps <= DefaultSimulcastUplinkPolicy.kMidDisabledRate || this.currentActiveStreams === 1\n    /* kHiAndLow */\n    && uplinkKbps <= DefaultSimulcastUplinkPolicy.kHiDisabledRate) {\n      holdTime = DefaultSimulcastUplinkPolicy.holdDownDurationMs / 2;\n    }\n\n    if (Date.now() < this.lastUpdatedMs + holdTime) {\n      return;\n    }\n\n    this.newQualityMap = this.calculateEncodingParameters(false);\n  }\n\n  calculateEncodingParameters(numSendersChanged) {\n    // bitrates parameter min is not used for now\n    const newBitrates = [new BitrateParameters_1.default(), new BitrateParameters_1.default(), new BitrateParameters_1.default()];\n    let hysteresisIncrease = 0,\n        hysteresisDecrease = 0;\n\n    if (this.currentActiveStreams === 0\n    /* kHi */\n    ) {\n      // Don't trigger redetermination based on rate if only one simulcast stream\n      hysteresisIncrease = this.lastUplinkBandwidthKbps + 1;\n      hysteresisDecrease = 0;\n    } else if (this.currentActiveStreams === 1\n    /* kHiAndLow */\n    ) {\n      hysteresisIncrease = 2400;\n      hysteresisDecrease = DefaultSimulcastUplinkPolicy.kHiDisabledRate;\n    } else if (this.currentActiveStreams === 2\n    /* kMidAndLow */\n    ) {\n      hysteresisIncrease = 1000;\n      hysteresisDecrease = DefaultSimulcastUplinkPolicy.kMidDisabledRate;\n    } else {\n      hysteresisIncrease = 300;\n      hysteresisDecrease = 0;\n    }\n\n    if (numSendersChanged || this.lastUplinkBandwidthKbps >= hysteresisIncrease || this.lastUplinkBandwidthKbps <= hysteresisDecrease) {\n      if (this.shouldDisableSimulcast) {\n        // See comment above `shouldDisableSimulcast` for usage.\n        //\n        // The value of `newActiveStreams` is somewhat irrelevant since in one to one calls\n        // we forward REMBs, so this single stream will adapt anywhere from < 100 kbps to 1200 kbps\n        // based on both sender and receiver network conditions. E.g. A receiver may calculate it's\n        // receive BWE as 300 kbps, send that in a REMB which is forwarded, and on receipt the sender\n        // will set its own BWE at 300 kbps, and start sending that as well (again, only for one-to-one\n        // calls). Additionally the value `kHi` is only relevant to the send side (via\n        // `encodingSimulcastLayersDidChange`) as it is not transmitted in anyform to the receiver.\n        //\n        // We use middle layer here to work around a bug in Chromium where\n        // it seems when a transceiver is created when BWE is low (e.g. on a reconnection),\n        // it will never reset the encoder even when `setParameters` is called.  WebRTC bug\n        // #12788 seems to call a similar issue out as fixed for VP8, it's not clear if this\n        // is the same issue for H.264. Additionally we are not able to force a keyframe\n        // request from the backend since it will only be sending padding (which also\n        // don't have MID due to #10822). Since we don't scale when simulcast is disabled\n        // this doesn't have any end-user effect.\n        //\n        // Note that this still relies on a little bit (5-6 packets) of padding on reconnect\n        // and that technically the browser will still eventually try to send all 3 streams.\n        //\n        // Also note that due to some uninvestigated logic in bitrate allocation, Chromium\n        // will skip the bottom layer if we try setting it to 1200 kbps instead so it will\n        // still take a while to recover (as it needs to send padding until it reaches around\n        // 1000 kbps).\n        this.newActiveStreams = 0\n        /* kHi */\n        ;\n        newBitrates[0].maxBitrateKbps = 0;\n        newBitrates[1].maxBitrateKbps = 1200;\n        newBitrates[2].maxBitrateKbps = 0;\n      } else if (this.numSenders <= 4 && this.lastUplinkBandwidthKbps >= DefaultSimulcastUplinkPolicy.kHiDisabledRate) {\n        // 320x192+ (640x384)  + 1280x768\n        this.newActiveStreams = 1\n        /* kHiAndLow */\n        ;\n        newBitrates[0].maxBitrateKbps = 300;\n        newBitrates[1].maxBitrateKbps = 0;\n        newBitrates[2].maxBitrateKbps = 1200;\n      } else if (this.lastUplinkBandwidthKbps >= DefaultSimulcastUplinkPolicy.kMidDisabledRate) {\n        // 320x192 + 640x384 + (1280x768)\n        this.newActiveStreams = 2\n        /* kMidAndLow */\n        ;\n        newBitrates[0].maxBitrateKbps = this.lastUplinkBandwidthKbps >= 350 ? 200 : 150;\n        newBitrates[1].maxBitrateKbps = this.numSenders <= 6 ? 600 : 350;\n        newBitrates[2].maxBitrateKbps = 0;\n      } else {\n        // 320x192 + 640x384 + (1280x768)\n        this.newActiveStreams = 3\n        /* kLow */\n        ;\n        newBitrates[0].maxBitrateKbps = 300;\n        newBitrates[1].maxBitrateKbps = 0;\n        newBitrates[2].maxBitrateKbps = 0;\n      }\n\n      const bitrates = newBitrates.map((v, _i, _a) => {\n        return v.maxBitrateKbps;\n      });\n      this.newQualityMap = this.fillEncodingParamWithBitrates(bitrates);\n\n      if (!this.encodingParametersEqual()) {\n        this.logger.info(`simulcast: policy:calculateEncodingParameters bw:${this.lastUplinkBandwidthKbps} numSources:${this.numSenders} shouldDisableSimulcast:${this.shouldDisableSimulcast} newQualityMap: ${this.getQualityMapString(this.newQualityMap)}`);\n      }\n    }\n\n    return this.newQualityMap;\n  }\n\n  chooseMediaTrackConstraints() {\n    // Changing MediaTrackConstraints causes a restart of video input and possible small\n    // scaling changes.  Always use 720p for now\n    const trackConstraint = {\n      width: {\n        ideal: 1280\n      },\n      height: {\n        ideal: 768\n      },\n      frameRate: {\n        ideal: 15\n      }\n    };\n    return trackConstraint;\n  }\n\n  chooseEncodingParameters() {\n    this.currentQualityMap = this.newQualityMap;\n    this.currentActiveStreams = this.newActiveStreams;\n\n    if (this.activeStreamsToPublish !== this.newActiveStreams) {\n      this.activeStreamsToPublish = this.newActiveStreams;\n      this.publishEncodingSimulcastLayer();\n    }\n\n    return this.currentQualityMap;\n  }\n\n  updateIndex(videoIndex) {\n    // the +1 for self is assuming that we intend to send video, since\n    // the context here is VideoUplinkBandwidthPolicy\n    const numSenders = videoIndex.numberOfVideoPublishingParticipantsExcludingSelf(this.selfAttendeeId) + 1;\n    const numSendersChanged = numSenders !== this.numSenders; // See comment above `shouldDisableSimulcast`\n\n    const numParticipants = videoIndex.numberOfParticipants();\n    const newShouldDisableSimulcast = numParticipants >= 0 && numParticipants <= 2;\n    const shouldDisableSimulcastChanged = this.shouldDisableSimulcast !== newShouldDisableSimulcast;\n    this.numSenders = numSenders;\n    this.shouldDisableSimulcast = newShouldDisableSimulcast;\n    this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(this.captureWidth(), this.captureHeight(), this.captureFrameRate(), this.maxBandwidthKbps(), false);\n    this.videoIndex = videoIndex;\n    this.newQualityMap = this.calculateEncodingParameters(numSendersChanged || shouldDisableSimulcastChanged);\n  }\n\n  wantsResubscribe() {\n    let constraintDiff = !this.encodingParametersEqual();\n    this.nextLocalDescriptions = this.videoIndex.localStreamDescriptions();\n\n    for (let i = 0; i < this.nextLocalDescriptions.length; i++) {\n      const streamId = this.nextLocalDescriptions[i].streamId;\n\n      if (streamId !== 0 && !!streamId) {\n        const prevIndex = this.currLocalDescriptions.findIndex(val => {\n          return val.streamId === streamId;\n        });\n\n        if (prevIndex !== -1) {\n          if (this.nextLocalDescriptions[i].disabledByWebRTC !== this.currLocalDescriptions[prevIndex].disabledByWebRTC) {\n            constraintDiff = true;\n          }\n        }\n      }\n    }\n\n    if (constraintDiff) {\n      this.lastUpdatedMs = Date.now();\n    }\n\n    this.currLocalDescriptions = this.nextLocalDescriptions;\n    return constraintDiff;\n  }\n\n  compareEncodingParameter(encoding1, encoding2) {\n    return JSON.stringify(encoding1) === JSON.stringify(encoding2);\n  }\n\n  encodingParametersEqual() {\n    let different = false;\n\n    for (const ridName of SimulcastTransceiverController_1.default.NAME_ARR_ASCENDING) {\n      different = different || !this.compareEncodingParameter(this.newQualityMap.get(ridName), this.currentQualityMap.get(ridName));\n\n      if (different) {\n        break;\n      }\n    }\n\n    return !different;\n  }\n\n  chooseCaptureAndEncodeParameters() {\n    // should deprecate in this policy\n    this.parametersInEffect = this.optimalParameters.clone();\n    return this.parametersInEffect.clone();\n  }\n\n  captureWidth() {\n    // should deprecate in this policy\n    const width = 1280;\n    return width;\n  }\n\n  captureHeight() {\n    // should deprecate in this policy\n    const height = 768;\n    return height;\n  }\n\n  captureFrameRate() {\n    // should deprecate in this policy\n    return 15;\n  }\n\n  maxBandwidthKbps() {\n    // should deprecate in this policy\n    return 1400;\n  }\n\n  setIdealMaxBandwidthKbps(_idealMaxBandwidthKbps) {// should deprecate in this policy\n  }\n\n  setHasBandwidthPriority(_hasBandwidthPriority) {// should deprecate in this policy\n  }\n\n  fillEncodingParamWithBitrates(bitratesKbps) {\n    const newMap = new Map();\n    const toBps = 1000;\n    const nameArr = SimulcastTransceiverController_1.default.NAME_ARR_ASCENDING;\n    const bitrateArr = bitratesKbps; // Don't scale the single simulcast stream regardless of its layer.\n\n    let scale = this.shouldDisableSimulcast ? 1 : 4;\n\n    for (let i = 0; i < nameArr.length; i++) {\n      const ridName = nameArr[i];\n      newMap.set(ridName, {\n        rid: ridName,\n        active: bitrateArr[i] > 0 ? true : false,\n        scaleResolutionDownBy: Math.max(scale, 1),\n        maxBitrate: bitrateArr[i] * toBps\n      });\n      scale = scale / 2;\n    }\n\n    return newMap;\n  }\n\n  getQualityMapString(params) {\n    let qualityString = '';\n    const localDescriptions = this.videoIndex.localStreamDescriptions();\n\n    if (localDescriptions.length === 3) {\n      params.forEach(value => {\n        let disabledByWebRTC = false;\n        if (value.rid === 'low') disabledByWebRTC = localDescriptions[0].disabledByWebRTC;else if (value.rid === 'mid') disabledByWebRTC = localDescriptions[1].disabledByWebRTC;else disabledByWebRTC = localDescriptions[2].disabledByWebRTC;\n        qualityString += `{ rid: ${value.rid} active:${value.active} disabledByWebRTC: ${disabledByWebRTC} maxBitrate:${value.maxBitrate}}`;\n      });\n    }\n\n    return qualityString;\n  }\n\n  getEncodingSimulcastLayer(activeStreams) {\n    switch (activeStreams) {\n      case 0\n      /* kHi */\n      :\n        return SimulcastLayers_1.default.High;\n\n      case 1\n      /* kHiAndLow */\n      :\n        return SimulcastLayers_1.default.LowAndHigh;\n\n      case 2\n      /* kMidAndLow */\n      :\n        return SimulcastLayers_1.default.LowAndMedium;\n\n      case 3\n      /* kLow */\n      :\n        return SimulcastLayers_1.default.Low;\n    }\n  }\n\n  publishEncodingSimulcastLayer() {\n    const simulcastLayers = this.getEncodingSimulcastLayer(this.activeStreamsToPublish);\n    this.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.encodingSimulcastLayersDidChange).map(f => f.bind(observer)(simulcastLayers));\n    });\n  }\n\n  addObserver(observer) {\n    this.logger.info('adding simulcast uplink observer');\n    this.observerQueue.add(observer);\n  }\n\n  removeObserver(observer) {\n    this.logger.info('removing simulcast uplink observer');\n    this.observerQueue.delete(observer);\n  }\n\n  forEachObserver(observerFunc) {\n    for (const observer of this.observerQueue) {\n      observerFunc(observer);\n    }\n  }\n\n}\n\nexports.default = DefaultSimulcastUplinkPolicy;\nDefaultSimulcastUplinkPolicy.defaultUplinkBandwidthKbps = 1200;\nDefaultSimulcastUplinkPolicy.startupDurationMs = 6000;\nDefaultSimulcastUplinkPolicy.holdDownDurationMs = 4000;\nDefaultSimulcastUplinkPolicy.defaultMaxFrameRate = 15; // Current rough estimates where webrtc disables streams\n\nDefaultSimulcastUplinkPolicy.kHiDisabledRate = 700;\nDefaultSimulcastUplinkPolicy.kMidDisabledRate = 240;","map":{"version":3,"mappings":"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","names":["DefaultSimulcastUplinkPolicy","constructor","selfAttendeeId","logger","Map","defaultUplinkBandwidthKbps","Date","now","Set","optimalParameters","DefaultVideoCaptureAndEncodeParameter_1","parametersInEffect","lastUplinkBandwidthKbps","currentQualityMap","fillEncodingParamWithBitrates","newQualityMap","updateConnectionMetric","uplinkKbps","isNaN","startTimeMs","startupDurationMs","debug","holdTime","holdDownDurationMs","currentActiveStreams","kMidDisabledRate","kHiDisabledRate","lastUpdatedMs","calculateEncodingParameters","numSendersChanged","newBitrates","BitrateParameters_1","hysteresisIncrease","hysteresisDecrease","shouldDisableSimulcast","newActiveStreams","maxBitrateKbps","numSenders","bitrates","map","v","_i","_a","encodingParametersEqual","info","getQualityMapString","chooseMediaTrackConstraints","trackConstraint","width","ideal","height","frameRate","chooseEncodingParameters","activeStreamsToPublish","publishEncodingSimulcastLayer","updateIndex","videoIndex","numberOfVideoPublishingParticipantsExcludingSelf","numParticipants","numberOfParticipants","newShouldDisableSimulcast","shouldDisableSimulcastChanged","captureWidth","captureHeight","captureFrameRate","maxBandwidthKbps","wantsResubscribe","constraintDiff","nextLocalDescriptions","localStreamDescriptions","i","length","streamId","prevIndex","currLocalDescriptions","findIndex","val","disabledByWebRTC","compareEncodingParameter","encoding1","encoding2","JSON","stringify","different","ridName","SimulcastTransceiverController_1","NAME_ARR_ASCENDING","get","chooseCaptureAndEncodeParameters","clone","setIdealMaxBandwidthKbps","_idealMaxBandwidthKbps","setHasBandwidthPriority","_hasBandwidthPriority","bitratesKbps","newMap","toBps","nameArr","bitrateArr","scale","set","rid","active","scaleResolutionDownBy","Math","max","maxBitrate","params","qualityString","localDescriptions","forEach","value","getEncodingSimulcastLayer","activeStreams","SimulcastLayers_1","High","LowAndHigh","LowAndMedium","Low","simulcastLayers","forEachObserver","observer","Types_1","of","encodingSimulcastLayersDidChange","f","bind","addObserver","observerQueue","add","removeObserver","delete","observerFunc","exports"],"sourceRoot":"","sources":["../../src/videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
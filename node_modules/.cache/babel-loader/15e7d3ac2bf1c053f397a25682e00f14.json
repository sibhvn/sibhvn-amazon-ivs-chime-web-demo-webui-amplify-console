{"ast":null,"code":"import { ConsoleLogger, DefaultDeviceController, DefaultDOMWebSocketFactory, DefaultMeetingSession, DefaultModality, DefaultPromisedWebSocketFactory, FullJitterBackoff, LogLevel, MeetingSessionConfiguration, ReconnectingPromisedWebSocket } from 'amazon-chime-sdk-js';\nimport throttle from 'lodash/throttle';\nimport * as config from '../../config';\nexport default class ChimeSdkWrapper {\n  constructor() {\n    this.initializeSdkWrapper();\n  }\n\n  initializeSdkWrapper() {\n    this.meetingSession = null;\n    this.audioVideo = null;\n    this.title = null;\n    this.name = null;\n    this.region = null;\n    this.currentAudioInputDevice = null;\n    this.currentAudioOutputDevice = null;\n    this.currentVideoInputDevice = null;\n    this.audioInputDevices = [];\n    this.audioOutputDevices = [];\n    this.videoInputDevices = [];\n    this.devicesUpdatedCallbacks = [];\n    this.roster = {};\n    this.rosterUpdateCallbacks = [];\n    this.configuration = null;\n    this.messagingSocket = null;\n    this.messageUpdateCallbacks = [];\n  }\n\n  logError(error) {\n    console.error(error);\n  }\n\n  async createRoom(role, name, title, playbackURL, region) {\n    if (!name || !title || !role) {\n      console.error(`role=${role} name=${name} title=${title} must exist`);\n      return;\n    }\n\n    const payload = {\n      name,\n      title,\n      playbackURL,\n      role\n    };\n    const response = await fetch(`${config.CHIME_ROOM_API}/join`, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    });\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.error);\n    }\n\n    const {\n      JoinInfo\n    } = json;\n\n    if (!JoinInfo) {\n      throw new Error('CreateOrJoin.classRoomDoesNotExist');\n    }\n\n    this.configuration = new MeetingSessionConfiguration(JoinInfo.Meeting, JoinInfo.Attendee);\n    await this.initializeMeetingSession(this.configuration);\n    this.title = title;\n    this.name = name;\n    this.region = region;\n    return JoinInfo;\n  }\n\n  async reInitializeMeetingSession(JoinInfo, name) {\n    this.configuration = new MeetingSessionConfiguration(JoinInfo.Meeting, JoinInfo.Attendee);\n    await this.initializeMeetingSession(this.configuration);\n    this.title = JoinInfo.Title;\n    this.name = name; // this.region = region;\n  }\n\n  async initializeMeetingSession(configuration) {\n    const logger = new ConsoleLogger('SDK', LogLevel.ERROR);\n    const deviceController = new DefaultDeviceController(logger);\n    this.meetingSession = new DefaultMeetingSession(configuration, logger, deviceController);\n    this.audioVideo = this.meetingSession.audioVideo;\n    this.audioInputDevices = [];\n    (await this.audioVideo.listAudioInputDevices()).forEach(mediaDeviceInfo => {\n      this.audioInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n    this.audioOutputDevices = [];\n    (await this.audioVideo.listAudioOutputDevices()).forEach(mediaDeviceInfo => {\n      this.audioOutputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n    this.videoInputDevices = [];\n    (await this.audioVideo.listVideoInputDevices()).forEach(mediaDeviceInfo => {\n      this.videoInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n    this.publishDevicesUpdated();\n    this.audioVideo.addDeviceChangeObserver(this);\n    this.audioVideo.realtimeSubscribeToAttendeeIdPresence((presentAttendeeId, present) => {\n      if (!present) {\n        delete this.roster[presentAttendeeId]; //this.publishRosterUpdate.cancel();\n\n        this.publishRosterUpdate()();\n        return;\n      }\n\n      this.audioVideo.realtimeSubscribeToVolumeIndicator(presentAttendeeId, async (attendeeId, volume, muted, signalStrength) => {\n        const baseAttendeeId = new DefaultModality(attendeeId).base();\n\n        if (baseAttendeeId !== attendeeId) {\n          // Don't include the content attendee in the roster.\n          //\n          // When you or other attendees share content (a screen capture, a video file,\n          // or any other MediaStream object), the content attendee (attendee-id#content) joins the session and\n          // shares content as if a regular attendee shares a video.\n          //\n          // For example, your attendee ID is \"my-id\". When you call meetingSession.audioVideo.startContentShare,\n          // the content attendee \"my-id#content\" will join the session and share your content.\n          return;\n        }\n\n        let shouldPublishImmediately = false;\n\n        if (!this.roster[attendeeId]) {\n          this.roster[attendeeId] = {\n            name: ''\n          };\n        }\n\n        if (volume !== null) {\n          this.roster[attendeeId].volume = Math.round(volume * 100);\n        }\n\n        if (muted !== null) {\n          this.roster[attendeeId].muted = muted;\n        }\n\n        if (signalStrength !== null) {\n          this.roster[attendeeId].signalStrength = Math.round(signalStrength * 100);\n        }\n\n        if (this.title && attendeeId && !this.roster[attendeeId].name) {\n          const response = await fetch(`${config.CHIME_ROOM_API}/attendee?title=${encodeURIComponent(this.title)}&attendeeId=${encodeURIComponent(attendeeId)}`);\n          const json = await response.json();\n\n          if (json.AttendeeInfo && this.roster[attendeeId]) {\n            this.roster[attendeeId].name = json.AttendeeInfo.Name || '';\n            shouldPublishImmediately = true;\n          }\n        }\n\n        if (shouldPublishImmediately) {//this.publishRosterUpdate.cancel();\n        }\n\n        this.publishRosterUpdate()();\n      });\n    });\n  }\n\n  async joinRoom(element) {\n    if (!element) {\n      this.logError(new Error(`element does not exist`));\n      return;\n    }\n\n    window.addEventListener('unhandledrejection', event => {\n      this.logError(event.reason);\n    });\n    const audioInputs = await this.audioVideo.listAudioInputDevices();\n\n    if (audioInputs && audioInputs.length > 0 && audioInputs[0].deviceId) {\n      this.currentAudioInputDevice = {\n        label: audioInputs[0].label,\n        value: audioInputs[0].deviceId\n      };\n      await this.audioVideo.chooseAudioInputDevice(audioInputs[0].deviceId);\n    }\n\n    const audioOutputs = await this.audioVideo.listAudioOutputDevices();\n\n    if (audioOutputs && audioOutputs.length > 0 && audioOutputs[0].deviceId) {\n      this.currentAudioOutputDevice = {\n        label: audioOutputs[0].label,\n        value: audioOutputs[0].deviceId\n      };\n      await this.audioVideo.chooseAudioOutputDevice(audioOutputs[0].deviceId);\n    }\n\n    const videoInputs = await this.audioVideo.listVideoInputDevices();\n\n    if (videoInputs && videoInputs.length > 0 && videoInputs[0].deviceId) {\n      this.currentVideoInputDevice = {\n        label: videoInputs[0].label,\n        value: videoInputs[0].deviceId\n      };\n      await this.audioVideo.chooseVideoInputDevice(null);\n    }\n\n    this.publishDevicesUpdated();\n\n    try {\n      await this.audioVideo.bindAudioElement(element);\n      this.audioVideo.start();\n    } catch (error) {\n      console.log('failed to bind audio element: ', error);\n    }\n  }\n\n  async joinRoomMessaging() {\n    if (!this.configuration) {\n      this.logError(new Error('configuration does not exist'));\n      return;\n    }\n\n    const messagingUrl = `${config.CHAT_WEBSOCKET}?MeetingId=${this.configuration.meetingId}&AttendeeId=${this.configuration.credentials.attendeeId}&JoinToken=${this.configuration.credentials.joinToken}`;\n    this.messagingSocket = new ReconnectingPromisedWebSocket(messagingUrl, [], 'arraybuffer', new DefaultPromisedWebSocketFactory(new DefaultDOMWebSocketFactory()), new FullJitterBackoff(1000, 0, 10000));\n    await this.messagingSocket.open(this.WEB_SOCKET_TIMEOUT_MS);\n    this.messagingSocket.addEventListener('message', event => {\n      try {\n        const data = JSON.parse(event.data);\n        const {\n          attendeeId\n        } = data.payload;\n        let name;\n\n        if (this.roster[attendeeId]) {\n          name = this.roster[attendeeId].name;\n        }\n\n        this.publishMessageUpdate({\n          type: data.type,\n          payload: data.payload,\n          timestampMs: Date.now(),\n          name\n        });\n      } catch (error) {\n        this.logError(error);\n      }\n    });\n  }\n\n  sendMessage(type, payload) {\n    if (!this.messagingSocket) {\n      return;\n    }\n\n    const message = {\n      message: 'sendmessage',\n      data: JSON.stringify({\n        type,\n        payload\n      })\n    };\n\n    try {\n      this.messagingSocket.send(JSON.stringify(message));\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async leaveRoom(end) {\n    try {\n      this.audioVideo.stop();\n    } catch (error) {\n      this.logError(error);\n    } // try {\n    //   await this.messagingSocket.close(this.WEB_SOCKET_TIMEOUT_MS);\n    // } catch (error) {\n    //   this.logError(error);\n    // }\n\n\n    try {\n      if (end && this.title) {\n        await fetch(`${config.CHIME_ROOM_API}/end?title=${encodeURIComponent(this.title)}`, {\n          method: 'POST'\n        });\n      }\n    } catch (error) {\n      this.logError(error);\n    }\n\n    this.initializeSdkWrapper();\n  } // Device\n\n\n  async chooseAudioInputDevice(device) {\n    try {\n      await this.audioVideo.chooseAudioInputDevice(device.value);\n      this.currentAudioInputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async chooseAudioOutputDevice(device) {\n    try {\n      await this.audioVideo.chooseAudioOutputDevice(device.value);\n      this.currentAudioOutputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async chooseVideoInputDevice(device) {\n    try {\n      await this.audioVideo.chooseVideoInputDevice(device.value);\n      this.currentVideoInputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  } // Observer methods\n\n\n  audioInputsChanged(freshAudioInputDeviceList) {\n    let hasCurrentDevice = false;\n    this.audioInputDevices = [];\n    freshAudioInputDeviceList.forEach(mediaDeviceInfo => {\n      if (this.currentAudioInputDevice && mediaDeviceInfo.deviceId === this.currentAudioInputDevice.value) {\n        hasCurrentDevice = true;\n      }\n\n      this.audioInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n\n    if (!hasCurrentDevice) {\n      this.currentAudioInputDevice = this.audioInputDevices.length > 0 ? this.audioInputDevices[0] : null;\n    }\n\n    this.publishDevicesUpdated();\n  }\n\n  audioOutputsChanged(freshAudioOutputDeviceList) {\n    let hasCurrentDevice = false;\n    this.audioOutputDevices = [];\n    freshAudioOutputDeviceList.forEach(mediaDeviceInfo => {\n      if (this.currentAudioOutputDevice && mediaDeviceInfo.deviceId === this.currentAudioOutputDevice.value) {\n        hasCurrentDevice = true;\n      }\n\n      this.audioOutputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n\n    if (!hasCurrentDevice) {\n      this.currentAudioOutputDevice = this.audioOutputDevices.length > 0 ? this.audioOutputDevices[0] : null;\n    }\n\n    this.publishDevicesUpdated();\n  }\n\n  videoInputsChanged(freshVideoInputDeviceList) {\n    let hasCurrentDevice = false;\n    this.videoInputDevices = [];\n    freshVideoInputDeviceList.forEach(mediaDeviceInfo => {\n      if (this.currentVideoInputDevice && mediaDeviceInfo.deviceId === this.currentVideoInputDevice.value) {\n        hasCurrentDevice = true;\n      }\n\n      this.videoInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n\n    if (!hasCurrentDevice) {\n      this.currentVideoInputDevice = this.videoInputDevices.length > 0 ? this.videoInputDevices[0] : null;\n    }\n\n    this.publishDevicesUpdated();\n  } // Subscribe and unsubscribe\n\n\n  subscribeToDevicesUpdated(callback) {\n    this.devicesUpdatedCallbacks.push(callback);\n  }\n\n  unsubscribeFromDevicesUpdated(callback) {\n    const index = this.devicesUpdatedCallbacks.indexOf(callback);\n\n    if (index !== -1) {\n      this.devicesUpdatedCallbacks.splice(index, 1);\n    }\n  }\n\n  publishDevicesUpdated() {\n    this.devicesUpdatedCallbacks.forEach(callback => {\n      callback({\n        currentAudioInputDevice: this.currentAudioInputDevice,\n        currentAudioOutputDevice: this.currentAudioOutputDevice,\n        currentVideoInputDevice: this.currentVideoInputDevice,\n        audioInputDevices: this.audioInputDevices,\n        audioOutputDevices: this.audioOutputDevices,\n        videoInputDevices: this.videoInputDevices\n      });\n    });\n  }\n\n  subscribeToRosterUpdate(callback) {\n    this.rosterUpdateCallbacks.push(callback);\n  }\n\n  unsubscribeFromRosterUpdate(callback) {\n    const index = this.rosterUpdateCallbacks.indexOf(callback);\n\n    if (index !== -1) {\n      this.rosterUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  publishRosterUpdate() {\n    return throttle(() => {\n      for (let i = 0; i < this.rosterUpdateCallbacks.length; i += 1) {\n        const callback = this.rosterUpdateCallbacks[i];\n        callback(this.roster);\n      }\n    }, this.ROSTER_THROTTLE_MS);\n  }\n\n  subscribeToMessageUpdate(callback) {\n    this.messageUpdateCallbacks.push(callback);\n  }\n\n  unsubscribeFromMessageUpdate(callback) {\n    const index = this.messageUpdateCallbacks.indexOf(callback);\n\n    if (index !== -1) {\n      this.messageUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  publishMessageUpdate(message) {\n    for (let i = 0; i < this.messageUpdateCallbacks.length; i += 1) {\n      const callback = this.messageUpdateCallbacks[i];\n      callback(message);\n    }\n  }\n\n}\nChimeSdkWrapper.WEB_SOCKET_TIMEOUT_MS = 10000;\nChimeSdkWrapper.ROSTER_THROTTLE_MS = 400;","map":{"version":3,"names":["ConsoleLogger","DefaultDeviceController","DefaultDOMWebSocketFactory","DefaultMeetingSession","DefaultModality","DefaultPromisedWebSocketFactory","FullJitterBackoff","LogLevel","MeetingSessionConfiguration","ReconnectingPromisedWebSocket","throttle","config","ChimeSdkWrapper","constructor","initializeSdkWrapper","meetingSession","audioVideo","title","name","region","currentAudioInputDevice","currentAudioOutputDevice","currentVideoInputDevice","audioInputDevices","audioOutputDevices","videoInputDevices","devicesUpdatedCallbacks","roster","rosterUpdateCallbacks","configuration","messagingSocket","messageUpdateCallbacks","logError","error","console","createRoom","role","playbackURL","payload","response","fetch","CHIME_ROOM_API","method","body","JSON","stringify","json","Error","JoinInfo","Meeting","Attendee","initializeMeetingSession","reInitializeMeetingSession","Title","logger","ERROR","deviceController","listAudioInputDevices","forEach","mediaDeviceInfo","push","label","value","deviceId","listAudioOutputDevices","listVideoInputDevices","publishDevicesUpdated","addDeviceChangeObserver","realtimeSubscribeToAttendeeIdPresence","presentAttendeeId","present","publishRosterUpdate","realtimeSubscribeToVolumeIndicator","attendeeId","volume","muted","signalStrength","baseAttendeeId","base","shouldPublishImmediately","Math","round","encodeURIComponent","AttendeeInfo","Name","joinRoom","element","window","addEventListener","event","reason","audioInputs","length","chooseAudioInputDevice","audioOutputs","chooseAudioOutputDevice","videoInputs","chooseVideoInputDevice","bindAudioElement","start","log","joinRoomMessaging","messagingUrl","CHAT_WEBSOCKET","meetingId","credentials","joinToken","open","WEB_SOCKET_TIMEOUT_MS","data","parse","publishMessageUpdate","type","timestampMs","Date","now","sendMessage","message","send","leaveRoom","end","stop","device","audioInputsChanged","freshAudioInputDeviceList","hasCurrentDevice","audioOutputsChanged","freshAudioOutputDeviceList","videoInputsChanged","freshVideoInputDeviceList","subscribeToDevicesUpdated","callback","unsubscribeFromDevicesUpdated","index","indexOf","splice","subscribeToRosterUpdate","unsubscribeFromRosterUpdate","i","ROSTER_THROTTLE_MS","subscribeToMessageUpdate","unsubscribeFromMessageUpdate"],"sources":["/Users/kshiba01/projects/DXサービス/AWS/amplify/amazon-ivs-chime-web-demo-webui-amplify-console/src/components/chime/ChimeSdkWrapper.js"],"sourcesContent":["import {\n  ConsoleLogger,\n  DefaultDeviceController,\n  DefaultDOMWebSocketFactory,\n  DefaultMeetingSession,\n  DefaultModality,\n  DefaultPromisedWebSocketFactory,\n  FullJitterBackoff,\n  LogLevel,\n  MeetingSessionConfiguration,\n  ReconnectingPromisedWebSocket,\n} from 'amazon-chime-sdk-js';\n\nimport throttle from 'lodash/throttle';\nimport * as config from '../../config';\n\nexport default class ChimeSdkWrapper {\n  static WEB_SOCKET_TIMEOUT_MS = 10000;\n  static ROSTER_THROTTLE_MS = 400;\n\n  constructor() {\n    this.initializeSdkWrapper();\n  }\n\n  initializeSdkWrapper() {\n    this.meetingSession = null;\n    this.audioVideo = null;\n    this.title = null;\n    this.name = null;\n    this.region = null;\n    this.currentAudioInputDevice = null;\n    this.currentAudioOutputDevice = null;\n    this.currentVideoInputDevice = null;\n    this.audioInputDevices = [];\n    this.audioOutputDevices = [];\n    this.videoInputDevices = [];\n    this.devicesUpdatedCallbacks = [];\n    this.roster = {};\n    this.rosterUpdateCallbacks = [];\n    this.configuration = null;\n    this.messagingSocket = null;\n    this.messageUpdateCallbacks = [];\n  }\n\n  logError(error) {\n    console.error(error);\n  }\n\n  async createRoom(role, name, title, playbackURL, region) {\n    if (!name || !title || !role) {\n      console.error(`role=${role} name=${name} title=${title} must exist`);\n      return;\n    }\n\n    const payload = {\n      name,\n      title,\n      playbackURL,\n      role,\n    };\n\n    const response = await fetch(`${config.CHIME_ROOM_API}/join`, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n    });\n    const json = await response.json();\n    if (json.error) {\n      throw new Error(json.error);\n    }\n\n    const { JoinInfo } = json;\n    if (!JoinInfo) {\n      throw new Error('CreateOrJoin.classRoomDoesNotExist');\n    }\n    this.configuration = new MeetingSessionConfiguration(\n      JoinInfo.Meeting,\n      JoinInfo.Attendee,\n    );\n    await this.initializeMeetingSession(this.configuration);\n\n    this.title = title;\n    this.name = name;\n    this.region = region;\n\n    return JoinInfo;\n  }\n\n  async reInitializeMeetingSession(JoinInfo, name) {\n    this.configuration = new MeetingSessionConfiguration(\n      JoinInfo.Meeting,\n      JoinInfo.Attendee,\n    );\n    await this.initializeMeetingSession(this.configuration);\n\n    this.title = JoinInfo.Title;\n    this.name = name;\n    // this.region = region;\n  }\n\n  async initializeMeetingSession(configuration) {\n    const logger = new ConsoleLogger('SDK', LogLevel.ERROR);\n    const deviceController = new DefaultDeviceController(logger);\n    this.meetingSession = new DefaultMeetingSession(\n      configuration,\n      logger,\n      deviceController,\n    );\n    this.audioVideo = this.meetingSession.audioVideo;\n\n    this.audioInputDevices = [];\n    (await this.audioVideo.listAudioInputDevices()).forEach(\n      (mediaDeviceInfo) => {\n        this.audioInputDevices.push({\n          label: mediaDeviceInfo.label,\n          value: mediaDeviceInfo.deviceId,\n        });\n      },\n    );\n    this.audioOutputDevices = [];\n    (await this.audioVideo.listAudioOutputDevices()).forEach(\n      (mediaDeviceInfo) => {\n        this.audioOutputDevices.push({\n          label: mediaDeviceInfo.label,\n          value: mediaDeviceInfo.deviceId,\n        });\n      },\n    );\n    this.videoInputDevices = [];\n    (await this.audioVideo.listVideoInputDevices()).forEach(\n      (mediaDeviceInfo) => {\n        this.videoInputDevices.push({\n          label: mediaDeviceInfo.label,\n          value: mediaDeviceInfo.deviceId,\n        });\n      },\n    );\n    this.publishDevicesUpdated();\n    this.audioVideo.addDeviceChangeObserver(this);\n\n    this.audioVideo.realtimeSubscribeToAttendeeIdPresence(\n      (presentAttendeeId, present) => {\n        if (!present) {\n          delete this.roster[presentAttendeeId];\n          //this.publishRosterUpdate.cancel();\n          this.publishRosterUpdate()();\n          return;\n        }\n\n        this.audioVideo.realtimeSubscribeToVolumeIndicator(\n          presentAttendeeId,\n          async (attendeeId, volume, muted, signalStrength) => {\n            const baseAttendeeId = new DefaultModality(attendeeId).base();\n            if (baseAttendeeId !== attendeeId) {\n              // Don't include the content attendee in the roster.\n              //\n              // When you or other attendees share content (a screen capture, a video file,\n              // or any other MediaStream object), the content attendee (attendee-id#content) joins the session and\n              // shares content as if a regular attendee shares a video.\n              //\n              // For example, your attendee ID is \"my-id\". When you call meetingSession.audioVideo.startContentShare,\n              // the content attendee \"my-id#content\" will join the session and share your content.\n              return;\n            }\n\n            let shouldPublishImmediately = false;\n\n            if (!this.roster[attendeeId]) {\n              this.roster[attendeeId] = { name: '' };\n            }\n            if (volume !== null) {\n              this.roster[attendeeId].volume = Math.round(volume * 100);\n            }\n            if (muted !== null) {\n              this.roster[attendeeId].muted = muted;\n            }\n            if (signalStrength !== null) {\n              this.roster[attendeeId].signalStrength = Math.round(\n                signalStrength * 100,\n              );\n            }\n            if (this.title && attendeeId && !this.roster[attendeeId].name) {\n              const response = await fetch(\n                `${config.CHIME_ROOM_API}/attendee?title=${encodeURIComponent(\n                  this.title,\n                )}&attendeeId=${encodeURIComponent(attendeeId)}`,\n              );\n              const json = await response.json();\n              if (json.AttendeeInfo && this.roster[attendeeId]) {\n                this.roster[attendeeId].name = json.AttendeeInfo.Name || '';\n                shouldPublishImmediately = true;\n              }\n            }\n\n            if (shouldPublishImmediately) {\n              //this.publishRosterUpdate.cancel();\n            }\n            this.publishRosterUpdate()();\n          },\n        );\n      },\n    );\n  }\n\n  async joinRoom(element) {\n    if (!element) {\n      this.logError(new Error(`element does not exist`));\n      return;\n    }\n\n    window.addEventListener('unhandledrejection', (event) => {\n      this.logError(event.reason);\n    });\n\n    const audioInputs = await this.audioVideo.listAudioInputDevices();\n    if (audioInputs && audioInputs.length > 0 && audioInputs[0].deviceId) {\n      this.currentAudioInputDevice = {\n        label: audioInputs[0].label,\n        value: audioInputs[0].deviceId,\n      };\n      await this.audioVideo.chooseAudioInputDevice(audioInputs[0].deviceId);\n    }\n\n    const audioOutputs = await this.audioVideo.listAudioOutputDevices();\n    if (audioOutputs && audioOutputs.length > 0 && audioOutputs[0].deviceId) {\n      this.currentAudioOutputDevice = {\n        label: audioOutputs[0].label,\n        value: audioOutputs[0].deviceId,\n      };\n      await this.audioVideo.chooseAudioOutputDevice(audioOutputs[0].deviceId);\n    }\n\n    const videoInputs = await this.audioVideo.listVideoInputDevices();\n    if (videoInputs && videoInputs.length > 0 && videoInputs[0].deviceId) {\n      this.currentVideoInputDevice = {\n        label: videoInputs[0].label,\n        value: videoInputs[0].deviceId,\n      };\n      await this.audioVideo.chooseVideoInputDevice(null);\n    }\n\n    this.publishDevicesUpdated();\n\n    try {\n      await this.audioVideo.bindAudioElement(element);\n      this.audioVideo.start();\n    } catch (error) {\n      console.log('failed to bind audio element: ', error);\n    }\n  }\n\n  async joinRoomMessaging() {\n    if (!this.configuration) {\n      this.logError(new Error('configuration does not exist'));\n      return;\n    }\n\n    const messagingUrl = `${config.CHAT_WEBSOCKET}?MeetingId=${this.configuration.meetingId}&AttendeeId=${this.configuration.credentials.attendeeId}&JoinToken=${this.configuration.credentials.joinToken}`;\n    this.messagingSocket = new ReconnectingPromisedWebSocket(\n      messagingUrl,\n      [],\n      'arraybuffer',\n      new DefaultPromisedWebSocketFactory(new DefaultDOMWebSocketFactory()),\n      new FullJitterBackoff(1000, 0, 10000),\n    );\n\n    await this.messagingSocket.open(this.WEB_SOCKET_TIMEOUT_MS);\n\n    this.messagingSocket.addEventListener('message', (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        const { attendeeId } = data.payload;\n\n        let name;\n        if (this.roster[attendeeId]) {\n          name = this.roster[attendeeId].name;\n        }\n\n        this.publishMessageUpdate({\n          type: data.type,\n          payload: data.payload,\n          timestampMs: Date.now(),\n          name,\n        });\n      } catch (error) {\n        this.logError(error);\n      }\n    });\n  }\n\n  sendMessage(type, payload) {\n    if (!this.messagingSocket) {\n      return;\n    }\n    const message = {\n      message: 'sendmessage',\n      data: JSON.stringify({ type, payload }),\n    };\n    try {\n      this.messagingSocket.send(JSON.stringify(message));\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async leaveRoom(end) {\n    try {\n      this.audioVideo.stop();\n    } catch (error) {\n      this.logError(error);\n    }\n\n    // try {\n    //   await this.messagingSocket.close(this.WEB_SOCKET_TIMEOUT_MS);\n    // } catch (error) {\n    //   this.logError(error);\n    // }\n\n    try {\n      if (end && this.title) {\n        await fetch(\n          `${config.CHIME_ROOM_API}/end?title=${encodeURIComponent(\n            this.title,\n          )}`,\n          {\n            method: 'POST',\n          },\n        );\n      }\n    } catch (error) {\n      this.logError(error);\n    }\n\n    this.initializeSdkWrapper();\n  }\n\n  // Device\n\n  async chooseAudioInputDevice(device) {\n    try {\n      await this.audioVideo.chooseAudioInputDevice(device.value);\n      this.currentAudioInputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async chooseAudioOutputDevice(device) {\n    try {\n      await this.audioVideo.chooseAudioOutputDevice(device.value);\n      this.currentAudioOutputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async chooseVideoInputDevice(device) {\n    try {\n      await this.audioVideo.chooseVideoInputDevice(device.value);\n      this.currentVideoInputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  // Observer methods\n\n  audioInputsChanged(freshAudioInputDeviceList) {\n    let hasCurrentDevice = false;\n    this.audioInputDevices = [];\n    freshAudioInputDeviceList.forEach((mediaDeviceInfo) => {\n      if (\n        this.currentAudioInputDevice &&\n        mediaDeviceInfo.deviceId === this.currentAudioInputDevice.value\n      ) {\n        hasCurrentDevice = true;\n      }\n      this.audioInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId,\n      });\n    });\n    if (!hasCurrentDevice) {\n      this.currentAudioInputDevice =\n        this.audioInputDevices.length > 0 ? this.audioInputDevices[0] : null;\n    }\n    this.publishDevicesUpdated();\n  }\n\n  audioOutputsChanged(freshAudioOutputDeviceList) {\n    let hasCurrentDevice = false;\n    this.audioOutputDevices = [];\n    freshAudioOutputDeviceList.forEach((mediaDeviceInfo) => {\n      if (\n        this.currentAudioOutputDevice &&\n        mediaDeviceInfo.deviceId === this.currentAudioOutputDevice.value\n      ) {\n        hasCurrentDevice = true;\n      }\n      this.audioOutputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId,\n      });\n    });\n    if (!hasCurrentDevice) {\n      this.currentAudioOutputDevice =\n        this.audioOutputDevices.length > 0 ? this.audioOutputDevices[0] : null;\n    }\n    this.publishDevicesUpdated();\n  }\n\n  videoInputsChanged(freshVideoInputDeviceList) {\n    let hasCurrentDevice = false;\n    this.videoInputDevices = [];\n    freshVideoInputDeviceList.forEach((mediaDeviceInfo) => {\n      if (\n        this.currentVideoInputDevice &&\n        mediaDeviceInfo.deviceId === this.currentVideoInputDevice.value\n      ) {\n        hasCurrentDevice = true;\n      }\n      this.videoInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId,\n      });\n    });\n    if (!hasCurrentDevice) {\n      this.currentVideoInputDevice =\n        this.videoInputDevices.length > 0 ? this.videoInputDevices[0] : null;\n    }\n    this.publishDevicesUpdated();\n  }\n\n  // Subscribe and unsubscribe\n\n  subscribeToDevicesUpdated(callback) {\n    this.devicesUpdatedCallbacks.push(callback);\n  }\n\n  unsubscribeFromDevicesUpdated(callback) {\n    const index = this.devicesUpdatedCallbacks.indexOf(callback);\n    if (index !== -1) {\n      this.devicesUpdatedCallbacks.splice(index, 1);\n    }\n  }\n\n  publishDevicesUpdated() {\n    this.devicesUpdatedCallbacks.forEach((callback) => {\n      callback({\n        currentAudioInputDevice: this.currentAudioInputDevice,\n        currentAudioOutputDevice: this.currentAudioOutputDevice,\n        currentVideoInputDevice: this.currentVideoInputDevice,\n        audioInputDevices: this.audioInputDevices,\n        audioOutputDevices: this.audioOutputDevices,\n        videoInputDevices: this.videoInputDevices,\n      });\n    });\n  }\n\n  subscribeToRosterUpdate(callback) {\n    this.rosterUpdateCallbacks.push(callback);\n  }\n\n  unsubscribeFromRosterUpdate(callback) {\n    const index = this.rosterUpdateCallbacks.indexOf(callback);\n    if (index !== -1) {\n      this.rosterUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  publishRosterUpdate() {\n    return throttle(() => {\n      for (let i = 0; i < this.rosterUpdateCallbacks.length; i += 1) {\n        const callback = this.rosterUpdateCallbacks[i];\n        callback(this.roster);\n      }\n    }, this.ROSTER_THROTTLE_MS);\n  }\n\n  subscribeToMessageUpdate(callback) {\n    this.messageUpdateCallbacks.push(callback);\n  }\n\n  unsubscribeFromMessageUpdate(callback) {\n    const index = this.messageUpdateCallbacks.indexOf(callback);\n    if (index !== -1) {\n      this.messageUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  publishMessageUpdate(message) {\n    for (let i = 0; i < this.messageUpdateCallbacks.length; i += 1) {\n      const callback = this.messageUpdateCallbacks[i];\n      callback(message);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
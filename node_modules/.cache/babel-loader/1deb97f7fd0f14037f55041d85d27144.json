{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * [[VideoTileState]] encapsulates the state of a [[VideoTile]]\n */\n\nclass VideoTileState {\n  constructor() {\n    /**\n     * The unique identifier for the [[VideoTile]] managed by [[VideoTileController]]. Each attendee can have at most one tileId.\n     */\n    this.tileId = null;\n    /**\n     * Indication of whether tile is associated with local video.\n     */\n\n    this.localTile = false;\n    /**\n     * Indication of whether the tile associated with the local attendee has started to play.\n     */\n\n    this.localTileStarted = false;\n    /**\n     * Indication of whether the tile has content-sharing video.\n     */\n\n    this.isContent = false;\n    /**\n     * Indication of whether the tile has active video stream.\n     */\n\n    this.active = false;\n    /**\n     * Indication of whether the tile has paused video stream.\n     */\n\n    this.paused = false;\n    /**\n     * Indication of whether the remote video is paused at publishing attendee. This field is not supported.\n     */\n\n    this.poorConnection = false;\n    /**\n     * The attendee id associated with the [[VideoTile]].\n     */\n\n    this.boundAttendeeId = null;\n    /**\n     * The user id associated with the [[VideoTile]].\n     */\n\n    this.boundExternalUserId = null;\n    /**\n     * The video stream bound with the [[VideoTile]].\n     */\n\n    this.boundVideoStream = null;\n    /**\n     * The HTMLVideoElement bound with the [[VideoTile]].\n     */\n\n    this.boundVideoElement = null;\n    /**\n     * The nameplate for the [[VideoTile]]. SDK users should use boundExternalUserId for user id instead of this field.\n     */\n\n    this.nameplate = null;\n    /**\n     * The intrinsic width of the video stream upon binding with the [[VideoTile]].\n     * Video stream intrinsic width could change and developers should use HTMLVideoElement listener for actual intrinsic width.\n     */\n\n    this.videoStreamContentWidth = null;\n    /**\n     * The intrinsic height of the video stream upon binding with the [[VideoTile]]\n     * Video stream intrinsic height could change and developers should use HTMLVideoElement listener for actual intrinsic height.\n     */\n\n    this.videoStreamContentHeight = null;\n    /**\n     * The CSS width in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n     */\n\n    this.videoElementCSSWidthPixels = null;\n    /**\n     * The CSS height in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n     */\n\n    this.videoElementCSSHeightPixels = null;\n    /**\n     * The device pixel ratio of the current display monitor.\n     */\n\n    this.devicePixelRatio = 0;\n    /**\n     * The physical width in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n     */\n\n    this.videoElementPhysicalWidthPixels = null;\n    /**\n     * The physical height in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n     */\n\n    this.videoElementPhysicalHeightPixels = null;\n    /**\n     * The unique identifier published by server to associate with bound video stream. It is defined in [[SignalingProtocol.proto]].\n     * Developers should avoid using this field directly.\n     */\n\n    this.streamId = null;\n  }\n\n  clone() {\n    const cloned = new VideoTileState();\n    cloned.tileId = this.tileId;\n    cloned.localTile = this.localTile;\n    cloned.isContent = this.isContent;\n    cloned.active = this.active;\n    cloned.paused = this.paused;\n    cloned.poorConnection = this.poorConnection;\n    cloned.boundAttendeeId = this.boundAttendeeId;\n    cloned.boundExternalUserId = this.boundExternalUserId;\n    cloned.boundVideoStream = this.boundVideoStream;\n    cloned.boundVideoElement = this.boundVideoElement;\n    cloned.nameplate = this.nameplate;\n    cloned.videoStreamContentWidth = this.videoStreamContentWidth;\n    cloned.videoStreamContentHeight = this.videoStreamContentHeight;\n    cloned.videoElementCSSWidthPixels = this.videoElementCSSWidthPixels;\n    cloned.videoElementCSSHeightPixels = this.videoElementCSSHeightPixels;\n    cloned.devicePixelRatio = this.devicePixelRatio;\n    cloned.videoElementPhysicalWidthPixels = this.videoElementPhysicalWidthPixels;\n    cloned.videoElementPhysicalHeightPixels = this.videoElementPhysicalHeightPixels;\n    cloned.streamId = this.streamId;\n    return cloned;\n  }\n\n}\n\nexports.default = VideoTileState;","map":{"version":3,"mappings":"cAAA;AACA;;;;;AAEA;;;;AAGA,MAAqBA,cAArB,CAAmC;EAAnCC;IACE;;;IAGA,cAAwB,IAAxB;IAEA;;;;IAGA,iBAAqB,KAArB;IAEA;;;;IAGA,wBAA4B,KAA5B;IAEA;;;;IAGA,iBAAqB,KAArB;IAEA;;;;IAGA,cAAkB,KAAlB;IAEA;;;;IAGA,cAAkB,KAAlB;IAEA;;;;IAGA,sBAA0B,KAA1B;IAEA;;;;IAGA,uBAAiC,IAAjC;IAEA;;;;IAGA,2BAAqC,IAArC;IAEA;;;;IAGA,wBAAuC,IAAvC;IAEA;;;;IAGA,yBAA6C,IAA7C;IAEA;;;;IAGA,iBAA2B,IAA3B;IAEA;;;;;IAIA,+BAAyC,IAAzC;IAEA;;;;;IAIA,gCAA0C,IAA1C;IAEA;;;;IAGA,kCAA4C,IAA5C;IAEA;;;;IAGA,mCAA6C,IAA7C;IAEA;;;;IAGA,wBAA2B,CAA3B;IAEA;;;;IAGA,uCAAiD,IAAjD;IAEA;;;;IAGA,wCAAkD,IAAlD;IAEA;;;;;IAIA,gBAA0B,IAA1B;EAyBD;;EAvBCC,KAAK;IACH,MAAMC,MAAM,GAAG,IAAIH,cAAJ,EAAf;IACAG,MAAM,CAACC,MAAP,GAAgB,KAAKA,MAArB;IACAD,MAAM,CAACE,SAAP,GAAmB,KAAKA,SAAxB;IACAF,MAAM,CAACG,SAAP,GAAmB,KAAKA,SAAxB;IACAH,MAAM,CAACI,MAAP,GAAgB,KAAKA,MAArB;IACAJ,MAAM,CAACK,MAAP,GAAgB,KAAKA,MAArB;IACAL,MAAM,CAACM,cAAP,GAAwB,KAAKA,cAA7B;IACAN,MAAM,CAACO,eAAP,GAAyB,KAAKA,eAA9B;IACAP,MAAM,CAACQ,mBAAP,GAA6B,KAAKA,mBAAlC;IACAR,MAAM,CAACS,gBAAP,GAA0B,KAAKA,gBAA/B;IACAT,MAAM,CAACU,iBAAP,GAA2B,KAAKA,iBAAhC;IACAV,MAAM,CAACW,SAAP,GAAmB,KAAKA,SAAxB;IACAX,MAAM,CAACY,uBAAP,GAAiC,KAAKA,uBAAtC;IACAZ,MAAM,CAACa,wBAAP,GAAkC,KAAKA,wBAAvC;IACAb,MAAM,CAACc,0BAAP,GAAoC,KAAKA,0BAAzC;IACAd,MAAM,CAACe,2BAAP,GAAqC,KAAKA,2BAA1C;IACAf,MAAM,CAACgB,gBAAP,GAA0B,KAAKA,gBAA/B;IACAhB,MAAM,CAACiB,+BAAP,GAAyC,KAAKA,+BAA9C;IACAjB,MAAM,CAACkB,gCAAP,GAA0C,KAAKA,gCAA/C;IACAlB,MAAM,CAACmB,QAAP,GAAkB,KAAKA,QAAvB;IACA,OAAOnB,MAAP;EACD;;AA9HgC;;AAAnCoB","names":["VideoTileState","constructor","clone","cloned","tileId","localTile","isContent","active","paused","poorConnection","boundAttendeeId","boundExternalUserId","boundVideoStream","boundVideoElement","nameplate","videoStreamContentWidth","videoStreamContentHeight","videoElementCSSWidthPixels","videoElementCSSHeightPixels","devicePixelRatio","videoElementPhysicalWidthPixels","videoElementPhysicalHeightPixels","streamId","exports"],"sourceRoot":"","sources":["../../src/videotile/VideoTileState.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranscriptEventConverter = void 0;\n\nconst SignalingProtocol_1 = require(\"../signalingprotocol/SignalingProtocol\");\n\nconst Transcript_1 = require(\"./Transcript\");\n\nconst TranscriptionStatus_1 = require(\"./TranscriptionStatus\");\n\nconst TranscriptionStatusType_1 = require(\"./TranscriptionStatusType\");\n\nconst TranscriptItemType_1 = require(\"./TranscriptItemType\");\n\nconst TranscriptionStatusTypes = {\n  [SignalingProtocol_1.SdkTranscriptionStatus.Type.STARTED]: TranscriptionStatusType_1.default.STARTED,\n  [SignalingProtocol_1.SdkTranscriptionStatus.Type.INTERRUPTED]: TranscriptionStatusType_1.default.INTERRUPTED,\n  [SignalingProtocol_1.SdkTranscriptionStatus.Type.RESUMED]: TranscriptionStatusType_1.default.RESUMED,\n  [SignalingProtocol_1.SdkTranscriptionStatus.Type.STOPPED]: TranscriptionStatusType_1.default.STOPPED,\n  [SignalingProtocol_1.SdkTranscriptionStatus.Type.FAILED]: TranscriptionStatusType_1.default.FAILED\n};\n\nclass TranscriptEventConverter {\n  /**\n   * Decodes a list of TranscriptEvent from a data message.\n   * @param dataMessage Data message to decode from\n   * @returns List of TranscriptEvent\n   * @throws {Error} If the data message payload cannot be decoded\n   */\n  static from(dataMessage) {\n    let frame;\n\n    try {\n      frame = SignalingProtocol_1.SdkTranscriptFrame.decode(dataMessage.data);\n    } catch (e) {\n      throw new Error('Cannot decode transcript data message: ' + e);\n    }\n\n    const transcriptEvents = [];\n\n    for (const sdkTranscriptEvent of frame.events) {\n      if (sdkTranscriptEvent.status) {\n        const transcriptionStatusType = TranscriptionStatusTypes[sdkTranscriptEvent.status.type];\n\n        if (!transcriptionStatusType) {\n          continue;\n        }\n\n        const transcriptionStatus = new TranscriptionStatus_1.default();\n        transcriptionStatus.type = transcriptionStatusType;\n        transcriptionStatus.eventTimeMs = sdkTranscriptEvent.status.eventTime;\n        transcriptionStatus.transcriptionRegion = sdkTranscriptEvent.status.transcriptionRegion;\n        transcriptionStatus.transcriptionConfiguration = sdkTranscriptEvent.status.transcriptionConfiguration;\n\n        if (sdkTranscriptEvent.status.message) {\n          transcriptionStatus.message = sdkTranscriptEvent.status.message;\n        }\n\n        transcriptEvents.push(transcriptionStatus);\n      } else if (sdkTranscriptEvent.transcript) {\n        const transcript = new Transcript_1.default();\n        transcript.results = [];\n\n        for (const result of sdkTranscriptEvent.transcript.results) {\n          const transcriptResult = {\n            channelId: result.channelId,\n            isPartial: result.isPartial,\n            resultId: result.resultId,\n            startTimeMs: result.startTime,\n            endTimeMs: result.endTime,\n            alternatives: []\n          };\n\n          if (result.languageCode) {\n            transcriptResult.languageCode = result.languageCode;\n          }\n\n          if (result.languageIdentification && result.languageIdentification.length > 0) {\n            transcriptResult.languageIdentification = [];\n\n            for (const languageIdentification of result.languageIdentification) {\n              const transcriptLanguageWithScore = {\n                languageCode: languageIdentification.languageCode,\n                score: languageIdentification.score\n              };\n              transcriptResult.languageIdentification.push(transcriptLanguageWithScore);\n            }\n          }\n\n          for (const alternative of result.alternatives) {\n            const transcriptAlternative = {\n              items: [],\n              transcript: alternative.transcript\n            };\n\n            for (const item of alternative.items) {\n              const transcriptItem = {\n                content: item.content,\n                attendee: {\n                  attendeeId: item.speakerAttendeeId,\n                  externalUserId: item.speakerExternalUserId\n                },\n                startTimeMs: item.startTime,\n                endTimeMs: item.endTime,\n                type: null\n              };\n\n              if (item.vocabularyFilterMatch) {\n                transcriptItem.vocabularyFilterMatch = item.vocabularyFilterMatch;\n              }\n\n              if (item.hasOwnProperty('stable')) {\n                transcriptItem.stable = item.stable;\n              }\n\n              if (item.hasOwnProperty('confidence')) {\n                transcriptItem.confidence = item.confidence;\n              }\n\n              switch (item.type) {\n                case SignalingProtocol_1.SdkTranscriptItem.Type.PRONUNCIATION:\n                  transcriptItem.type = TranscriptItemType_1.default.PRONUNCIATION;\n                  break;\n\n                case SignalingProtocol_1.SdkTranscriptItem.Type.PUNCTUATION:\n                  transcriptItem.type = TranscriptItemType_1.default.PUNCTUATION;\n                  break;\n              }\n\n              transcriptAlternative.items.push(transcriptItem);\n            }\n\n            for (const entity of alternative.entities) {\n              if (!transcriptAlternative.entities) {\n                transcriptAlternative.entities = [];\n              }\n\n              const transcriptEntity = {\n                category: entity.category,\n                confidence: entity.confidence,\n                content: entity.content,\n                startTimeMs: entity.startTime,\n                endTimeMs: entity.endTime\n              };\n\n              if (entity.type) {\n                transcriptEntity.type = entity.type;\n              }\n\n              transcriptAlternative.entities.push(transcriptEntity);\n            }\n\n            transcriptResult.alternatives.push(transcriptAlternative);\n          }\n\n          transcript.results.push(transcriptResult);\n        }\n\n        transcriptEvents.push(transcript);\n      }\n    }\n\n    return transcriptEvents;\n  }\n\n}\n\nexports.TranscriptEventConverter = TranscriptEventConverter;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAGA;;AAKA;;AAGA;;AACA;;AAEA;;AAIA,MAAMA,wBAAwB,GAAG;EAC/B,CAACC,2CAAuBC,IAAvB,CAA4BC,OAA7B,GAAuCC,kCAAwBD,OADhC;EAE/B,CAACF,2CAAuBC,IAAvB,CAA4BG,WAA7B,GAA2CD,kCAAwBC,WAFpC;EAG/B,CAACJ,2CAAuBC,IAAvB,CAA4BI,OAA7B,GAAuCF,kCAAwBE,OAHhC;EAI/B,CAACL,2CAAuBC,IAAvB,CAA4BK,OAA7B,GAAuCH,kCAAwBG,OAJhC;EAK/B,CAACN,2CAAuBC,IAAvB,CAA4BM,MAA7B,GAAsCJ,kCAAwBI;AAL/B,CAAjC;;AAUA,MAAaC,wBAAb,CAAqC;EACnC;;;;;;EAMW,OAAJC,IAAI,CAACC,WAAD,EAAyB;IAClC,IAAIC,KAAJ;;IACA,IAAI;MACFA,KAAK,GAAGX,uCAAmBY,MAAnB,CAA0BF,WAAW,CAACG,IAAtC,CAAR;IACD,CAFD,CAEE,OAAOC,CAAP,EAAU;MACV,MAAM,IAAIC,KAAJ,CAAU,4CAA4CD,CAAtD,CAAN;IACD;;IAED,MAAME,gBAAgB,GAAsB,EAA5C;;IACA,KAAK,MAAMC,kBAAX,IAAiCN,KAAK,CAACO,MAAvC,EAA+C;MAC7C,IAAID,kBAAkB,CAACE,MAAvB,EAA+B;QAC7B,MAAMC,uBAAuB,GAAGrB,wBAAwB,CAACkB,kBAAkB,CAACE,MAAnB,CAA0BE,IAA3B,CAAxD;;QACA,IAAI,CAACD,uBAAL,EAA8B;UAC5B;QACD;;QACD,MAAME,mBAAmB,GAAG,IAAIC,6BAAJ,EAA5B;QACAD,mBAAmB,CAACD,IAApB,GAA2BD,uBAA3B;QACAE,mBAAmB,CAACE,WAApB,GAAkCP,kBAAkB,CAACE,MAAnB,CAA0BM,SAA5D;QACAH,mBAAmB,CAACI,mBAApB,GAA0CT,kBAAkB,CAACE,MAAnB,CAA0BO,mBAApE;QACAJ,mBAAmB,CAACK,0BAApB,GACEV,kBAAkB,CAACE,MAAnB,CAA0BQ,0BAD5B;;QAGA,IAAIV,kBAAkB,CAACE,MAAnB,CAA0BS,OAA9B,EAAuC;UACrCN,mBAAmB,CAACM,OAApB,GAA8BX,kBAAkB,CAACE,MAAnB,CAA0BS,OAAxD;QACD;;QAEDZ,gBAAgB,CAACa,IAAjB,CAAsBP,mBAAtB;MACD,CAjBD,MAiBO,IAAIL,kBAAkB,CAACa,UAAvB,EAAmC;QACxC,MAAMA,UAAU,GAAG,IAAIC,oBAAJ,EAAnB;QACAD,UAAU,CAACE,OAAX,GAAqB,EAArB;;QAEA,KAAK,MAAMC,MAAX,IAAqBhB,kBAAkB,CAACa,UAAnB,CAA8BE,OAAnD,EAA4D;UAC1D,MAAME,gBAAgB,GAAqB;YACzCC,SAAS,EAAEF,MAAM,CAACE,SADuB;YAEzCC,SAAS,EAAEH,MAAM,CAACG,SAFuB;YAGzCC,QAAQ,EAAEJ,MAAM,CAACI,QAHwB;YAIzCC,WAAW,EAAEL,MAAM,CAACM,SAJqB;YAKzCC,SAAS,EAAEP,MAAM,CAACQ,OALuB;YAMzCC,YAAY,EAAE;UAN2B,CAA3C;;UASA,IAAIT,MAAM,CAACU,YAAX,EAAyB;YACvBT,gBAAgB,CAACS,YAAjB,GAAgCV,MAAM,CAACU,YAAvC;UACD;;UAED,IAAIV,MAAM,CAACW,sBAAP,IAAiCX,MAAM,CAACW,sBAAP,CAA8BC,MAA9B,GAAuC,CAA5E,EAA+E;YAC7EX,gBAAgB,CAACU,sBAAjB,GAA0C,EAA1C;;YACA,KAAK,MAAMA,sBAAX,IAAqCX,MAAM,CAACW,sBAA5C,EAAoE;cAClE,MAAME,2BAA2B,GAAgC;gBAC/DH,YAAY,EAAEC,sBAAsB,CAACD,YAD0B;gBAE/DI,KAAK,EAAEH,sBAAsB,CAACG;cAFiC,CAAjE;cAKAb,gBAAgB,CAACU,sBAAjB,CAAwCf,IAAxC,CAA6CiB,2BAA7C;YACD;UACF;;UAED,KAAK,MAAME,WAAX,IAA0Bf,MAAM,CAACS,YAAjC,EAA+C;YAC7C,MAAMO,qBAAqB,GAA0B;cACnDC,KAAK,EAAE,EAD4C;cAEnDpB,UAAU,EAAEkB,WAAW,CAAClB;YAF2B,CAArD;;YAKA,KAAK,MAAMqB,IAAX,IAAmBH,WAAW,CAACE,KAA/B,EAAsC;cACpC,MAAME,cAAc,GAAmB;gBACrCC,OAAO,EAAEF,IAAI,CAACE,OADuB;gBAErCC,QAAQ,EAAE;kBACRC,UAAU,EAAEJ,IAAI,CAACK,iBADT;kBAERC,cAAc,EAAEN,IAAI,CAACO;gBAFb,CAF2B;gBAMrCpB,WAAW,EAAEa,IAAI,CAACZ,SANmB;gBAOrCC,SAAS,EAAEW,IAAI,CAACV,OAPqB;gBAQrCpB,IAAI,EAAE;cAR+B,CAAvC;;cAWA,IAAI8B,IAAI,CAACQ,qBAAT,EAAgC;gBAC9BP,cAAc,CAACO,qBAAf,GAAuCR,IAAI,CAACQ,qBAA5C;cACD;;cAED,IAAIR,IAAI,CAACS,cAAL,CAAoB,QAApB,CAAJ,EAAmC;gBACjCR,cAAc,CAACS,MAAf,GAAwBV,IAAI,CAACU,MAA7B;cACD;;cAED,IAAIV,IAAI,CAACS,cAAL,CAAoB,YAApB,CAAJ,EAAuC;gBACrCR,cAAc,CAACU,UAAf,GAA4BX,IAAI,CAACW,UAAjC;cACD;;cAED,QAAQX,IAAI,CAAC9B,IAAb;gBACE,KAAKrB,sCAAkBC,IAAlB,CAAuB8D,aAA5B;kBACEX,cAAc,CAAC/B,IAAf,GAAsB2C,6BAAmBD,aAAzC;kBACA;;gBACF,KAAK/D,sCAAkBC,IAAlB,CAAuBgE,WAA5B;kBACEb,cAAc,CAAC/B,IAAf,GAAsB2C,6BAAmBC,WAAzC;kBACA;cANJ;;cASAhB,qBAAqB,CAACC,KAAtB,CAA4BrB,IAA5B,CAAiCuB,cAAjC;YACD;;YAED,KAAK,MAAMc,MAAX,IAAqBlB,WAAW,CAACmB,QAAjC,EAA2C;cACzC,IAAI,CAAClB,qBAAqB,CAACkB,QAA3B,EAAqC;gBACnClB,qBAAqB,CAACkB,QAAtB,GAAiC,EAAjC;cACD;;cACD,MAAMC,gBAAgB,GAAqB;gBACzCC,QAAQ,EAAEH,MAAM,CAACG,QADwB;gBAEzCP,UAAU,EAAEI,MAAM,CAACJ,UAFsB;gBAGzCT,OAAO,EAAEa,MAAM,CAACb,OAHyB;gBAIzCf,WAAW,EAAE4B,MAAM,CAAC3B,SAJqB;gBAKzCC,SAAS,EAAE0B,MAAM,CAACzB;cALuB,CAA3C;;cAQA,IAAIyB,MAAM,CAAC7C,IAAX,EAAiB;gBACf+C,gBAAgB,CAAC/C,IAAjB,GAAwB6C,MAAM,CAAC7C,IAA/B;cACD;;cACD4B,qBAAqB,CAACkB,QAAtB,CAA+BtC,IAA/B,CAAoCuC,gBAApC;YACD;;YAEDlC,gBAAgB,CAACQ,YAAjB,CAA8Bb,IAA9B,CAAmCoB,qBAAnC;UACD;;UAEDnB,UAAU,CAACE,OAAX,CAAmBH,IAAnB,CAAwBK,gBAAxB;QACD;;QAEDlB,gBAAgB,CAACa,IAAjB,CAAsBC,UAAtB;MACD;IACF;;IAED,OAAOd,gBAAP;EACD;;AAvIkC;;AAArCsD","names":["TranscriptionStatusTypes","SignalingProtocol_1","Type","STARTED","TranscriptionStatusType_1","INTERRUPTED","RESUMED","STOPPED","FAILED","TranscriptEventConverter","from","dataMessage","frame","decode","data","e","Error","transcriptEvents","sdkTranscriptEvent","events","status","transcriptionStatusType","type","transcriptionStatus","TranscriptionStatus_1","eventTimeMs","eventTime","transcriptionRegion","transcriptionConfiguration","message","push","transcript","Transcript_1","results","result","transcriptResult","channelId","isPartial","resultId","startTimeMs","startTime","endTimeMs","endTime","alternatives","languageCode","languageIdentification","length","transcriptLanguageWithScore","score","alternative","transcriptAlternative","items","item","transcriptItem","content","attendee","attendeeId","speakerAttendeeId","externalUserId","speakerExternalUserId","vocabularyFilterMatch","hasOwnProperty","stable","confidence","PRONUNCIATION","TranscriptItemType_1","PUNCTUATION","entity","entities","transcriptEntity","category","exports"],"sourceRoot":"","sources":["../../src/transcript/TranscriptEvent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
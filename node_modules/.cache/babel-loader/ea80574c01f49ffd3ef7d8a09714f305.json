{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ClientMetricReportDirection_1 = require(\"../clientmetricreport/ClientMetricReportDirection\");\n\nconst ClientMetricReportMediaType_1 = require(\"../clientmetricreport/ClientMetricReportMediaType\");\n\nconst ClientVideoStreamReceivingReport_1 = require(\"../clientmetricreport/ClientVideoStreamReceivingReport\");\n\nconst ReconnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/ReconnectionHealthPolicy\");\n\nconst UnusableAudioWarningConnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy\");\n\nconst MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst SignalingProtocol_1 = require(\"../signalingprotocol/SignalingProtocol\");\n\nconst AudioLogEvent_1 = require(\"../statscollector/AudioLogEvent\");\n\nconst VideoLogEvent_1 = require(\"../statscollector/VideoLogEvent\");\n\nconst Types_1 = require(\"../utils/Types\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[MonitorTask]] monitors connections using SignalingAndMetricsConnectionMonitor.\n */\n\n\nclass MonitorTask extends BaseTask_1.default {\n  constructor(context, connectionHealthPolicyConfiguration, initialConnectionHealthData) {\n    super(context.logger);\n    this.context = context;\n    this.initialConnectionHealthData = initialConnectionHealthData;\n    this.taskName = 'MonitorTask';\n    this.prevSignalStrength = 1;\n    this.currentVideoDownlinkBandwidthEstimationKbps = 10000;\n    this.currentAvailableStreamAvgBitrates = null;\n    this.hasSignalingError = false;\n    this.presenceHandlerCalled = false; // See comment above invocation of `pauseResubscribeCheck` in `DefaultAudioVideoController`\n    // for explanation.\n\n    this.isResubscribeCheckPaused = false;\n    this.pendingMetricsReport = undefined;\n\n    this.checkAndSendWeakSignalEvent = signalStrength => {\n      const isCurrentSignalBad = signalStrength < 1;\n      const isPrevSignalBad = this.prevSignalStrength < 1;\n      const signalStrengthEventType = isCurrentSignalBad ? !isPrevSignalBad ? AudioLogEvent_1.default.RedmicStartLoss : null : isPrevSignalBad ? AudioLogEvent_1.default.RedmicEndLoss : null;\n\n      if (signalStrengthEventType) {\n        this.context.statsCollector.logAudioEvent(signalStrengthEventType);\n      }\n\n      this.prevSignalStrength = signalStrength;\n    };\n\n    this.realtimeFatalErrorCallback = error => {\n      this.logger.error(`realtime error: ${error}: ${error.stack}`);\n      this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.RealtimeApiFailed), error);\n    };\n\n    this.realtimeAttendeeIdPresenceHandler = (presentAttendeeId, present) => {\n      const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n      this.logger.info(`attendeePresenceReceived: ${attendeeId}`);\n\n      if (attendeeId === presentAttendeeId && present && !this.presenceHandlerCalled) {\n        this.presenceHandlerCalled = true;\n        this.context.attendeePresenceDurationMs = Date.now() - this.context.startAudioVideoTimestamp;\n        /* istanbul ignore else */\n\n        if (this.context.eventController) {\n          this.context.eventController.publishEvent('attendeePresenceReceived', {\n            attendeePresenceDurationMs: this.context.attendeePresenceDurationMs\n          });\n        }\n      }\n    };\n\n    this.generateAudioVideoEventAttributes = () => {\n      const {\n        signalingOpenDurationMs,\n        poorConnectionCount,\n        startTimeMs,\n        iceGatheringDurationMs,\n        attendeePresenceDurationMs,\n        meetingStartDurationMs\n      } = this.context;\n      const attributes = {\n        maxVideoTileCount: this.context.maxVideoTileCount,\n        meetingDurationMs: startTimeMs === null ? 0 : Math.round(Date.now() - startTimeMs),\n        signalingOpenDurationMs,\n        iceGatheringDurationMs,\n        attendeePresenceDurationMs,\n        poorConnectionCount,\n        meetingStartDurationMs\n      };\n      return attributes;\n    };\n\n    this.reconnectionHealthPolicy = new ReconnectionHealthPolicy_1.default(context.logger, Object.assign({}, connectionHealthPolicyConfiguration), this.initialConnectionHealthData.clone());\n    this.unusableAudioWarningHealthPolicy = new UnusableAudioWarningConnectionHealthPolicy_1.default(Object.assign({}, connectionHealthPolicyConfiguration), this.initialConnectionHealthData.clone());\n  }\n\n  removeObserver() {\n    this.context.audioVideoController.removeObserver(this);\n    this.context.realtimeController.realtimeUnsubscribeToFatalError(this.realtimeFatalErrorCallback);\n    this.context.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n    this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(this.realtimeAttendeeIdPresenceHandler);\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.context.removableObservers.push(this);\n      this.context.audioVideoController.addObserver(this);\n      this.context.realtimeController.realtimeSubscribeToFatalError(this.realtimeFatalErrorCallback);\n      this.context.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n      this.context.realtimeController.realtimeSubscribeToAttendeeIdPresence(this.realtimeAttendeeIdPresenceHandler);\n      this.context.connectionMonitor.start();\n      this.context.statsCollector.start(this.context.signalingClient, this.context.videoStreamIndex);\n      this.context.signalingClient.registerObserver(this);\n    });\n  }\n\n  pauseResubscribeCheck() {\n    this.isResubscribeCheckPaused = true;\n  }\n\n  resumeResubscribeCheck() {\n    if (!this.isResubscribeCheckPaused) {\n      // Do not recheck subcribe if it wasn't paused to begin with.\n      return;\n    }\n\n    this.isResubscribeCheckPaused = false;\n\n    if (this.pendingMetricsReport) {\n      this.context.logger.info('Resuming resubscribe check with pending metrics report');\n\n      if (this.checkResubscribe(this.pendingMetricsReport)) {\n        this.context.audioVideoController.update({\n          needsRenegotiation: false\n        });\n      }\n    }\n  }\n\n  videoTileDidUpdate(_tileState) {\n    this.context.maxVideoTileCount = Math.max(this.context.maxVideoTileCount, this.context.videoTileController.getAllVideoTiles().length);\n  }\n\n  videoSendHealthDidChange(bitrateKbps, packetsPerSecond) {\n    if (this.context.videoInputAttachedTimestampMs === 0 || !this.context.videoTileController.hasStartedLocalVideoTile() || !this.context.lastKnownVideoAvailability.canStartLocalVideo) {\n      return;\n    }\n\n    const tracks = this.context.activeVideoInput !== null ? this.context.activeVideoInput.getTracks() : null;\n\n    if (!tracks || !tracks[0]) {\n      return;\n    }\n\n    const durationMs = Date.now() - this.context.videoInputAttachedTimestampMs;\n\n    if (packetsPerSecond > 0 || bitrateKbps > 0) {\n      this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingSuccess, this.context.videoDeviceInformation);\n      this.context.statsCollector.logLatency('video_start_sending', durationMs, this.context.videoDeviceInformation);\n      this.context.videoInputAttachedTimestampMs = 0;\n    } else if (durationMs > MonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS) {\n      this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingFailed, this.context.videoDeviceInformation);\n      this.context.videoInputAttachedTimestampMs = 0;\n    }\n  }\n\n  videoReceiveBandwidthDidChange(newBandwidthKbps, oldBandwidthKbps) {\n    this.logger.debug(() => {\n      return `receiving bandwidth changed from prev=${oldBandwidthKbps} Kbps to curr=${newBandwidthKbps} Kbps`;\n    });\n    this.currentVideoDownlinkBandwidthEstimationKbps = newBandwidthKbps;\n  }\n\n  checkResubscribe(clientMetricReport) {\n    if (this.isResubscribeCheckPaused) {\n      this.context.logger.info('Resubscribe check is paused, setting incoming client metric report as pending');\n      this.pendingMetricsReport = clientMetricReport;\n      return;\n    } else {\n      this.pendingMetricsReport = undefined;\n    }\n\n    const metricReport = clientMetricReport.getObservableMetrics();\n\n    if (!metricReport) {\n      return false;\n    }\n\n    const availableSendBandwidth = metricReport.availableSendBandwidth || metricReport.availableOutgoingBitrate;\n    const nackCountPerSecond = metricReport.nackCountReceivedPerSecond || metricReport.googNackCountReceivedPerSecond;\n    let needResubscribe = false;\n    this.context.videoDownlinkBandwidthPolicy.updateMetrics(clientMetricReport);\n    const resubscribeForDownlink = this.context.videoDownlinkBandwidthPolicy.wantsResubscribe();\n    needResubscribe = needResubscribe || resubscribeForDownlink;\n\n    if (resubscribeForDownlink) {\n      this.context.videosToReceive = this.context.videoDownlinkBandwidthPolicy.chooseSubscriptions();\n      this.logger.info(`trigger resubscribe for down=${resubscribeForDownlink}; videosToReceive=[${this.context.videosToReceive.array()}]`);\n    }\n\n    if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n      this.context.videoUplinkBandwidthPolicy.updateConnectionMetric({\n        uplinkKbps: availableSendBandwidth / 1000,\n        nackCountPerSecond: nackCountPerSecond\n      });\n      const resubscribeForUplink = this.context.videoUplinkBandwidthPolicy.wantsResubscribe();\n      needResubscribe = needResubscribe || resubscribeForUplink;\n\n      if (resubscribeForUplink) {\n        this.logger.info(`trigger resubscribe for up=${resubscribeForUplink}; videosToReceive=[${this.context.videosToReceive.array()}]`);\n        this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n        this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();\n      }\n    }\n\n    return needResubscribe;\n  }\n\n  metricsDidReceive(clientMetricReport) {\n    const defaultClientMetricReport = clientMetricReport;\n\n    if (!defaultClientMetricReport) {\n      return;\n    }\n\n    if (this.checkResubscribe(clientMetricReport)) {\n      this.context.audioVideoController.update({\n        needsRenegotiation: false\n      });\n    }\n\n    if (!this.currentAvailableStreamAvgBitrates) {\n      return;\n    }\n\n    const streamMetricReport = defaultClientMetricReport.streamMetricReports;\n\n    if (!streamMetricReport) {\n      return;\n    }\n\n    const downlinkVideoStream = new Map();\n    const videoReceivingBitrateMap = new Map(); // TODO: move those logic to stats collector.\n\n    for (const ssrc in streamMetricReport) {\n      if (streamMetricReport[ssrc].mediaType === ClientMetricReportMediaType_1.default.VIDEO && streamMetricReport[ssrc].direction === ClientMetricReportDirection_1.default.DOWNSTREAM) {\n        downlinkVideoStream.set(streamMetricReport[ssrc].streamId, streamMetricReport[ssrc]);\n      }\n    }\n\n    let fireCallback = false;\n\n    for (const bitrate of this.currentAvailableStreamAvgBitrates.bitrates) {\n      if (downlinkVideoStream.has(bitrate.sourceStreamId)) {\n        const report = downlinkVideoStream.get(bitrate.sourceStreamId);\n        const attendeeId = this.context.videoStreamIndex.attendeeIdForStreamId(bitrate.sourceStreamId);\n\n        if (!attendeeId) {\n          continue;\n        }\n\n        const newReport = new ClientVideoStreamReceivingReport_1.default();\n        const prevBytesReceived = report.previousMetrics['bytesReceived'];\n        const currBytesReceived = report.currentMetrics['bytesReceived'];\n\n        if (!prevBytesReceived || !currBytesReceived) {\n          continue;\n        }\n\n        const receivedBitrate = (currBytesReceived - prevBytesReceived) * 8 / 1000;\n        newReport.expectedAverageBitrateKbps = bitrate.avgBitrateBps / 1000;\n        newReport.receivedAverageBitrateKbps = receivedBitrate;\n        newReport.attendeeId = attendeeId;\n\n        if (receivedBitrate < bitrate.avgBitrateBps / 1000 * MonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR) {\n          fireCallback = true;\n        }\n\n        videoReceivingBitrateMap.set(attendeeId, newReport);\n      }\n    }\n\n    if (fireCallback) {\n      this.logger.debug(() => {\n        return `Downlink video streams are not receiving enough data`;\n      });\n      this.context.audioVideoController.forEachObserver(observer => {\n        Types_1.Maybe.of(observer.videoNotReceivingEnoughData).map(f => f.bind(observer)(Array.from(videoReceivingBitrateMap.values())));\n      });\n    }\n  }\n\n  connectionHealthDidChange(connectionHealthData) {\n    var _a;\n\n    if (connectionHealthData.consecutiveMissedPongs === 0) {\n      if (this.context.reconnectController) {\n        this.context.reconnectController.setLastActiveTimestampMs(Date.now());\n      }\n    }\n\n    this.reconnectionHealthPolicy.update(connectionHealthData);\n    const reconnectionValue = this.reconnectionHealthPolicy.healthIfChanged();\n\n    if (reconnectionValue !== null) {\n      this.logger.info(`reconnection health is now: ${reconnectionValue}`);\n\n      if (reconnectionValue === 0) {\n        this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.ConnectionHealthReconnect), null);\n      }\n    }\n\n    this.unusableAudioWarningHealthPolicy.update(connectionHealthData);\n    const unusableAudioWarningValue = this.unusableAudioWarningHealthPolicy.healthIfChanged();\n\n    if (unusableAudioWarningValue !== null) {\n      this.logger.info(`unusable audio warning is now: ${unusableAudioWarningValue}`);\n\n      if (unusableAudioWarningValue === 0) {\n        this.context.poorConnectionCount += 1;\n        const attributes = this.generateAudioVideoEventAttributes();\n        (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.publishEvent('receivingAudioDropped', attributes);\n\n        if (this.context.videoTileController.haveVideoTilesWithStreams()) {\n          this.context.audioVideoController.forEachObserver(observer => {\n            Types_1.Maybe.of(observer.connectionDidSuggestStopVideo).map(f => f.bind(observer)());\n          });\n        } else {\n          this.context.audioVideoController.forEachObserver(observer => {\n            Types_1.Maybe.of(observer.connectionDidBecomePoor).map(f => f.bind(observer)());\n          });\n        }\n      } else {\n        this.context.audioVideoController.forEachObserver(observer => {\n          Types_1.Maybe.of(observer.connectionDidBecomeGood).map(f => f.bind(observer)());\n        });\n      }\n    }\n  }\n\n  handleBitrateFrame(bitrates) {\n    let requiredBandwidthKbps = 0;\n    this.currentAvailableStreamAvgBitrates = bitrates;\n    this.logger.debug(() => {\n      return `simulcast: bitrates from server ${JSON.stringify(bitrates)}`;\n    });\n\n    for (const bitrate of bitrates.bitrates) {\n      if (this.context.videosToReceive.contain(bitrate.sourceStreamId)) {\n        requiredBandwidthKbps += bitrate.avgBitrateBps;\n      }\n    }\n\n    requiredBandwidthKbps /= 1000;\n\n    if (this.currentVideoDownlinkBandwidthEstimationKbps * MonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR < requiredBandwidthKbps) {\n      this.logger.info(`Downlink bandwidth pressure is high: estimated bandwidth ${this.currentVideoDownlinkBandwidthEstimationKbps}Kbps, required bandwidth ${requiredBandwidthKbps}Kbps`);\n      this.context.audioVideoController.forEachObserver(observer => {\n        Types_1.Maybe.of(observer.estimatedDownlinkBandwidthLessThanRequired).map(f => f.bind(observer)(this.currentVideoDownlinkBandwidthEstimationKbps, requiredBandwidthKbps));\n      });\n    }\n  }\n\n  handleSignalingClientEvent(event) {\n    var _a; // Don't add two or more consecutive \"signalingDropped\" states.\n\n\n    if (event.type === SignalingClientEventType_1.default.WebSocketClosed && (event.closeCode === 4410 || event.closeCode >= 4500 && event.closeCode < 4600) || event.type === SignalingClientEventType_1.default.WebSocketError || event.type === SignalingClientEventType_1.default.WebSocketFailed) {\n      if (!this.hasSignalingError) {\n        const attributes = this.generateAudioVideoEventAttributes();\n        (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.publishEvent('signalingDropped', attributes);\n        this.hasSignalingError = true;\n      }\n    } else if (event.type === SignalingClientEventType_1.default.WebSocketOpen) {\n      this.hasSignalingError = false;\n    }\n\n    if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame) {\n      if (!!event.message.bitrates) {\n        const bitrateFrame = event.message.bitrates;\n        this.context.videoStreamIndex.integrateBitratesFrame(bitrateFrame);\n        this.context.videoDownlinkBandwidthPolicy.updateIndex(this.context.videoStreamIndex);\n        this.handleBitrateFrame(event.message.bitrates);\n      }\n\n      const status = MeetingSessionStatus_1.default.fromSignalFrame(event.message); // Primary meeting join ack status will be handled by `PromoteToPrimaryMeetingTask`\n\n      if (event.message.type !== SignalingProtocol_1.SdkSignalFrame.Type.PRIMARY_MEETING_JOIN_ACK && status.statusCode() !== MeetingSessionStatusCode_1.default.OK) {\n        this.context.audioVideoController.handleMeetingSessionStatus(status, null);\n      }\n    }\n  }\n\n}\n\nexports.default = MonitorTask;\nMonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS = 30000;\nMonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR = 1.5;\nMonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR = 0.5;","map":{"version":3,"mappings":"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","names":["MonitorTask","BaseTask_1","constructor","context","connectionHealthPolicyConfiguration","initialConnectionHealthData","logger","undefined","signalStrength","isCurrentSignalBad","isPrevSignalBad","prevSignalStrength","signalStrengthEventType","AudioLogEvent_1","RedmicStartLoss","RedmicEndLoss","statsCollector","logAudioEvent","error","stack","audioVideoController","handleMeetingSessionStatus","MeetingSessionStatus_1","MeetingSessionStatusCode_1","RealtimeApiFailed","presentAttendeeId","present","attendeeId","meetingSessionConfiguration","credentials","info","presenceHandlerCalled","attendeePresenceDurationMs","Date","now","startAudioVideoTimestamp","eventController","publishEvent","signalingOpenDurationMs","poorConnectionCount","startTimeMs","iceGatheringDurationMs","meetingStartDurationMs","attributes","maxVideoTileCount","meetingDurationMs","Math","round","reconnectionHealthPolicy","ReconnectionHealthPolicy_1","Object","clone","unusableAudioWarningHealthPolicy","UnusableAudioWarningConnectionHealthPolicy_1","removeObserver","realtimeController","realtimeUnsubscribeToFatalError","realtimeFatalErrorCallback","realtimeUnsubscribeToLocalSignalStrengthChange","checkAndSendWeakSignalEvent","realtimeUnsubscribeToAttendeeIdPresence","realtimeAttendeeIdPresenceHandler","signalingClient","run","removableObservers","push","addObserver","realtimeSubscribeToFatalError","realtimeSubscribeToLocalSignalStrengthChange","realtimeSubscribeToAttendeeIdPresence","connectionMonitor","start","videoStreamIndex","registerObserver","pauseResubscribeCheck","isResubscribeCheckPaused","resumeResubscribeCheck","pendingMetricsReport","checkResubscribe","update","needsRenegotiation","videoTileDidUpdate","_tileState","max","videoTileController","getAllVideoTiles","length","videoSendHealthDidChange","bitrateKbps","packetsPerSecond","videoInputAttachedTimestampMs","hasStartedLocalVideoTile","lastKnownVideoAvailability","canStartLocalVideo","tracks","activeVideoInput","getTracks","durationMs","logVideoEvent","VideoLogEvent_1","SendingSuccess","videoDeviceInformation","logLatency","DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS","SendingFailed","videoReceiveBandwidthDidChange","newBandwidthKbps","oldBandwidthKbps","debug","currentVideoDownlinkBandwidthEstimationKbps","clientMetricReport","metricReport","getObservableMetrics","availableSendBandwidth","availableOutgoingBitrate","nackCountPerSecond","nackCountReceivedPerSecond","googNackCountReceivedPerSecond","needResubscribe","videoDownlinkBandwidthPolicy","updateMetrics","resubscribeForDownlink","wantsResubscribe","videosToReceive","chooseSubscriptions","array","videoUplinkBandwidthPolicy","updateConnectionMetric","uplinkKbps","resubscribeForUplink","chooseEncodingParameters","chooseMediaTrackConstraints","metricsDidReceive","defaultClientMetricReport","currentAvailableStreamAvgBitrates","streamMetricReport","streamMetricReports","downlinkVideoStream","Map","videoReceivingBitrateMap","ssrc","mediaType","ClientMetricReportMediaType_1","VIDEO","direction","ClientMetricReportDirection_1","DOWNSTREAM","set","streamId","fireCallback","bitrate","bitrates","has","sourceStreamId","report","get","attendeeIdForStreamId","newReport","ClientVideoStreamReceivingReport_1","prevBytesReceived","previousMetrics","currBytesReceived","currentMetrics","receivedBitrate","expectedAverageBitrateKbps","avgBitrateBps","receivedAverageBitrateKbps","DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR","forEachObserver","observer","Types_1","of","videoNotReceivingEnoughData","map","f","bind","Array","from","values","connectionHealthDidChange","connectionHealthData","consecutiveMissedPongs","reconnectController","setLastActiveTimestampMs","reconnectionValue","healthIfChanged","ConnectionHealthReconnect","unusableAudioWarningValue","generateAudioVideoEventAttributes","_a","haveVideoTilesWithStreams","connectionDidSuggestStopVideo","connectionDidBecomePoor","connectionDidBecomeGood","handleBitrateFrame","requiredBandwidthKbps","JSON","stringify","contain","DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR","estimatedDownlinkBandwidthLessThanRequired","handleSignalingClientEvent","event","type","SignalingClientEventType_1","WebSocketClosed","closeCode","WebSocketError","WebSocketFailed","hasSignalingError","WebSocketOpen","ReceivedSignalFrame","message","bitrateFrame","integrateBitratesFrame","updateIndex","status","fromSignalFrame","SignalingProtocol_1","Type","PRIMARY_MEETING_JOIN_ACK","statusCode","OK","exports"],"sourceRoot":"","sources":["../../src/task/MonitorTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
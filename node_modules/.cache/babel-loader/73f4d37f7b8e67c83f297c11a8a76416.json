{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst MeetingSessionConfiguration_1 = require(\"../meetingsession/MeetingSessionConfiguration\");\n\nconst MeetingSessionCredentials_1 = require(\"../meetingsession/MeetingSessionCredentials\");\n\nconst DefaultModality_1 = require(\"../modality/DefaultModality\");\n\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\n\nconst Types_1 = require(\"../utils/Types\");\n\nconst ContentShareConstants_1 = require(\"./ContentShareConstants\");\n\nclass DefaultContentShareController {\n  constructor(mediaStreamBroker, contentAudioVideo, attendeeAudioVideo) {\n    this.mediaStreamBroker = mediaStreamBroker;\n    this.contentAudioVideo = contentAudioVideo;\n    this.attendeeAudioVideo = attendeeAudioVideo;\n    this.observerQueue = new Set();\n    this.destroyed = false;\n    this.contentAudioVideo.addObserver(this);\n    this.setupContentShareEvents();\n  }\n\n  static createContentShareMeetingSessionConfigure(configuration) {\n    const contentShareConfiguration = new MeetingSessionConfiguration_1.default();\n    contentShareConfiguration.meetingId = configuration.meetingId;\n    contentShareConfiguration.externalMeetingId = configuration.externalMeetingId;\n    contentShareConfiguration.urls = configuration.urls;\n    contentShareConfiguration.credentials = new MeetingSessionCredentials_1.default();\n    contentShareConfiguration.credentials.attendeeId = configuration.credentials.attendeeId + ContentShareConstants_1.default.Modality;\n    contentShareConfiguration.credentials.externalUserId = configuration.credentials.externalUserId;\n    contentShareConfiguration.credentials.joinToken = configuration.credentials.joinToken + ContentShareConstants_1.default.Modality;\n    return contentShareConfiguration;\n  }\n\n  setContentAudioProfile(audioProfile) {\n    this.contentAudioVideo.setAudioProfile(audioProfile);\n  }\n\n  startContentShare(stream) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!stream) {\n        return;\n      }\n\n      this.mediaStreamBroker.mediaStream = stream;\n\n      for (let i = 0; i < this.mediaStreamBroker.mediaStream.getTracks().length; i++) {\n        this.mediaStreamBroker.mediaStream.getTracks()[i].addEventListener('ended', () => {\n          this.stopContentShare();\n        });\n      }\n\n      this.contentAudioVideo.start();\n\n      if (this.mediaStreamBroker.mediaStream.getVideoTracks().length > 0) {\n        this.contentAudioVideo.videoTileController.startLocalVideoTile();\n      }\n    });\n  }\n\n  startContentShareFromScreenCapture(sourceId, frameRate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mediaStream = yield this.mediaStreamBroker.acquireScreenCaptureDisplayInputStream(sourceId, frameRate);\n      yield this.startContentShare(mediaStream);\n      return mediaStream;\n    });\n  }\n\n  pauseContentShare() {\n    if (this.mediaStreamBroker.toggleMediaStream(false)) {\n      this.forEachContentShareObserver(observer => {\n        Types_1.Maybe.of(observer.contentShareDidPause).map(f => f.call(observer));\n      });\n    }\n  }\n\n  unpauseContentShare() {\n    if (this.mediaStreamBroker.toggleMediaStream(true)) {\n      this.forEachContentShareObserver(observer => {\n        Types_1.Maybe.of(observer.contentShareDidUnpause).map(f => f.call(observer));\n      });\n    }\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Idempotency.\n\n      /* istanbul ignore if */\n      if (!this.contentAudioVideo) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.contentAudioVideo.removeObserver(this);\n      this.stopContentShare();\n      this.observerQueue.clear();\n      this.contentAudioVideo = undefined;\n      this.attendeeAudioVideo = undefined;\n      this.mediaStreamBroker = undefined;\n    });\n  }\n\n  stopContentShare() {\n    this.contentAudioVideo.stop();\n    this.mediaStreamBroker.cleanup();\n  }\n\n  addContentShareObserver(observer) {\n    this.observerQueue.add(observer);\n  }\n\n  removeContentShareObserver(observer) {\n    this.observerQueue.delete(observer);\n  }\n\n  forEachContentShareObserver(observerFunc) {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler_1.default.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  audioVideoDidStop(_sessionStatus) {\n    // If the content attendee got dropped or could not connect, stopContentShare will not be called\n    // so make sure to clean up the media stream.\n    this.mediaStreamBroker.cleanup();\n\n    if (this.contentShareTile) {\n      this.attendeeAudioVideo.videoTileController.removeVideoTile(this.contentShareTile.id());\n      this.contentShareTile = null;\n    }\n\n    this.forEachContentShareObserver(observer => {\n      Types_1.Maybe.of(observer.contentShareDidStop).map(f => f.call(observer));\n    });\n  }\n\n  setupContentShareEvents() {\n    // We use realtimeSubscribeToAttendeeIdPresence instead of audioVideoDidStart because audioVideoDidStart fires\n    // before the capacity check in Tincan while when realtimeSubscribeToAttendeeIdPresence fires, we know the\n    // content attendee has been able to pass the capacity check and join the call so we can start the local\n    // content share video\n    this.attendeeAudioVideo.realtimeController.realtimeSubscribeToAttendeeIdPresence((attendeeId, present, _externalUserId, _dropped) => {\n      const isContentAttendee = new DefaultModality_1.default(attendeeId).hasModality(DefaultModality_1.default.MODALITY_CONTENT);\n      const isSelfAttendee = new DefaultModality_1.default(attendeeId).base() === this.attendeeAudioVideo.configuration.credentials.attendeeId;\n\n      if (!isContentAttendee || !isSelfAttendee || !present || this.contentShareTile) {\n        return;\n      }\n\n      const stream = this.mediaStreamBroker.mediaStream;\n\n      if (stream === null || stream === void 0 ? void 0 : stream.getVideoTracks().length) {\n        this.contentShareTile = this.attendeeAudioVideo.videoTileController.addVideoTile();\n        const track = stream.getVideoTracks()[0];\n        let width, height;\n\n        if (track.getSettings) {\n          const cap = track.getSettings();\n          width = cap.width;\n          height = cap.height;\n        } else {\n          const cap = track.getCapabilities();\n          width = cap.width;\n          height = cap.height;\n        }\n\n        this.contentShareTile.bindVideoStream(this.contentAudioVideo.configuration.credentials.attendeeId, false, stream, width, height, null, this.contentAudioVideo.configuration.credentials.externalUserId);\n      }\n\n      this.forEachContentShareObserver(observer => {\n        Types_1.Maybe.of(observer.contentShareDidStart).map(f => f.call(observer));\n      });\n    });\n  }\n\n}\n\nexports.default = DefaultContentShareController;","map":{"version":3,"mappings":"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","names":["DefaultContentShareController","constructor","mediaStreamBroker","contentAudioVideo","attendeeAudioVideo","Set","addObserver","setupContentShareEvents","createContentShareMeetingSessionConfigure","configuration","contentShareConfiguration","MeetingSessionConfiguration_1","meetingId","externalMeetingId","urls","credentials","MeetingSessionCredentials_1","attendeeId","ContentShareConstants_1","Modality","externalUserId","joinToken","setContentAudioProfile","audioProfile","setAudioProfile","startContentShare","stream","mediaStream","i","getTracks","length","addEventListener","stopContentShare","start","getVideoTracks","videoTileController","startLocalVideoTile","startContentShareFromScreenCapture","sourceId","frameRate","acquireScreenCaptureDisplayInputStream","pauseContentShare","toggleMediaStream","forEachContentShareObserver","observer","Types_1","of","contentShareDidPause","map","f","call","unpauseContentShare","contentShareDidUnpause","destroy","destroyed","removeObserver","observerQueue","clear","undefined","stop","cleanup","addContentShareObserver","add","removeContentShareObserver","delete","observerFunc","AsyncScheduler_1","nextTick","has","audioVideoDidStop","_sessionStatus","contentShareTile","removeVideoTile","id","contentShareDidStop","realtimeController","realtimeSubscribeToAttendeeIdPresence","present","_externalUserId","_dropped","isContentAttendee","DefaultModality_1","hasModality","MODALITY_CONTENT","isSelfAttendee","base","addVideoTile","track","width","height","getSettings","cap","getCapabilities","bindVideoStream","contentShareDidStart","exports"],"sourceRoot":"","sources":["../../src/contentsharecontroller/DefaultContentShareController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
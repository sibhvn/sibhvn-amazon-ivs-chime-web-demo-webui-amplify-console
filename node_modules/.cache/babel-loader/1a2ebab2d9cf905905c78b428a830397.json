{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ClientMetricReportDirection_1 = require(\"../clientmetricreport/ClientMetricReportDirection\");\n\nconst ClientMetricReportMediaType_1 = require(\"../clientmetricreport/ClientMetricReportMediaType\");\n\nconst DefaultClientMetricReport_1 = require(\"../clientmetricreport/DefaultClientMetricReport\");\n\nconst StreamMetricReport_1 = require(\"../clientmetricreport/StreamMetricReport\");\n\nconst MeetingSessionLifecycleEvent_1 = require(\"../meetingsession/MeetingSessionLifecycleEvent\");\n\nconst MeetingSessionLifecycleEventCondition_1 = require(\"../meetingsession/MeetingSessionLifecycleEventCondition\");\n\nconst IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst Types_1 = require(\"../utils/Types\");\n\nconst AudioLogEvent_1 = require(\"./AudioLogEvent\");\n\nconst VideoLogEvent_1 = require(\"./VideoLogEvent\");\n\nclass DefaultStatsCollector {\n  constructor(audioVideoController, logger, browserBehavior) {\n    let interval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DefaultStatsCollector.INTERVAL_MS;\n    this.audioVideoController = audioVideoController;\n    this.logger = logger;\n    this.browserBehavior = browserBehavior;\n    this.interval = interval;\n    this.intervalScheduler = null; // TODO: Implement metricsAddTime() and metricsLogEvent().\n\n    this.metricsAddTime = (_name, _duration, _attributes) => {};\n\n    this.metricsLogEvent = (_name, _attributes) => {};\n  } // TODO: Update toAttribute() and toSuffix() methods to convert raw data to a required type.\n\n\n  toAttribute(str) {\n    return this.toSuffix(str).substring(1);\n  }\n\n  toSuffix(str) {\n    if (str.toLowerCase() === str) {\n      // e.g. lower_case -> _lower_case\n      return `_${str}`;\n    } else if (str.toUpperCase() === str) {\n      // e.g. UPPER_CASE -> _upper_case\n      return `_${str.toLowerCase()}`;\n    } else {\n      // e.g. CamelCaseWithCAPS -> _camel_case_with_caps\n      return str.replace(/([A-Z][a-z]+)/g, function ($1) {\n        return `_${$1}`;\n      }).replace(/([A-Z][A-Z]+)/g, function ($1) {\n        return `_${$1}`;\n      }).toLowerCase();\n    }\n  }\n\n  logLatency(eventName, timeMs, attributes) {\n    const event = this.toSuffix(eventName);\n    this.logEventTime('meeting' + event, timeMs, attributes);\n  }\n\n  logStateTimeout(stateName, attributes) {\n    const state = this.toSuffix(stateName);\n    this.logEvent('meeting_session_state_timeout', Object.assign(Object.assign({}, attributes), {\n      state: `state${state}`\n    }));\n  }\n\n  logAudioEvent(eventName, attributes) {\n    const event = 'audio' + this.toSuffix(AudioLogEvent_1.default[eventName]);\n    this.logEvent(event, attributes);\n  }\n\n  logVideoEvent(eventName, attributes) {\n    const event = 'video' + this.toSuffix(VideoLogEvent_1.default[eventName]);\n    this.logEvent(event, attributes);\n  }\n\n  logEventTime(eventName, timeMs) {\n    let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const finalAttributes = Object.assign(Object.assign({}, attributes), {\n      call_id: this.audioVideoController.configuration.meetingId,\n      client_type: DefaultStatsCollector.CLIENT_TYPE,\n      metric_type: 'latency'\n    });\n    this.logger.debug(() => {\n      return `[DefaultStatsCollector] ${eventName}: ${JSON.stringify(finalAttributes)}`;\n    });\n    this.metricsAddTime(eventName, timeMs, finalAttributes);\n  }\n\n  logMeetingSessionStatus(status) {\n    // TODO: Generate the status event name given the status code.\n    const statusEventName = `${status.statusCode()}`;\n    this.logEvent(statusEventName);\n    const statusAttribute = {\n      status: statusEventName,\n      status_code: `${status.statusCode()}`\n    };\n    this.logEvent('meeting_session_status', statusAttribute);\n\n    if (status.isTerminal()) {\n      this.logEvent('meeting_session_stopped', statusAttribute);\n    }\n\n    if (status.isAudioConnectionFailure()) {\n      this.logEvent('meeting_session_audio_failed', statusAttribute);\n    }\n\n    if (status.isFailure()) {\n      this.logEvent('meeting_session_failed', statusAttribute);\n    }\n  }\n\n  logLifecycleEvent(lifecycleEvent, condition) {\n    const attributes = {\n      lifecycle_event: `lifecycle${this.toSuffix(MeetingSessionLifecycleEvent_1.default[lifecycleEvent])}`,\n      lifecycle_event_code: `${lifecycleEvent}`,\n      lifecycle_event_condition: `condition${this.toSuffix(MeetingSessionLifecycleEventCondition_1.default[condition])}`,\n      lifecycle_event_condition_code: `${condition}`\n    };\n    this.logEvent('meeting_session_lifecycle', attributes);\n  }\n\n  logEvent(eventName) {\n    let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalAttributes = Object.assign(Object.assign({}, attributes), {\n      call_id: this.audioVideoController.configuration.meetingId,\n      client_type: DefaultStatsCollector.CLIENT_TYPE\n    });\n    this.logger.debug(() => {\n      return `[DefaultStatsCollector] ${eventName}: ${JSON.stringify(finalAttributes)}`;\n    });\n    this.metricsLogEvent(eventName, finalAttributes);\n  }\n  /**\n   * WEBRTC METRICS COLLECTION.\n   */\n\n\n  start(signalingClient, videoStreamIndex, clientMetricReport) {\n    if (this.intervalScheduler) {\n      return false;\n    }\n\n    this.logger.info('Starting DefaultStatsCollector');\n    this.signalingClient = signalingClient;\n    this.videoStreamIndex = videoStreamIndex;\n\n    if (clientMetricReport) {\n      this.clientMetricReport = clientMetricReport;\n    } else {\n      this.clientMetricReport = new DefaultClientMetricReport_1.default(this.logger, this.videoStreamIndex, this.audioVideoController.configuration.credentials.attendeeId);\n    }\n\n    this.intervalScheduler = new IntervalScheduler_1.default(this.interval);\n    this.intervalScheduler.start(() => {\n      this.getStatsWrapper();\n    });\n    return true;\n  }\n\n  stop() {\n    this.logger.info('Stopping DefaultStatsCollector');\n\n    if (this.intervalScheduler) {\n      this.intervalScheduler.stop();\n    }\n\n    this.intervalScheduler = null;\n  }\n  /**\n   * Convert raw metrics to client metric report.\n   */\n\n\n  updateMetricValues(rawMetricReport, isStream) {\n    const metricReport = isStream ? this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)] : this.clientMetricReport.globalMetricReport;\n    let metricMap;\n\n    if (isStream) {\n      metricMap = this.clientMetricReport.getMetricMap(metricReport.mediaType, metricReport.direction);\n    } else {\n      metricMap = this.clientMetricReport.getMetricMap();\n    }\n\n    for (const rawMetric in rawMetricReport) {\n      if (rawMetric in metricMap) {\n        metricReport.previousMetrics[rawMetric] = metricReport.currentMetrics[rawMetric];\n        metricReport.currentMetrics[rawMetric] = rawMetricReport[rawMetric];\n      }\n    }\n  }\n\n  processRawMetricReports(rawMetricReports) {\n    this.clientMetricReport.currentSsrcs = {};\n    const timeStamp = Date.now();\n\n    for (const rawMetricReport of rawMetricReports) {\n      const isStream = this.isStreamRawMetricReport(rawMetricReport.type);\n\n      if (isStream) {\n        const existingStreamMetricReport = this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)];\n\n        if (!existingStreamMetricReport) {\n          const streamMetricReport = new StreamMetricReport_1.default();\n          streamMetricReport.mediaType = this.getMediaType(rawMetricReport);\n          streamMetricReport.direction = this.getDirectionType(rawMetricReport);\n\n          if (!this.videoStreamIndex.allStreams().empty()) {\n            streamMetricReport.streamId = this.videoStreamIndex.streamIdForSSRC(Number(rawMetricReport.ssrc));\n          }\n\n          this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)] = streamMetricReport;\n        } else {\n          // Update stream ID in case we have overriden it locally in the case of remote video\n          // updates completed without a negotiation\n          existingStreamMetricReport.streamId = this.videoStreamIndex.streamIdForSSRC(Number(rawMetricReport.ssrc));\n        }\n\n        this.clientMetricReport.currentSsrcs[Number(rawMetricReport.ssrc)] = 1;\n      }\n\n      this.updateMetricValues(rawMetricReport, isStream);\n    }\n\n    this.clientMetricReport.removeDestroyedSsrcs();\n    this.clientMetricReport.previousTimestampMs = this.clientMetricReport.currentTimestampMs;\n    this.clientMetricReport.currentTimestampMs = timeStamp;\n    this.clientMetricReport.print();\n  }\n  /**\n   * Protobuf packaging.\n   */\n\n\n  addMetricFrame(metricName, clientMetricFrame, metricSpec, ssrc) {\n    const type = metricSpec.type;\n    const transform = metricSpec.transform;\n    const sourceMetric = metricSpec.source;\n    const streamMetricFramesLength = clientMetricFrame.streamMetricFrames.length;\n    const latestStreamMetricFrame = clientMetricFrame.streamMetricFrames[streamMetricFramesLength - 1];\n\n    if (type) {\n      const metricFrame = SignalingProtocol_js_1.SdkMetric.create();\n      metricFrame.type = type;\n      metricFrame.value = sourceMetric ? transform(sourceMetric, ssrc) : transform(metricName, ssrc);\n      ssrc ? latestStreamMetricFrame.metrics.push(metricFrame) : clientMetricFrame.globalMetrics.push(metricFrame);\n    }\n  }\n\n  addGlobalMetricsToProtobuf(clientMetricFrame) {\n    const metricMap = this.clientMetricReport.getMetricMap();\n\n    for (const metricName in this.clientMetricReport.globalMetricReport.currentMetrics) {\n      this.addMetricFrame(metricName, clientMetricFrame, metricMap[metricName]);\n    }\n  }\n\n  addStreamMetricsToProtobuf(clientMetricFrame) {\n    for (const ssrc in this.clientMetricReport.streamMetricReports) {\n      const streamMetricReport = this.clientMetricReport.streamMetricReports[ssrc];\n      const streamMetricFrame = SignalingProtocol_js_1.SdkStreamMetricFrame.create();\n      streamMetricFrame.streamId = streamMetricReport.streamId;\n      streamMetricFrame.metrics = [];\n      clientMetricFrame.streamMetricFrames.push(streamMetricFrame);\n      const metricMap = this.clientMetricReport.getMetricMap(streamMetricReport.mediaType, streamMetricReport.direction);\n\n      for (const metricName in streamMetricReport.currentMetrics) {\n        this.addMetricFrame(metricName, clientMetricFrame, metricMap[metricName], Number(ssrc));\n      }\n    }\n  }\n\n  makeClientMetricProtobuf() {\n    const clientMetricFrame = SignalingProtocol_js_1.SdkClientMetricFrame.create();\n    clientMetricFrame.globalMetrics = [];\n    clientMetricFrame.streamMetricFrames = [];\n    this.addGlobalMetricsToProtobuf(clientMetricFrame);\n    this.addStreamMetricsToProtobuf(clientMetricFrame);\n    return clientMetricFrame;\n  }\n\n  sendClientMetricProtobuf(clientMetricFrame) {\n    this.signalingClient.sendClientMetrics(clientMetricFrame);\n  }\n  /**\n   * Helper functions.\n   */\n\n\n  isStreamRawMetricReport(type) {\n    return type === 'ssrc' || type === 'inbound-rtp' || type === 'outbound-rtp';\n  }\n\n  getMediaType(rawMetricReport) {\n    return rawMetricReport.mediaType === 'audio' ? ClientMetricReportMediaType_1.default.AUDIO : ClientMetricReportMediaType_1.default.VIDEO;\n  }\n\n  getDirectionType(rawMetricReport) {\n    return rawMetricReport.id.toLowerCase().indexOf('send') !== -1 || rawMetricReport.id.toLowerCase().indexOf('outbound') !== -1 || rawMetricReport.type === 'outbound-rtp' ? ClientMetricReportDirection_1.default.UPSTREAM : ClientMetricReportDirection_1.default.DOWNSTREAM;\n  }\n  /**\n   * Metric report filter.\n   */\n\n\n  isValidChromeRawMetric(rawMetricReport) {\n    return this.browserBehavior.hasChromiumWebRTC() && (rawMetricReport.type === 'ssrc' || rawMetricReport.type === 'VideoBwe' || rawMetricReport.type === 'googCandidatePair' && rawMetricReport.googWritable === 'true' && rawMetricReport.googReadable === 'true');\n  }\n\n  isValidStandardRawMetric(rawMetricReport) {\n    const valid = rawMetricReport.type === 'inbound-rtp' || rawMetricReport.type === 'outbound-rtp' || rawMetricReport.type === 'candidate-pair' && rawMetricReport.state === 'succeeded';\n\n    if (this.browserBehavior.hasFirefoxWebRTC()) {\n      if (this.compareMajorVersion(DefaultStatsCollector.FIREFOX_UPDATED_GET_STATS_VERSION) === -1) {\n        return valid;\n      } else {\n        return valid && rawMetricReport.isRemote === false;\n      }\n    }\n\n    return valid;\n  }\n\n  isValidSsrc(rawMetricReport) {\n    let validSsrc = true;\n\n    if (this.isStreamRawMetricReport(rawMetricReport.type) && this.getDirectionType(rawMetricReport) === ClientMetricReportDirection_1.default.DOWNSTREAM && this.getMediaType(rawMetricReport) === ClientMetricReportMediaType_1.default.VIDEO) {\n      validSsrc = this.videoStreamIndex.streamIdForSSRC(Number(rawMetricReport.ssrc)) > 0;\n    }\n\n    return validSsrc;\n  }\n\n  isValidRawMetricReport(rawMetricReport) {\n    return (this.isValidChromeRawMetric(rawMetricReport) || this.isValidStandardRawMetric(rawMetricReport)) && this.isValidSsrc(rawMetricReport);\n  }\n\n  filterRawMetricReports(rawMetricReports) {\n    const filteredRawMetricReports = [];\n\n    for (const rawMetricReport of rawMetricReports) {\n      if (this.isValidRawMetricReport(rawMetricReport)) {\n        filteredRawMetricReports.push(rawMetricReport);\n      }\n    }\n\n    return filteredRawMetricReports;\n  }\n\n  handleRawMetricReports(rawMetricReports) {\n    const filteredRawMetricReports = this.filterRawMetricReports(rawMetricReports);\n    this.logger.debug(() => {\n      return `Filtered raw metrics : ${JSON.stringify(filteredRawMetricReports)}`;\n    });\n    this.processRawMetricReports(filteredRawMetricReports);\n    const clientMetricFrame = this.makeClientMetricProtobuf();\n    this.sendClientMetricProtobuf(clientMetricFrame);\n    this.audioVideoController.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.metricsDidReceive).map(f => f.bind(observer)(this.clientMetricReport.clone()));\n    });\n  }\n  /**\n   * Get raw webrtc metrics.\n   */\n\n\n  getStatsWrapper() {\n    if (!this.audioVideoController.rtcPeerConnection) {\n      return;\n    }\n\n    const rawMetricReports = [];\n\n    if (!this.browserBehavior.requiresPromiseBasedWebRTCGetStats()) {\n      // @ts-ignore\n      this.audioVideoController.rtcPeerConnection.getStats( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      res => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        res.result().forEach(report => {\n          const item = {};\n          report.names().forEach(name => {\n            item[name] = report.stat(name);\n          });\n          item.id = report.id;\n          item.type = report.type;\n          item.timestamp = report.timestamp;\n          rawMetricReports.push(item);\n        });\n        this.handleRawMetricReports(rawMetricReports);\n      }, // @ts-ignore\n      error => {\n        this.logger.error(error.message);\n      });\n    } else {\n      // @ts-ignore\n      this.audioVideoController.rtcPeerConnection.getStats().then(report => {\n        report.forEach(item => {\n          rawMetricReports.push(item);\n        });\n        this.handleRawMetricReports(rawMetricReports);\n      }).catch(error => {\n        this.logger.error(error.message);\n      });\n    }\n  }\n\n  compareMajorVersion(version) {\n    const currentMajorVersion = parseInt(this.browserBehavior.version().split('.')[0]);\n    const expectedMajorVersion = parseInt(version.split('.')[0]);\n\n    if (expectedMajorVersion === currentMajorVersion) {\n      return 0;\n    }\n\n    if (expectedMajorVersion > currentMajorVersion) {\n      return 1;\n    }\n\n    return -1;\n  }\n\n}\n\nexports.default = DefaultStatsCollector;\nDefaultStatsCollector.INTERVAL_MS = 1000;\nDefaultStatsCollector.FIREFOX_UPDATED_GET_STATS_VERSION = '66.0.0';\nDefaultStatsCollector.CLIENT_TYPE = 'amazon-chime-sdk-js';","map":{"version":3,"mappings":"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","names":["DefaultStatsCollector","constructor","audioVideoController","logger","browserBehavior","interval","INTERVAL_MS","_name","_duration","_attributes","toAttribute","str","toSuffix","substring","toLowerCase","toUpperCase","replace","$1","logLatency","eventName","timeMs","attributes","event","logEventTime","logStateTimeout","stateName","state","logEvent","Object","logAudioEvent","AudioLogEvent_1","logVideoEvent","VideoLogEvent_1","finalAttributes","call_id","configuration","meetingId","client_type","CLIENT_TYPE","metric_type","debug","JSON","stringify","metricsAddTime","logMeetingSessionStatus","status","statusEventName","statusCode","statusAttribute","status_code","isTerminal","isAudioConnectionFailure","isFailure","logLifecycleEvent","lifecycleEvent","condition","lifecycle_event","MeetingSessionLifecycleEvent_1","lifecycle_event_code","lifecycle_event_condition","MeetingSessionLifecycleEventCondition_1","lifecycle_event_condition_code","metricsLogEvent","start","signalingClient","videoStreamIndex","clientMetricReport","intervalScheduler","info","DefaultClientMetricReport_1","credentials","attendeeId","IntervalScheduler_1","getStatsWrapper","stop","updateMetricValues","rawMetricReport","isStream","metricReport","streamMetricReports","Number","ssrc","globalMetricReport","metricMap","getMetricMap","mediaType","direction","rawMetric","previousMetrics","currentMetrics","processRawMetricReports","rawMetricReports","currentSsrcs","timeStamp","Date","now","isStreamRawMetricReport","type","existingStreamMetricReport","streamMetricReport","StreamMetricReport_1","getMediaType","getDirectionType","allStreams","empty","streamId","streamIdForSSRC","removeDestroyedSsrcs","previousTimestampMs","currentTimestampMs","print","addMetricFrame","metricName","clientMetricFrame","metricSpec","transform","sourceMetric","source","streamMetricFramesLength","streamMetricFrames","length","latestStreamMetricFrame","metricFrame","SignalingProtocol_js_1","create","value","metrics","push","globalMetrics","addGlobalMetricsToProtobuf","addStreamMetricsToProtobuf","streamMetricFrame","makeClientMetricProtobuf","sendClientMetricProtobuf","sendClientMetrics","ClientMetricReportMediaType_1","AUDIO","VIDEO","id","indexOf","ClientMetricReportDirection_1","UPSTREAM","DOWNSTREAM","isValidChromeRawMetric","hasChromiumWebRTC","googWritable","googReadable","isValidStandardRawMetric","valid","hasFirefoxWebRTC","compareMajorVersion","FIREFOX_UPDATED_GET_STATS_VERSION","isRemote","isValidSsrc","validSsrc","isValidRawMetricReport","filterRawMetricReports","filteredRawMetricReports","handleRawMetricReports","forEachObserver","observer","Types_1","of","metricsDidReceive","map","f","bind","clone","rtcPeerConnection","requiresPromiseBasedWebRTCGetStats","getStats","res","result","forEach","report","item","names","name","stat","timestamp","error","message","then","catch","version","currentMajorVersion","parseInt","split","expectedMajorVersion","exports"],"sourceRoot":"","sources":["../../src/statscollector/DefaultStatsCollector.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst DefaultVideoStreamIdSet_1 = require(\"../videostreamidset/DefaultVideoStreamIdSet\");\n\nconst VideoStreamDescription_1 = require(\"./VideoStreamDescription\");\n/**\n * [[DefaultVideoStreamIndex]] implements [[VideoStreamIndex]] to facilitate video stream subscription\n * and includes query functions for stream id and attendee id.\n */\n\n\nclass DefaultVideoStreamIndex {\n  constructor(logger) {\n    this.logger = logger;\n    this.currentIndex = null;\n    this.indexForSubscribe = null;\n    this.currentSubscribeAck = null; // These are based on the index at the time of the last Subscribe Ack\n\n    this.subscribeTrackToStreamMap = null;\n    this.subscribeStreamToAttendeeMap = null;\n    this.subscribeStreamToExternalUserIdMap = null;\n    this.subscribeSsrcToStreamMap = null; // These are based on the most up to date index\n\n    this.streamToAttendeeMap = null;\n    this.streamToExternalUserIdMap = null;\n    this.videoStreamDescription = new VideoStreamDescription_1.default();\n    this.videoStreamDescription.trackLabel = 'AmazonChimeExpressVideo';\n    this.videoStreamDescription.streamId = 2;\n    this.videoStreamDescription.groupId = 2;\n  }\n\n  localStreamDescriptions() {\n    // localStreamDescriptions are used to construct IndexFrame\n    // old behavior for single video is to have streamId and groupId trackLabel fixed as the follows\n    return [this.videoStreamDescription.clone()];\n  }\n\n  convertBpsToKbps(avgBitrateBps) {\n    if (avgBitrateBps > 0 && avgBitrateBps < 1000) {\n      return 1;\n    } else {\n      return Math.trunc(avgBitrateBps / 1000);\n    }\n  }\n\n  remoteStreamDescriptions() {\n    if (!this.currentIndex || !this.currentIndex.sources) {\n      return [];\n    }\n\n    const streamInfos = [];\n    this.currentIndex.sources.forEach(source => {\n      const description = new VideoStreamDescription_1.default();\n      description.attendeeId = source.attendeeId;\n      description.groupId = source.groupId;\n      description.streamId = source.streamId;\n      description.maxBitrateKbps = source.maxBitrateKbps;\n      description.avgBitrateKbps = this.convertBpsToKbps(source.avgBitrateBps);\n      streamInfos.push(description);\n    });\n    return streamInfos;\n  }\n\n  integrateUplinkPolicyDecision(param) {\n    if (!!param && param.length) {\n      const encodingParam = param[0];\n      this.videoStreamDescription.maxBitrateKbps = encodingParam.maxBitrate / 1000;\n      this.videoStreamDescription.maxFrameRate = encodingParam.maxFramerate;\n    }\n  }\n\n  integrateIndexFrame(indexFrame) {\n    this.currentIndex = indexFrame; // In the Amazon Chime SDKs, we assume a one to one mapping of group ID to profile ID when creating\n    // video tiles (multiple video sources are supported through applying a `Modality` to a given profile/session token)\n    //\n    // We enforce this here to mitigate any possible duplicate group IDs left from a reconnection where the previous\n    // signal channel hasn't been timed out yet.  To guarantee we receive the latest stream we use the highest group ID\n    // since they are monotonically increasing.\n\n    const attendeeIdToMainGroupIdMap = new Map(); // Improve performance by not filtering sources unless\n    // we know the list will actually change\n\n    let attendeeWithMultipleGroupIdsExists = false;\n\n    for (const source of indexFrame.sources) {\n      if (!attendeeIdToMainGroupIdMap.has(source.attendeeId)) {\n        // We haven't see this attendee ID so just keep track of it\n        attendeeIdToMainGroupIdMap.set(source.attendeeId, source.groupId);\n        continue;\n      } // Otherwise see if we should use the group ID corresponding to this source (we prefer the highest for each attendee)\n\n\n      const currentGroupId = attendeeIdToMainGroupIdMap.get(source.attendeeId);\n\n      if (currentGroupId < source.groupId) {\n        this.logger.warn(`Old group ID ${currentGroupId} found for attendee ID ${source.attendeeId}, replacing with newer group ID ${source.groupId}`);\n        attendeeIdToMainGroupIdMap.set(source.attendeeId, source.groupId);\n      }\n\n      attendeeWithMultipleGroupIdsExists = true;\n    }\n\n    if (attendeeWithMultipleGroupIdsExists) {\n      // Only use the sources corresponding to the main group IDs for the given attendee ID\n      this.currentIndex.sources = this.currentIndex.sources.filter(source => attendeeIdToMainGroupIdMap.get(source.attendeeId) === source.groupId);\n    }\n\n    this.streamToAttendeeMap = null;\n    this.streamToExternalUserIdMap = null;\n  }\n\n  subscribeFrameSent() {\n    // This is called just as a Subscribe is being sent.  Save corresponding Index\n    this.indexForSubscribe = this.currentIndex;\n  }\n\n  integrateSubscribeAckFrame(subscribeAck) {\n    this.currentSubscribeAck = subscribeAck; // These are valid until the next Subscribe Ack even if the index is updated\n\n    this.subscribeTrackToStreamMap = this.buildTrackToStreamMap(this.currentSubscribeAck);\n    this.subscribeSsrcToStreamMap = this.buildSSRCToStreamMap(this.currentSubscribeAck);\n    this.subscribeStreamToAttendeeMap = this.buildStreamToAttendeeMap(this.indexForSubscribe);\n    this.subscribeStreamToExternalUserIdMap = this.buildStreamExternalUserIdMap(this.indexForSubscribe);\n  }\n\n  integrateBitratesFrame(bitrates) {\n    if (this.currentIndex) {\n      for (const bitrate of bitrates.bitrates) {\n        const source = this.currentIndex.sources.find(source => source.streamId === bitrate.sourceStreamId);\n\n        if (source !== undefined) {\n          source.avgBitrateBps = bitrate.avgBitrateBps;\n        }\n      }\n    }\n  }\n\n  allStreams() {\n    const set = new DefaultVideoStreamIdSet_1.default();\n\n    if (this.currentIndex) {\n      for (const source of this.currentIndex.sources) {\n        set.add(source.streamId);\n      }\n    }\n\n    return set;\n  }\n\n  allVideoSendingSourcesExcludingSelf(selfAttendeeId) {\n    const videoSources = [];\n    const attendeeSet = new Set();\n\n    if (this.currentIndex) {\n      if (this.currentIndex.sources && this.currentIndex.sources.length) {\n        for (const stream of this.currentIndex.sources) {\n          const {\n            attendeeId,\n            externalUserId,\n            mediaType\n          } = stream;\n\n          if (attendeeId !== selfAttendeeId && mediaType === SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {\n            if (!attendeeSet.has(attendeeId)) {\n              videoSources.push({\n                attendee: {\n                  attendeeId,\n                  externalUserId\n                }\n              });\n              attendeeSet.add(attendeeId);\n            }\n          }\n        }\n      }\n    }\n\n    return videoSources;\n  }\n\n  streamSelectionUnderBandwidthConstraint(selfAttendeeId, largeTileAttendeeIds, smallTileAttendeeIds, bandwidthKbps) {\n    const newAttendees = new Set();\n\n    if (this.currentIndex) {\n      for (const stream of this.currentIndex.sources) {\n        if (stream.attendeeId === selfAttendeeId || stream.mediaType !== SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {\n          continue;\n        }\n\n        if (!largeTileAttendeeIds.has(stream.attendeeId) && !smallTileAttendeeIds.has(stream.attendeeId)) {\n          newAttendees.add(stream.attendeeId);\n        }\n      }\n    }\n\n    const attendeeToStreamDescriptorMap = this.buildAttendeeToSortedStreamDescriptorMapExcludingSelf(selfAttendeeId);\n    const selectionMap = new Map();\n    let usage = 0;\n    attendeeToStreamDescriptorMap.forEach((streams, attendeeId) => {\n      selectionMap.set(attendeeId, streams[0]);\n      usage += streams[0].maxBitrateKbps;\n    });\n    usage = this.trySelectHighBitrateForAttendees(attendeeToStreamDescriptorMap, largeTileAttendeeIds, usage, bandwidthKbps, selectionMap);\n    this.trySelectHighBitrateForAttendees(attendeeToStreamDescriptorMap, newAttendees, usage, bandwidthKbps, selectionMap);\n    const streamSelectionSet = new DefaultVideoStreamIdSet_1.default();\n\n    for (const source of selectionMap.values()) {\n      streamSelectionSet.add(source.streamId);\n    }\n\n    return streamSelectionSet;\n  }\n\n  highestQualityStreamFromEachGroupExcludingSelf(selfAttendeeId) {\n    const set = new DefaultVideoStreamIdSet_1.default();\n\n    if (this.currentIndex) {\n      const maxes = new Map();\n\n      for (const source of this.currentIndex.sources) {\n        if (source.attendeeId === selfAttendeeId || source.mediaType !== SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {\n          continue;\n        }\n\n        if (!maxes.has(source.groupId) || source.maxBitrateKbps > maxes.get(source.groupId).maxBitrateKbps) {\n          maxes.set(source.groupId, source);\n        }\n      }\n\n      for (const source of maxes.values()) {\n        set.add(source.streamId);\n      }\n    }\n\n    return set;\n  }\n\n  numberOfVideoPublishingParticipantsExcludingSelf(selfAttendeeId) {\n    return this.highestQualityStreamFromEachGroupExcludingSelf(selfAttendeeId).array().length;\n  }\n\n  numberOfParticipants() {\n    if (!!this.currentIndex.numParticipants) {\n      return this.currentIndex.numParticipants;\n    }\n\n    return -1;\n  }\n\n  attendeeIdForTrack(trackId) {\n    const streamId = this.streamIdForTrack(trackId);\n\n    if (streamId === undefined || !this.subscribeStreamToAttendeeMap) {\n      this.logger.warn(`no attendee found for track ${trackId}`);\n      return '';\n    }\n\n    const attendeeId = this.subscribeStreamToAttendeeMap.get(streamId);\n\n    if (!attendeeId) {\n      this.logger.info(`track ${trackId} (stream ${streamId}) does not correspond to a known attendee`);\n      return '';\n    }\n\n    return attendeeId;\n  }\n\n  externalUserIdForTrack(trackId) {\n    const streamId = this.streamIdForTrack(trackId);\n\n    if (streamId === undefined || !this.subscribeStreamToExternalUserIdMap) {\n      this.logger.warn(`no external user id found for track ${trackId}`);\n      return '';\n    }\n\n    const externalUserId = this.subscribeStreamToExternalUserIdMap.get(streamId);\n\n    if (!externalUserId) {\n      this.logger.info(`track ${trackId} (stream ${streamId}) does not correspond to a known externalUserId`);\n      return '';\n    }\n\n    return externalUserId;\n  }\n\n  attendeeIdForStreamId(streamId) {\n    if (!this.streamToAttendeeMap) {\n      if (this.currentIndex) {\n        this.streamToAttendeeMap = this.buildStreamToAttendeeMap(this.currentIndex);\n      } else {\n        return '';\n      }\n    }\n\n    const attendeeId = this.streamToAttendeeMap.get(streamId);\n\n    if (!attendeeId) {\n      this.logger.info(`stream ${streamId}) does not correspond to a known attendee`);\n      return '';\n    }\n\n    return attendeeId;\n  }\n\n  groupIdForStreamId(streamId) {\n    for (const source of this.currentIndex.sources) {\n      if (source.streamId === streamId) {\n        return source.groupId;\n      }\n    } // If wasn't found in current index, then it could be in index used in last subscribe\n\n\n    if (!!this.indexForSubscribe) {\n      for (const source of this.indexForSubscribe.sources) {\n        if (source.streamId === streamId) {\n          return source.groupId;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  StreamIdsInSameGroup(streamId1, streamId2) {\n    if (this.groupIdForStreamId(streamId1) === this.groupIdForStreamId(streamId2)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  streamIdForTrack(trackId) {\n    if (!this.subscribeTrackToStreamMap) {\n      return undefined;\n    }\n\n    return this.subscribeTrackToStreamMap.get(trackId);\n  }\n\n  streamIdForSSRC(ssrcId) {\n    if (!this.subscribeSsrcToStreamMap) {\n      return undefined;\n    }\n\n    return this.subscribeSsrcToStreamMap.get(ssrcId);\n  }\n\n  overrideStreamIdMappings(previous, current) {\n    if (this.subscribeTrackToStreamMap) {\n      for (const [track, streamId] of this.subscribeTrackToStreamMap.entries()) {\n        if (previous === streamId) {\n          this.subscribeTrackToStreamMap.set(track, current);\n          break;\n        }\n      }\n    }\n\n    if (this.subscribeSsrcToStreamMap) {\n      for (const [ssrc, streamId] of this.subscribeSsrcToStreamMap.entries()) {\n        if (previous === streamId) {\n          this.subscribeSsrcToStreamMap.set(ssrc, current);\n          break;\n        }\n      }\n    }\n  }\n\n  streamsPausedAtSource() {\n    const paused = new DefaultVideoStreamIdSet_1.default();\n\n    if (this.currentIndex) {\n      for (const streamId of this.currentIndex.pausedAtSourceIds) {\n        paused.add(streamId);\n      }\n    }\n\n    return paused;\n  }\n\n  buildTrackToStreamMap(subscribeAck) {\n    const map = new Map();\n    this.logger.debug(() => `trackMap ${JSON.stringify(subscribeAck.tracks)}`);\n\n    for (const trackMapping of subscribeAck.tracks) {\n      if (trackMapping.trackLabel.length > 0 && trackMapping.streamId > 0) {\n        map.set(trackMapping.trackLabel, trackMapping.streamId);\n      }\n    }\n\n    return map;\n  }\n\n  buildSSRCToStreamMap(subscribeAck) {\n    const map = new Map();\n    this.logger.debug(() => `ssrcMap ${JSON.stringify(subscribeAck.tracks)}`);\n\n    for (const trackMapping of subscribeAck.tracks) {\n      if (trackMapping.trackLabel.length > 0 && trackMapping.streamId > 0) {\n        map.set(trackMapping.ssrc, trackMapping.streamId);\n      }\n    }\n\n    return map;\n  }\n\n  buildStreamToAttendeeMap(indexFrame) {\n    const map = new Map();\n\n    if (indexFrame) {\n      for (const source of indexFrame.sources) {\n        map.set(source.streamId, source.attendeeId);\n      }\n    }\n\n    return map;\n  }\n\n  buildStreamExternalUserIdMap(indexFrame) {\n    const map = new Map();\n\n    if (indexFrame) {\n      for (const source of indexFrame.sources) {\n        if (!!source.externalUserId) {\n          map.set(source.streamId, source.externalUserId);\n        }\n      }\n    }\n\n    return map;\n  }\n\n  trySelectHighBitrateForAttendees(attendeeToStreamDescriptorMap, highAttendees, currentUsage, bandwidthKbps, currentSelectionRef) {\n    for (const attendeeId of highAttendees) {\n      if (currentUsage >= bandwidthKbps) {\n        break;\n      }\n\n      if (attendeeToStreamDescriptorMap.has(attendeeId)) {\n        const streams = attendeeToStreamDescriptorMap.get(attendeeId);\n\n        for (const l of streams.reverse()) {\n          if (currentUsage - currentSelectionRef.get(attendeeId).maxBitrateKbps + l.maxBitrateKbps < bandwidthKbps) {\n            currentUsage = currentUsage - currentSelectionRef.get(attendeeId).maxBitrateKbps + l.maxBitrateKbps;\n            currentSelectionRef.set(attendeeId, l);\n            break;\n          }\n        }\n      }\n    }\n\n    return currentUsage;\n  }\n\n  buildAttendeeToSortedStreamDescriptorMapExcludingSelf(selfAttendeeId) {\n    const attendeeToStreamDescriptorMap = new Map();\n\n    if (this.currentIndex) {\n      for (const source of this.currentIndex.sources) {\n        if (source.attendeeId === selfAttendeeId || source.mediaType !== SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {\n          continue;\n        }\n\n        if (attendeeToStreamDescriptorMap.has(source.attendeeId)) {\n          attendeeToStreamDescriptorMap.get(source.attendeeId).push(source);\n        } else {\n          attendeeToStreamDescriptorMap.set(source.attendeeId, [source]);\n        }\n      }\n    }\n\n    attendeeToStreamDescriptorMap.forEach((streams, _attendeeId) => {\n      streams.sort((stream1, stream2) => {\n        if (stream1.maxBitrateKbps > stream2.maxBitrateKbps) {\n          return 1;\n        } else if (stream1.maxBitrateKbps < stream2.maxBitrateKbps) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n    });\n    return attendeeToStreamDescriptorMap;\n  }\n\n}\n\nexports.default = DefaultVideoStreamIndex;","map":{"version":3,"mappings":"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","names":["DefaultVideoStreamIndex","constructor","logger","VideoStreamDescription_1","videoStreamDescription","trackLabel","streamId","groupId","localStreamDescriptions","clone","convertBpsToKbps","avgBitrateBps","Math","trunc","remoteStreamDescriptions","currentIndex","sources","streamInfos","forEach","source","description","attendeeId","maxBitrateKbps","avgBitrateKbps","push","integrateUplinkPolicyDecision","param","length","encodingParam","maxBitrate","maxFrameRate","maxFramerate","integrateIndexFrame","indexFrame","attendeeIdToMainGroupIdMap","Map","attendeeWithMultipleGroupIdsExists","has","set","currentGroupId","get","warn","filter","streamToAttendeeMap","streamToExternalUserIdMap","subscribeFrameSent","indexForSubscribe","integrateSubscribeAckFrame","subscribeAck","currentSubscribeAck","subscribeTrackToStreamMap","buildTrackToStreamMap","subscribeSsrcToStreamMap","buildSSRCToStreamMap","subscribeStreamToAttendeeMap","buildStreamToAttendeeMap","subscribeStreamToExternalUserIdMap","buildStreamExternalUserIdMap","integrateBitratesFrame","bitrates","bitrate","find","sourceStreamId","undefined","allStreams","DefaultVideoStreamIdSet_1","add","allVideoSendingSourcesExcludingSelf","selfAttendeeId","videoSources","attendeeSet","Set","stream","externalUserId","mediaType","SignalingProtocol_js_1","VIDEO","attendee","streamSelectionUnderBandwidthConstraint","largeTileAttendeeIds","smallTileAttendeeIds","bandwidthKbps","newAttendees","attendeeToStreamDescriptorMap","buildAttendeeToSortedStreamDescriptorMapExcludingSelf","selectionMap","usage","streams","trySelectHighBitrateForAttendees","streamSelectionSet","values","highestQualityStreamFromEachGroupExcludingSelf","maxes","numberOfVideoPublishingParticipantsExcludingSelf","array","numberOfParticipants","numParticipants","attendeeIdForTrack","trackId","streamIdForTrack","info","externalUserIdForTrack","attendeeIdForStreamId","groupIdForStreamId","StreamIdsInSameGroup","streamId1","streamId2","streamIdForSSRC","ssrcId","overrideStreamIdMappings","previous","current","track","entries","ssrc","streamsPausedAtSource","paused","pausedAtSourceIds","map","debug","JSON","stringify","tracks","trackMapping","highAttendees","currentUsage","currentSelectionRef","l","reverse","_attendeeId","sort","stream1","stream2","exports"],"sourceRoot":"","sources":["../../src/videostreamindex/DefaultVideoStreamIndex.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
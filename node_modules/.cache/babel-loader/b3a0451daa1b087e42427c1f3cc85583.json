{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseTask_1 = require(\"./BaseTask\");\n\nconst TaskStatus_1 = require(\"./TaskStatus\");\n/**\n * [[SerialGroupTask]] runs a set of tasks in series. When canceled, it stops\n * any currently running task and runs no further tasks in the group.\n */\n\n\nclass SerialGroupTask extends BaseTask_1.default {\n  constructor(logger, taskName, tasksToRunSerially) {\n    super(logger);\n    this.taskName = taskName;\n    this.tasksToRunSerially = tasksToRunSerially;\n    this.currentTask = null;\n\n    for (const task of tasksToRunSerially) {\n      task.setParent(this);\n    }\n  }\n\n  cancel() {\n    if (this.currentTask) {\n      this.logger.info(`canceling serial group task ${this.name()} subtask ${this.currentTask.name()}`);\n      this.currentTask.cancel();\n    }\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const task of this.tasksToRunSerially) {\n        if (this.getStatus() === TaskStatus_1.default.CANCELED) {\n          this.logAndThrow(`serial group task ${this.name()} was canceled`);\n        }\n\n        try {\n          this.logger.info(`serial group task ${this.name()} running subtask ${task.name()}`);\n          this.currentTask = task;\n          yield task.run();\n          this.logger.info(`serial group task ${this.name()} completed subtask ${task.name()}`);\n        } catch (err) {\n          this.logAndThrow(`serial group task ${this.name()} was canceled due to subtask ` + `${this.currentTask.name()} error: ${err.message}`);\n        } finally {\n          this.currentTask = null;\n        }\n      }\n\n      this.logger.info(`serial group task ${this.name()} completed`);\n    });\n  }\n\n}\n\nexports.default = SerialGroupTask;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAEA;AAEA;;;;;;AAIA,MAAqBA,eAArB,SAA6CC,kBAA7C,CAAqD;EAGnDC,YAAYC,MAAZ,EAAsCC,QAAtC,EAAgEC,kBAAhE,EAA0F;IACxF,MAAMF,MAAN;IADoC;IAA0B;IAFxD,mBAA2B,IAA3B;;IAIN,KAAK,MAAMG,IAAX,IAAmBD,kBAAnB,EAAuC;MACrCC,IAAI,CAACC,SAAL,CAAe,IAAf;IACD;EACF;;EAEDC,MAAM;IACJ,IAAI,KAAKC,WAAT,EAAsB;MACpB,KAAKN,MAAL,CAAYO,IAAZ,CACE,+BAA+B,KAAKC,IAAL,EAAW,YAAY,KAAKF,WAAL,CAAiBE,IAAjB,EAAuB,EAD/E;MAGA,KAAKF,WAAL,CAAiBD,MAAjB;IACD;EACF;;EAEKI,GAAG;;MACP,KAAK,MAAMN,IAAX,IAAmB,KAAKD,kBAAxB,EAA4C;QAC1C,IAAI,KAAKQ,SAAL,OAAqBC,qBAAWC,QAApC,EAA8C;UAC5C,KAAKC,WAAL,CAAiB,qBAAqB,KAAKL,IAAL,EAAW,eAAjD;QACD;;QACD,IAAI;UACF,KAAKR,MAAL,CAAYO,IAAZ,CAAiB,qBAAqB,KAAKC,IAAL,EAAW,oBAAoBL,IAAI,CAACK,IAAL,EAAW,EAAhF;UACA,KAAKF,WAAL,GAAmBH,IAAnB;UACA,MAAMA,IAAI,CAACM,GAAL,EAAN;UACA,KAAKT,MAAL,CAAYO,IAAZ,CAAiB,qBAAqB,KAAKC,IAAL,EAAW,sBAAsBL,IAAI,CAACK,IAAL,EAAW,EAAlF;QACD,CALD,CAKE,OAAOM,GAAP,EAAY;UACZ,KAAKD,WAAL,CACE,qBAAqB,KAAKL,IAAL,EAAW,+BAAhC,GACE,GAAG,KAAKF,WAAL,CAAiBE,IAAjB,EAAuB,WAAWM,GAAG,CAACC,OAAO,EAFpD;QAID,CAVD,SAUU;UACR,KAAKT,WAAL,GAAmB,IAAnB;QACD;MACF;;MACD,KAAKN,MAAL,CAAYO,IAAZ,CAAiB,qBAAqB,KAAKC,IAAL,EAAW,YAAjD;IACD;EAAA;;AAvCkD;;AAArDQ","names":["SerialGroupTask","BaseTask_1","constructor","logger","taskName","tasksToRunSerially","task","setParent","cancel","currentTask","info","name","run","getStatus","TaskStatus_1","CANCELED","logAndThrow","err","message","exports"],"sourceRoot":"","sources":["../../src/task/SerialGroupTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
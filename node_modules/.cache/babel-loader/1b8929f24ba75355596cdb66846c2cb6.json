{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SessionStateControllerAction_1 = require(\"./SessionStateControllerAction\");\n\nconst SessionStateControllerDeferPriority_1 = require(\"./SessionStateControllerDeferPriority\");\n\nconst SessionStateControllerState_1 = require(\"./SessionStateControllerState\");\n\nconst SessionStateControllerTransitionResult_1 = require(\"./SessionStateControllerTransitionResult\");\n\nclass DefaultSessionStateController {\n  constructor(logger) {\n    this.logger = logger;\n    this.currentState = SessionStateControllerState_1.SessionStateControllerState.NotConnected;\n    this.deferredAction = null;\n    this.deferredWork = null;\n  }\n\n  perform(action, work) {\n    const state = this.currentState;\n\n    if (state === SessionStateControllerState_1.SessionStateControllerState.NotConnected && action === SessionStateControllerAction_1.SessionStateControllerAction.Connect) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting && action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting && action === SessionStateControllerAction_1.SessionStateControllerAction.FinishConnecting) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Disconnect) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Reconnect) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Update) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Updating, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating && action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating && action === SessionStateControllerAction_1.SessionStateControllerAction.FinishUpdating) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Disconnecting && action === SessionStateControllerAction_1.SessionStateControllerAction.FinishDisconnecting) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.NotConnected, action);\n    } else if (this.canDefer(action)) {\n      this.logger.info(`deferring transition from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);\n      this.deferAction(action, work);\n      return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.DeferredTransition;\n    } else {\n      this.logger.warn(`no transition found from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);\n      return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.NoTransitionAvailable;\n    }\n\n    try {\n      work();\n    } catch (e) {\n      this.logger.error(`error during state ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with action ${SessionStateControllerAction_1.SessionStateControllerAction[action]}: ${e}`);\n      this.logger.info(`rolling back transition to ${SessionStateControllerState_1.SessionStateControllerState[state]}`);\n      this.currentState = state;\n      return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.TransitionFailed;\n    }\n\n    this.performDeferredAction();\n    return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned;\n  }\n\n  state() {\n    return this.currentState;\n  }\n\n  transition(newState, action) {\n    this.logger.info(`transitioning from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} to ${SessionStateControllerState_1.SessionStateControllerState[newState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);\n    this.currentState = newState;\n  }\n\n  deferPriority(action) {\n    switch (action) {\n      case SessionStateControllerAction_1.SessionStateControllerAction.Disconnect:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.VeryHigh;\n\n      case SessionStateControllerAction_1.SessionStateControllerAction.Fail:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.High;\n\n      case SessionStateControllerAction_1.SessionStateControllerAction.Reconnect:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Medium;\n\n      case SessionStateControllerAction_1.SessionStateControllerAction.Update:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Low;\n\n      default:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer;\n    }\n  }\n\n  deferAction(action, work) {\n    if (this.deferredAction !== null && this.deferPriority(this.deferredAction) > this.deferPriority(action)) {\n      return;\n    }\n\n    this.deferredAction = action;\n    this.deferredWork = work;\n  }\n\n  canDefer(action) {\n    return this.deferPriority(action) !== SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer && (this.currentState === SessionStateControllerState_1.SessionStateControllerState.Connecting || this.currentState === SessionStateControllerState_1.SessionStateControllerState.Updating);\n  }\n\n  performDeferredAction() {\n    if (!this.deferredAction) {\n      return;\n    }\n\n    const deferredAction = this.deferredAction;\n    const deferredWork = this.deferredWork;\n    this.deferredAction = null;\n    this.deferredWork = null;\n    this.logger.info(`performing deferred action ${SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]}`);\n\n    if (this.perform(deferredAction, deferredWork) !== SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned) {\n      this.logger.info(`unable to perform deferred action ${SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]} in state ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]}`);\n    }\n  }\n\n}\n\nexports.default = DefaultSessionStateController;","map":{"version":3,"mappings":"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","names":["DefaultSessionStateController","constructor","logger","SessionStateControllerState_1","NotConnected","perform","action","work","state","currentState","SessionStateControllerAction_1","Connect","transition","Connecting","Fail","Disconnecting","FinishConnecting","Connected","Disconnect","Reconnect","Update","Updating","FinishUpdating","FinishDisconnecting","canDefer","info","deferAction","SessionStateControllerTransitionResult_1","DeferredTransition","warn","NoTransitionAvailable","e","error","TransitionFailed","performDeferredAction","Transitioned","newState","deferPriority","SessionStateControllerDeferPriority_1","VeryHigh","High","Medium","Low","DoNotDefer","deferredAction","deferredWork","exports"],"sourceRoot":"","sources":["../../src/sessionstatecontroller/DefaultSessionStateController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
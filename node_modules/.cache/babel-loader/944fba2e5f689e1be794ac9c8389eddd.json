{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultVideoCaptureAndEncodeParameter_1 = require(\"../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter\");\n/** NScaleVideoUplinkBandwidthPolicy implements capture and encode\n *  parameters that are nearly equivalent to those chosen by the\n *  traditional native clients, except for a modification to\n *  maxBandwidthKbps and scaleResolutionDownBy described below. */\n\n\nclass NScaleVideoUplinkBandwidthPolicy {\n  constructor(selfAttendeeId) {\n    let scaleResolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let logger = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    let browserBehavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n    this.selfAttendeeId = selfAttendeeId;\n    this.scaleResolution = scaleResolution;\n    this.logger = logger;\n    this.browserBehavior = browserBehavior;\n    this.numParticipants = 0;\n    this.idealMaxBandwidthKbps = 1400;\n    this.hasBandwidthPriority = false;\n    this.encodingParamMap = new Map();\n    this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n    this.parametersInEffect = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n    this.encodingParamMap.set(NScaleVideoUplinkBandwidthPolicy.encodingMapKey, {\n      maxBitrate: 0\n    });\n  }\n\n  updateConnectionMetric(_metrics) {\n    return;\n  }\n\n  chooseMediaTrackConstraints() {\n    return {};\n  }\n\n  chooseEncodingParameters() {\n    return new Map();\n  }\n\n  updateIndex(videoIndex) {\n    let hasLocalVideo = true;\n    let scale = 1;\n\n    if (this.transceiverController) {\n      hasLocalVideo = this.transceiverController.hasVideoInput();\n    } // the +1 for self is assuming that we intend to send video, since\n    // the context here is VideoUplinkBandwidthPolicy\n\n\n    this.numParticipants = videoIndex.numberOfVideoPublishingParticipantsExcludingSelf(this.selfAttendeeId) + (hasLocalVideo ? 1 : 0);\n\n    if (this.transceiverController) {\n      const settings = this.getStreamCaptureSetting();\n\n      if (settings) {\n        const encodingParams = this.calculateEncodingParameters(settings);\n        scale = encodingParams.scaleResolutionDownBy;\n      }\n    }\n\n    this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(this.captureWidth(), this.captureHeight(), this.captureFrameRate(), this.maxBandwidthKbps(), false, scale);\n  }\n\n  wantsResubscribe() {\n    return !this.parametersInEffect.equal(this.optimalParameters);\n  }\n\n  chooseCaptureAndEncodeParameters() {\n    this.parametersInEffect = this.optimalParameters.clone();\n    return this.parametersInEffect.clone();\n  }\n\n  captureWidth() {\n    let width = 640;\n\n    if (this.numParticipants > 4) {\n      width = 320;\n    }\n\n    return width;\n  }\n\n  captureHeight() {\n    let height = 384;\n\n    if (this.numParticipants > 4) {\n      height = 192;\n    }\n\n    return height;\n  }\n\n  captureFrameRate() {\n    return 15;\n  }\n\n  maxBandwidthKbps() {\n    if (this.hasBandwidthPriority) {\n      return Math.trunc(this.idealMaxBandwidthKbps);\n    }\n\n    let rate = 0;\n\n    if (this.numParticipants <= 2) {\n      rate = this.idealMaxBandwidthKbps;\n    } else if (this.numParticipants <= 4) {\n      rate = this.idealMaxBandwidthKbps * 2 / 3;\n    } else {\n      rate = (544 / 11 + 14880 / (11 * this.numParticipants)) / 600 * this.idealMaxBandwidthKbps;\n    }\n\n    return Math.trunc(rate);\n  }\n\n  setIdealMaxBandwidthKbps(idealMaxBandwidthKbps) {\n    this.idealMaxBandwidthKbps = idealMaxBandwidthKbps;\n  }\n\n  setHasBandwidthPriority(hasBandwidthPriority) {\n    this.hasBandwidthPriority = hasBandwidthPriority;\n  }\n\n  setTransceiverController(transceiverController) {\n    this.transceiverController = transceiverController;\n  }\n\n  updateTransceiverController() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const settings = this.getStreamCaptureSetting();\n\n      if (!settings) {\n        return;\n      }\n\n      const encodingParams = this.calculateEncodingParameters(settings);\n\n      if (this.shouldUpdateEndcodingParameters(encodingParams)) {\n        this.encodingParamMap.set(NScaleVideoUplinkBandwidthPolicy.encodingMapKey, encodingParams);\n        this.transceiverController.setEncodingParameters(this.encodingParamMap);\n      }\n    });\n  }\n\n  shouldUpdateEndcodingParameters(encoding) {\n    var _a, _b;\n\n    const transceiverEncoding = (_b = (_a = this.transceiverController.localVideoTransceiver().sender.getParameters()) === null || _a === void 0 ? void 0 : _a.encodings) === null || _b === void 0 ? void 0 : _b[0];\n    /* istanbul ignore next: transceiverEncoding?.scaleResolutionDownBy cannot be covered */\n\n    return encoding.maxBitrate !== (transceiverEncoding === null || transceiverEncoding === void 0 ? void 0 : transceiverEncoding.maxBitrate) || encoding.scaleResolutionDownBy !== (transceiverEncoding === null || transceiverEncoding === void 0 ? void 0 : transceiverEncoding.scaleResolutionDownBy);\n  }\n\n  calculateEncodingParameters(setting) {\n    var _a, _b;\n\n    const maxBitrate = this.maxBandwidthKbps() * 1000;\n    let scale = 1;\n\n    if (setting.height !== undefined && setting.width !== undefined && this.scaleResolution && !this.hasBandwidthPriority && this.numParticipants > 2) {\n      let targetHeight = NScaleVideoUplinkBandwidthPolicy.targetHeightArray[Math.min(this.numParticipants, NScaleVideoUplinkBandwidthPolicy.targetHeightArray.length - 1)]; //Workaround for issue https://github.com/aws/amazon-chime-sdk-js/issues/2002\n\n      if (targetHeight === 480 && ((_a = this.browserBehavior) === null || _a === void 0 ? void 0 : _a.disable480pResolutionScaleDown())) {\n        targetHeight = 360;\n      }\n\n      scale = Math.max(Math.min(setting.height, setting.width) / targetHeight, 1);\n      (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info(`Resolution scale factor is ${scale} for capture resolution ${setting.width}x${setting.height}. New dimension is ${setting.width / scale}x${setting.height / scale}`);\n    }\n\n    return {\n      scaleResolutionDownBy: scale,\n      maxBitrate: maxBitrate\n    };\n  }\n\n  getStreamCaptureSetting() {\n    var _a, _b, _c, _d;\n\n    return (_d = (_c = (_b = (_a = this.transceiverController) === null || _a === void 0 ? void 0 : _a.localVideoTransceiver()) === null || _b === void 0 ? void 0 : _b.sender) === null || _c === void 0 ? void 0 : _c.track) === null || _d === void 0 ? void 0 : _d.getSettings();\n  }\n\n}\n\nexports.default = NScaleVideoUplinkBandwidthPolicy;\nNScaleVideoUplinkBandwidthPolicy.encodingMapKey = 'video'; // 0, 1, 2 have dummy value as we keep the original resolution if we have less than 2 videos.\n\nNScaleVideoUplinkBandwidthPolicy.targetHeightArray = [0, 0, 0, 540, 540, 480, 480, 480, 480, 360, 360, 360, 360, 270, 270, 270, 270, 180, 180, 180, 180, 180, 180, 180, 180, 180];","map":{"version":3,"mappings":"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","names":["NScaleVideoUplinkBandwidthPolicy","constructor","selfAttendeeId","scaleResolution","logger","undefined","browserBehavior","Map","optimalParameters","DefaultVideoCaptureAndEncodeParameter_1","parametersInEffect","encodingParamMap","set","encodingMapKey","maxBitrate","updateConnectionMetric","_metrics","chooseMediaTrackConstraints","chooseEncodingParameters","updateIndex","videoIndex","hasLocalVideo","scale","transceiverController","hasVideoInput","numParticipants","numberOfVideoPublishingParticipantsExcludingSelf","settings","getStreamCaptureSetting","encodingParams","calculateEncodingParameters","scaleResolutionDownBy","captureWidth","captureHeight","captureFrameRate","maxBandwidthKbps","wantsResubscribe","equal","chooseCaptureAndEncodeParameters","clone","width","height","hasBandwidthPriority","Math","trunc","idealMaxBandwidthKbps","rate","setIdealMaxBandwidthKbps","setHasBandwidthPriority","setTransceiverController","updateTransceiverController","shouldUpdateEndcodingParameters","setEncodingParameters","encoding","transceiverEncoding","localVideoTransceiver","sender","getParameters","_a","encodings","_b","setting","targetHeight","targetHeightArray","min","length","disable480pResolutionScaleDown","max","info","_c","track","_d","getSettings","exports"],"sourceRoot":"","sources":["../../src/videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultActiveSpeakerDetector_1 = require(\"../activespeakerdetector/DefaultActiveSpeakerDetector\");\n\nconst DefaultAudioMixController_1 = require(\"../audiomixcontroller/DefaultAudioMixController\");\n\nconst AudioProfile_1 = require(\"../audioprofile/AudioProfile\");\n\nconst DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\n\nconst ConnectionHealthData_1 = require(\"../connectionhealthpolicy/ConnectionHealthData\");\n\nconst SignalingAndMetricsConnectionMonitor_1 = require(\"../connectionmonitor/SignalingAndMetricsConnectionMonitor\");\n\nconst DefaultEventController_1 = require(\"../eventcontroller/DefaultEventController\");\n\nconst MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst MeetingSessionVideoAvailability_1 = require(\"../meetingsession/MeetingSessionVideoAvailability\");\n\nconst DefaultPingPong_1 = require(\"../pingpong/DefaultPingPong\");\n\nconst DefaultRealtimeController_1 = require(\"../realtimecontroller/DefaultRealtimeController\");\n\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\n\nconst DefaultSessionStateController_1 = require(\"../sessionstatecontroller/DefaultSessionStateController\");\n\nconst SessionStateControllerAction_1 = require(\"../sessionstatecontroller/SessionStateControllerAction\");\n\nconst SessionStateControllerState_1 = require(\"../sessionstatecontroller/SessionStateControllerState\");\n\nconst SessionStateControllerTransitionResult_1 = require(\"../sessionstatecontroller/SessionStateControllerTransitionResult\");\n\nconst DefaultSignalingClient_1 = require(\"../signalingclient/DefaultSignalingClient\");\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst SignalingClientVideoSubscriptionConfiguration_1 = require(\"../signalingclient/SignalingClientVideoSubscriptionConfiguration\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst DefaultStatsCollector_1 = require(\"../statscollector/DefaultStatsCollector\");\n\nconst AttachMediaInputTask_1 = require(\"../task/AttachMediaInputTask\");\n\nconst CleanRestartedSessionTask_1 = require(\"../task/CleanRestartedSessionTask\");\n\nconst CleanStoppedSessionTask_1 = require(\"../task/CleanStoppedSessionTask\");\n\nconst CreatePeerConnectionTask_1 = require(\"../task/CreatePeerConnectionTask\");\n\nconst CreateSDPTask_1 = require(\"../task/CreateSDPTask\");\n\nconst FinishGatheringICECandidatesTask_1 = require(\"../task/FinishGatheringICECandidatesTask\");\n\nconst JoinAndReceiveIndexTask_1 = require(\"../task/JoinAndReceiveIndexTask\");\n\nconst LeaveAndReceiveLeaveAckTask_1 = require(\"../task/LeaveAndReceiveLeaveAckTask\");\n\nconst ListenForVolumeIndicatorsTask_1 = require(\"../task/ListenForVolumeIndicatorsTask\");\n\nconst MonitorTask_1 = require(\"../task/MonitorTask\");\n\nconst OpenSignalingConnectionTask_1 = require(\"../task/OpenSignalingConnectionTask\");\n\nconst ParallelGroupTask_1 = require(\"../task/ParallelGroupTask\");\n\nconst PromoteToPrimaryMeetingTask_1 = require(\"../task/PromoteToPrimaryMeetingTask\");\n\nconst ReceiveAudioInputTask_1 = require(\"../task/ReceiveAudioInputTask\");\n\nconst ReceiveTURNCredentialsTask_1 = require(\"../task/ReceiveTURNCredentialsTask\");\n\nconst ReceiveVideoInputTask_1 = require(\"../task/ReceiveVideoInputTask\");\n\nconst ReceiveVideoStreamIndexTask_1 = require(\"../task/ReceiveVideoStreamIndexTask\");\n\nconst ReleaseMediaStreamsTask_1 = require(\"../task/ReleaseMediaStreamsTask\");\n\nconst SendAndReceiveDataMessagesTask_1 = require(\"../task/SendAndReceiveDataMessagesTask\");\n\nconst SerialGroupTask_1 = require(\"../task/SerialGroupTask\");\n\nconst SetLocalDescriptionTask_1 = require(\"../task/SetLocalDescriptionTask\");\n\nconst SetRemoteDescriptionTask_1 = require(\"../task/SetRemoteDescriptionTask\");\n\nconst SubscribeAndReceiveSubscribeAckTask_1 = require(\"../task/SubscribeAndReceiveSubscribeAckTask\");\n\nconst TimeoutTask_1 = require(\"../task/TimeoutTask\");\n\nconst WaitForAttendeePresenceTask_1 = require(\"../task/WaitForAttendeePresenceTask\");\n\nconst DefaultTransceiverController_1 = require(\"../transceivercontroller/DefaultTransceiverController\");\n\nconst SimulcastTransceiverController_1 = require(\"../transceivercontroller/SimulcastTransceiverController\");\n\nconst VideoOnlyTransceiverController_1 = require(\"../transceivercontroller/VideoOnlyTransceiverController\");\n\nconst Types_1 = require(\"../utils/Types\");\n\nconst DefaultVideoCaptureAndEncodeParameter_1 = require(\"../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter\");\n\nconst AllHighestVideoBandwidthPolicy_1 = require(\"../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy\");\n\nconst VideoAdaptiveProbePolicy_1 = require(\"../videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy\");\n\nconst DefaultVideoStreamIdSet_1 = require(\"../videostreamidset/DefaultVideoStreamIdSet\");\n\nconst DefaultVideoStreamIndex_1 = require(\"../videostreamindex/DefaultVideoStreamIndex\");\n\nconst SimulcastVideoStreamIndex_1 = require(\"../videostreamindex/SimulcastVideoStreamIndex\");\n\nconst DefaultVideoTileController_1 = require(\"../videotilecontroller/DefaultVideoTileController\");\n\nconst DefaultVideoTileFactory_1 = require(\"../videotilefactory/DefaultVideoTileFactory\");\n\nconst DefaultSimulcastUplinkPolicy_1 = require(\"../videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy\");\n\nconst NScaleVideoUplinkBandwidthPolicy_1 = require(\"../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy\");\n\nconst DefaultVolumeIndicatorAdapter_1 = require(\"../volumeindicatoradapter/DefaultVolumeIndicatorAdapter\");\n\nconst AudioVideoControllerState_1 = require(\"./AudioVideoControllerState\");\n\nclass DefaultAudioVideoController {\n  constructor(configuration, logger, webSocketAdapter, mediaStreamBroker, reconnectController, eventReporter) {\n    this._audioProfile = new AudioProfile_1.default();\n    this.connectionHealthData = new ConnectionHealthData_1.default();\n    this.observerQueue = new Set();\n    this.meetingSessionContext = new AudioVideoControllerState_1.default();\n    this.enableSimulcast = false;\n    this.useUpdateTransceiverControllerForUplink = false;\n    this.totalRetryCount = 0;\n    this.startAudioVideoTimestamp = 0;\n    this.mayNeedRenegotiationForSimulcastLayerChange = false; // Stored solely to trigger demotion callback on disconnection (expected behavior).\n    //\n    // We otherwise intentionally do not use this for any other behavior to avoid the complexity\n    // of the added state.\n\n    this.promotedToPrimaryMeeting = false; // `connectWithPromises`, `connectWithTasks`, and `actionUpdateWithRenegotiation` all\n    // contains a significant portion of asynchronous tasks, so we need to explicitly defer\n    // any task operation which may be performed on the event queue that may modify\n    // mutable state in `MeetingSessionContext`, as this mutable state needs to be consistent over the course of the update.\n    //\n    // Currently this includes\n    // * `ReceiveVideoStreamIndexTask` which updates `videosToReceive` and `videoCaptureAndEncodeParameter`\n    // * `MonitorTask` which updates `videosToReceive`\n\n    this.receiveIndexTask = undefined;\n    this.monitorTask = undefined;\n    this.destroyed = false;\n    /** @internal */\n\n    this.usePromises = true;\n    this._logger = logger;\n    this.sessionStateController = new DefaultSessionStateController_1.default(this._logger);\n    this._configuration = configuration;\n    this.enableSimulcast = configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers && new DefaultBrowserBehavior_1.default().hasChromiumWebRTC();\n    this._webSocketAdapter = webSocketAdapter;\n    this._realtimeController = new DefaultRealtimeController_1.default();\n\n    this._realtimeController.realtimeSetLocalAttendeeId(configuration.credentials.attendeeId, configuration.credentials.externalUserId);\n\n    this._mediaStreamBroker = mediaStreamBroker;\n    this._reconnectController = reconnectController;\n    this._videoTileController = new DefaultVideoTileController_1.default(new DefaultVideoTileFactory_1.default(), this, this._logger);\n    this._audioMixController = new DefaultAudioMixController_1.default(this._logger);\n    this.meetingSessionContext.logger = this._logger;\n    this._eventController = new DefaultEventController_1.default(this, eventReporter);\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.observerQueue.clear();\n      this.destroyed = true;\n    });\n  }\n\n  get configuration() {\n    return this._configuration;\n  }\n\n  get realtimeController() {\n    return this._realtimeController;\n  }\n\n  get activeSpeakerDetector() {\n    // Lazy init.\n    if (!this._activeSpeakerDetector) {\n      this._activeSpeakerDetector = new DefaultActiveSpeakerDetector_1.default(this._realtimeController, this._configuration.credentials.attendeeId, this.handleHasBandwidthPriority.bind(this));\n    }\n\n    return this._activeSpeakerDetector;\n  }\n\n  get videoTileController() {\n    return this._videoTileController;\n  }\n\n  get audioMixController() {\n    return this._audioMixController;\n  }\n\n  get eventController() {\n    return this._eventController;\n  }\n\n  get logger() {\n    return this._logger;\n  }\n\n  get rtcPeerConnection() {\n    return this.meetingSessionContext && this.meetingSessionContext.peer || null;\n  }\n\n  get mediaStreamBroker() {\n    return this._mediaStreamBroker;\n  }\n\n  getRTCPeerConnectionStats(selector) {\n    if (!this.rtcPeerConnection) {\n      return null;\n    }\n\n    return this.rtcPeerConnection.getStats(selector);\n  }\n\n  setAudioProfile(audioProfile) {\n    this._audioProfile = audioProfile;\n  }\n\n  addObserver(observer) {\n    this.logger.info('adding meeting observer');\n    this.observerQueue.add(observer);\n  }\n\n  removeObserver(observer) {\n    this.logger.info('removing meeting observer');\n    this.observerQueue.delete(observer);\n  }\n\n  forEachObserver(observerFunc) {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler_1.default.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  initSignalingClient() {\n    if (this.meetingSessionContext.signalingClient) {\n      return;\n    }\n\n    this.connectionHealthData.reset();\n    this.meetingSessionContext = new AudioVideoControllerState_1.default();\n    this.meetingSessionContext.logger = this.logger;\n    this.meetingSessionContext.eventController = this.eventController;\n    this.meetingSessionContext.browserBehavior = new DefaultBrowserBehavior_1.default();\n    this.meetingSessionContext.meetingSessionConfiguration = this.configuration;\n    this.meetingSessionContext.signalingClient = new DefaultSignalingClient_1.default(this._webSocketAdapter, this.logger);\n  }\n\n  uninstallPreStartObserver() {\n    this.meetingSessionContext.signalingClient.removeObserver(this.preStartObserver);\n    this.preStartObserver = undefined;\n  }\n\n  prestart() {\n    this.logger.info('Pre-connecting signaling connection.');\n    return this.createOrReuseSignalingTask().run().then(() => {\n      const handleClosed = () => __awaiter(this, void 0, void 0, function* () {\n        this.logger.info('Early connection closed; discarding signaling task.');\n        this.signalingTask = undefined;\n        this.uninstallPreStartObserver();\n      });\n\n      this.preStartObserver = {\n        handleSignalingClientEvent(event) {\n          if (event.type === SignalingClientEventType_1.default.WebSocketClosed) {\n            handleClosed();\n          }\n        }\n\n      };\n      this.meetingSessionContext.signalingClient.registerObserver(this.preStartObserver);\n    }).catch(e => {\n      this.logger.error(`Signaling task pre-start failed: ${e}`); // Clean up just in case a subsequent attempt will succeed.\n\n      this.signalingTask = undefined;\n    });\n  }\n\n  start(options) {\n    this.startReturningPromise(options).then(() => {\n      this.logger.info('start completed');\n    }) // Just-in-case error handling.\n    .catch(\n    /* istanbul ignore next */\n    e => {\n      this.logger.error(`start failed: ${e}`);\n    });\n  } // This is public (albeit marked internal) for tests only.\n\n  /* @internal */\n\n\n  startReturningPromise(options) {\n    if ((options === null || options === void 0 ? void 0 : options.signalingOnly) === true) {\n      return this.prestart();\n    } // For side-effects: lazy getter.\n\n\n    this.activeSpeakerDetector;\n    return new Promise((resolve, reject) => {\n      this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, () => {\n        this.actionConnect(false).then(resolve).catch(reject);\n      });\n    });\n  } // @ts-ignore\n\n\n  connectWithPromises(needsToWaitForAttendeePresence) {\n    const context = this.meetingSessionContext; // Syntactic sugar.\n\n    const timeout = (timeoutMs, task) => {\n      return new TimeoutTask_1.default(this.logger, task, timeoutMs);\n    }; // First layer.\n\n\n    this.monitorTask = new MonitorTask_1.default(context, this.configuration.connectionHealthPolicyConfiguration, this.connectionHealthData);\n    const monitor = this.monitorTask.once(); // Second layer.\n\n    const receiveAudioInput = new ReceiveAudioInputTask_1.default(context).once();\n    this.receiveIndexTask = new ReceiveVideoStreamIndexTask_1.default(context); // See declaration (unpaused in actionFinishConnecting)\n\n    this.monitorTask.pauseResubscribeCheck();\n    this.receiveIndexTask.pauseIngestion();\n    const signaling = new SerialGroupTask_1.default(this.logger, 'Signaling', [// If pre-connecting, this will be an existing task that has already been run.\n    this.createOrReuseSignalingTask(), new ListenForVolumeIndicatorsTask_1.default(context), new SendAndReceiveDataMessagesTask_1.default(context), new JoinAndReceiveIndexTask_1.default(context), new ReceiveTURNCredentialsTask_1.default(context), this.receiveIndexTask]).once(); // Third layer.\n\n    const createPeerConnection = new CreatePeerConnectionTask_1.default(context).once(signaling);\n    const attachMediaInput = new AttachMediaInputTask_1.default(context).once(createPeerConnection, receiveAudioInput); // Mostly serial section -- kept as promises to allow for finer-grained breakdown.\n\n    const createSDP = new CreateSDPTask_1.default(context).once(attachMediaInput);\n    const setLocalDescription = new SetLocalDescriptionTask_1.default(context).once(createSDP);\n    const ice = new FinishGatheringICECandidatesTask_1.default(context).once(setLocalDescription);\n    const subscribeAck = new SubscribeAndReceiveSubscribeAckTask_1.default(context).once(ice); // The ending is a delicate time: we need the connection as a whole to have a timeout,\n    // and for the attendee presence timer to not start ticking until after the subscribe/ack.\n\n    return new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStart'), [monitor, timeout(this.configuration.connectionTimeoutMs, new SerialGroupTask_1.default(this.logger, 'Peer', [// The order of these two matters. If canceled, the first one that's still running\n    // will contribute any special rejection, and we don't want that to be \"attendee not found\"!\n    subscribeAck, needsToWaitForAttendeePresence ? new TimeoutTask_1.default(this.logger, new ParallelGroupTask_1.default(this.logger, 'FinalizeConnection', [new WaitForAttendeePresenceTask_1.default(context), new SetRemoteDescriptionTask_1.default(context)]), this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs) :\n    /* istanbul ignore next */\n    new SetRemoteDescriptionTask_1.default(context)]))]);\n  }\n\n  connectWithTasks(needsToWaitForAttendeePresence) {\n    this.receiveIndexTask = new ReceiveVideoStreamIndexTask_1.default(this.meetingSessionContext);\n    this.monitorTask = new MonitorTask_1.default(this.meetingSessionContext, this.configuration.connectionHealthPolicyConfiguration, this.connectionHealthData); // See declaration (unpaused in actionFinishConnecting)\n\n    this.receiveIndexTask.pauseIngestion();\n    this.monitorTask.pauseResubscribeCheck();\n    return new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStart'), [this.monitorTask, new ReceiveAudioInputTask_1.default(this.meetingSessionContext), new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [new SerialGroupTask_1.default(this.logger, 'Signaling', [new OpenSignalingConnectionTask_1.default(this.meetingSessionContext), new ListenForVolumeIndicatorsTask_1.default(this.meetingSessionContext), new SendAndReceiveDataMessagesTask_1.default(this.meetingSessionContext), new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext), new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext), this.receiveIndexTask]), new SerialGroupTask_1.default(this.logger, 'Peer', [new CreatePeerConnectionTask_1.default(this.meetingSessionContext), new AttachMediaInputTask_1.default(this.meetingSessionContext), new CreateSDPTask_1.default(this.meetingSessionContext), new SetLocalDescriptionTask_1.default(this.meetingSessionContext), new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext), new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext), needsToWaitForAttendeePresence ? new TimeoutTask_1.default(this.logger, new ParallelGroupTask_1.default(this.logger, 'FinalizeConnection', [new WaitForAttendeePresenceTask_1.default(this.meetingSessionContext), new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)]), this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs) :\n    /* istanbul ignore next */\n    new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)])]), this.configuration.connectionTimeoutMs)]);\n  }\n\n  actionConnect(reconnecting) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.initSignalingClient(); // We no longer need to watch for the early connection dropping; we're back where\n      // we otherwise would have been had we not pre-started.\n\n      this.uninstallPreStartObserver();\n      this.meetingSessionContext.mediaStreamBroker = this._mediaStreamBroker;\n      this.meetingSessionContext.realtimeController = this._realtimeController;\n      this.meetingSessionContext.audioMixController = this._audioMixController;\n      this.meetingSessionContext.audioVideoController = this;\n      const useAudioConnection = !!this.configuration.urls.audioHostURL;\n\n      if (!useAudioConnection) {\n        this.logger.info(`Using video only transceiver controller`);\n        this.meetingSessionContext.transceiverController = new VideoOnlyTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n      } else if (this.enableSimulcast) {\n        this.logger.info(`Using transceiver controller with simulcast support`);\n        this.meetingSessionContext.transceiverController = new SimulcastTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n      } else {\n        this.logger.info(`Using default transceiver controller`);\n        this.meetingSessionContext.transceiverController = new DefaultTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n      }\n\n      this.meetingSessionContext.volumeIndicatorAdapter = new DefaultVolumeIndicatorAdapter_1.default(this.logger, this._realtimeController, DefaultAudioVideoController.MIN_VOLUME_DECIBELS, DefaultAudioVideoController.MAX_VOLUME_DECIBELS, this.configuration.credentials.attendeeId);\n      this.meetingSessionContext.videoTileController = this._videoTileController;\n      this.meetingSessionContext.videoDownlinkBandwidthPolicy = this.configuration.videoDownlinkBandwidthPolicy;\n      this.meetingSessionContext.videoUplinkBandwidthPolicy = this.configuration.videoUplinkBandwidthPolicy;\n      this.meetingSessionContext.enableSimulcast = this.enableSimulcast;\n\n      if (this.enableSimulcast) {\n        let simulcastPolicy = this.meetingSessionContext.videoUplinkBandwidthPolicy;\n\n        if (!simulcastPolicy) {\n          simulcastPolicy = new DefaultSimulcastUplinkPolicy_1.default(this.configuration.credentials.attendeeId, this.meetingSessionContext.logger);\n          this.meetingSessionContext.videoUplinkBandwidthPolicy = simulcastPolicy;\n        }\n\n        simulcastPolicy.addObserver(this);\n\n        if (!this.meetingSessionContext.videoDownlinkBandwidthPolicy) {\n          this.meetingSessionContext.videoDownlinkBandwidthPolicy = new VideoAdaptiveProbePolicy_1.default(this.meetingSessionContext.logger);\n        }\n\n        this.meetingSessionContext.videoStreamIndex = new SimulcastVideoStreamIndex_1.default(this.logger);\n      } else {\n        this.meetingSessionContext.enableSimulcast = false;\n        this.meetingSessionContext.videoStreamIndex = new DefaultVideoStreamIndex_1.default(this.logger);\n\n        if (!this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n          this.meetingSessionContext.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy_1.default(this.configuration.credentials.attendeeId, !this.meetingSessionContext.browserBehavior.disableResolutionScaleDown(), this.meetingSessionContext.logger, this.meetingSessionContext.browserBehavior);\n        }\n\n        if (!this.meetingSessionContext.videoDownlinkBandwidthPolicy) {\n          this.meetingSessionContext.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);\n        }\n\n        if (this.meetingSessionContext.videoUplinkBandwidthPolicy.setTransceiverController && this.meetingSessionContext.videoUplinkBandwidthPolicy.updateTransceiverController && this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n          this.useUpdateTransceiverControllerForUplink = true;\n          this.meetingSessionContext.videoUplinkBandwidthPolicy.setTransceiverController(this.meetingSessionContext.transceiverController);\n        }\n\n        this.meetingSessionContext.audioProfile = this._audioProfile;\n      }\n\n      if (this.meetingSessionContext.videoUplinkBandwidthPolicy && this.maxUplinkBandwidthKbps) {\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.setIdealMaxBandwidthKbps(this.maxUplinkBandwidthKbps);\n      }\n\n      if (this.meetingSessionContext.videoDownlinkBandwidthPolicy.bindToTileController) {\n        this.meetingSessionContext.videoDownlinkBandwidthPolicy.bindToTileController(this._videoTileController);\n      }\n\n      this.meetingSessionContext.lastKnownVideoAvailability = new MeetingSessionVideoAvailability_1.default();\n      this.meetingSessionContext.videoCaptureAndEncodeParameter = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n      this.meetingSessionContext.videosToReceive = new DefaultVideoStreamIdSet_1.default();\n      this.meetingSessionContext.videosPaused = new DefaultVideoStreamIdSet_1.default();\n      this.meetingSessionContext.statsCollector = new DefaultStatsCollector_1.default(this, this.logger, this.meetingSessionContext.browserBehavior);\n      this.meetingSessionContext.connectionMonitor = new SignalingAndMetricsConnectionMonitor_1.default(this, this._realtimeController, this._videoTileController, this.connectionHealthData, new DefaultPingPong_1.default(this.meetingSessionContext.signalingClient, DefaultAudioVideoController.PING_PONG_INTERVAL_MS, this.logger), this.meetingSessionContext.statsCollector);\n      this.meetingSessionContext.reconnectController = this._reconnectController;\n      this.meetingSessionContext.videoDeviceInformation = {};\n\n      if (!reconnecting) {\n        this.totalRetryCount = 0;\n\n        this._reconnectController.reset();\n\n        this.startAudioVideoTimestamp = Date.now();\n        this.forEachObserver(observer => {\n          Types_1.Maybe.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(false));\n        });\n        /* istanbul ignore else */\n\n        if (this.eventController) {\n          this.eventController.publishEvent('meetingStartRequested');\n        }\n      }\n\n      this.meetingSessionContext.startAudioVideoTimestamp = this.startAudioVideoTimestamp;\n\n      if (this._reconnectController.hasStartedConnectionAttempt()) {\n        // This does not reset the reconnect deadline, but declare it's not the first connection.\n        this._reconnectController.startedConnectionAttempt(false);\n      } else {\n        this._reconnectController.startedConnectionAttempt(true);\n      } // No attendee presence event will be triggered if there is no audio connection.\n      // Waiting for attendee presence is explicitly executed\n      // if `attendeePresenceTimeoutMs` is configured to larger than 0.\n\n\n      const needsToWaitForAttendeePresence = useAudioConnection && this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs > 0;\n      this.logger.info('Needs to wait for attendee presence? ' + needsToWaitForAttendeePresence);\n      let connect;\n\n      if (this.usePromises) {\n        connect = this.connectWithPromises(needsToWaitForAttendeePresence);\n      } else {\n        connect = this.connectWithTasks(needsToWaitForAttendeePresence);\n      } // The rest.\n\n\n      try {\n        yield connect.run();\n        this.connectionHealthData.setConnectionStartTime();\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {\n          /* istanbul ignore else */\n          if (this.eventController) {\n            this.meetingSessionContext.meetingStartDurationMs = Date.now() - this.startAudioVideoTimestamp;\n            this.eventController.publishEvent('meetingStartSucceeded', {\n              maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n              poorConnectionCount: this.meetingSessionContext.poorConnectionCount,\n              retryCount: this.totalRetryCount,\n              signalingOpenDurationMs: this.meetingSessionContext.signalingOpenDurationMs,\n              iceGatheringDurationMs: this.meetingSessionContext.iceGatheringDurationMs,\n              meetingStartDurationMs: this.meetingSessionContext.meetingStartDurationMs\n            });\n          }\n\n          this.meetingSessionContext.startTimeMs = Date.now();\n          this.actionFinishConnecting();\n        });\n      } catch (error) {\n        this.signalingTask = undefined;\n        const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);\n        this.logger.info(`Start failed: ${status} due to error ${error}.`); // I am not able to successfully reach this state in the test suite with mock\n        // websockets -- it always ends up in 'Disconnecting' instead. As such, this\n        // has to be marked for Istanbul.\n\n        /* istanbul ignore if */\n\n        if (this.sessionStateController.state() === SessionStateControllerState_1.default.NotConnected) {\n          // There's no point trying to 'disconnect', because we're not connected.\n          // The session state controller will bail.\n          this.logger.info('Start failed and not connected. Not cleaning up.');\n          return;\n        }\n\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, () => __awaiter(this, void 0, void 0, function* () {\n          yield this.actionDisconnect(status, true, error);\n\n          if (!this.handleMeetingSessionStatus(status, error)) {\n            this.notifyStop(status, error);\n          }\n        }));\n      }\n    });\n  }\n\n  createOrReuseSignalingTask() {\n    if (!this.signalingTask) {\n      this.initSignalingClient();\n      this.signalingTask = new TimeoutTask_1.default(this.logger, new OpenSignalingConnectionTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs).once();\n    }\n\n    return this.signalingTask;\n  }\n\n  actionFinishConnecting() {\n    this.signalingTask = undefined;\n    this.meetingSessionContext.videoDuplexMode = SignalingProtocol_js_1.SdkStreamServiceType.RX;\n\n    if (!this.meetingSessionContext.enableSimulcast) {\n      if (this.useUpdateTransceiverControllerForUplink) {\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.updateTransceiverController();\n      } else {\n        this.enforceBandwidthLimitationForSender(this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0]);\n      }\n    }\n\n    this.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.audioVideoDidStart).map(f => f.bind(observer)());\n    });\n\n    this._reconnectController.reset(); // `receiveIndexTask` needs to be resumed first so it can set `remoteStreamDescriptions`\n\n\n    this.receiveIndexTask.resumeIngestion();\n    this.monitorTask.resumeResubscribeCheck();\n  }\n  /* @internal */\n\n\n  stopReturningPromise() {\n    var _a; // In order to avoid breaking backward compatibility, when only the\n    // signaling connection is established we appear to not be connected.\n    // We handle this by simply disconnecting the websocket directly.\n\n\n    if (this.sessionStateController.state() === SessionStateControllerState_1.default.NotConnected) {\n      // Unfortunately, this does not return a promise.\n      (_a = this.meetingSessionContext.signalingClient) === null || _a === void 0 ? void 0 : _a.closeConnection(); // Clean up any open streams.\n\n      return new ReleaseMediaStreamsTask_1.default(this.meetingSessionContext).run();\n    }\n    /*\n      Stops the current audio video meeting session.\n      The stop method execution is deferred and executed after\n      the current reconnection attempt completes.\n      It disables any further reconnection attempts.\n      Upon completion, AudioVideoObserver's `audioVideoDidStop`\n      callback function is called with `MeetingSessionStatusCode.Left`.\n    */\n\n\n    return new Promise((resolve, reject) => {\n      this.sessionStateController.perform(SessionStateControllerAction_1.default.Disconnect, () => {\n        this._reconnectController.disableReconnect();\n\n        this.logger.info('attendee left meeting, session will not be reconnected');\n        this.actionDisconnect(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.Left), false, null).then(resolve).catch(reject);\n      });\n    });\n  }\n\n  stop() {\n    this.stopReturningPromise();\n  }\n\n  actionDisconnect(status, reconnecting, error) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStop'), [new TimeoutTask_1.default(this.logger, new LeaveAndReceiveLeaveAckTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs)]).run();\n      } catch (stopError) {\n        this.logger.info('fail to stop');\n      }\n\n      try {\n        const subtasks = [new TimeoutTask_1.default(this.logger, new CleanStoppedSessionTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs)];\n\n        if (!reconnecting) {\n          subtasks.push(new ReleaseMediaStreamsTask_1.default(this.meetingSessionContext));\n        }\n\n        yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoClean'), subtasks).run();\n      } catch (cleanError) {\n        /* istanbul ignore next */\n        this.logger.info('fail to clean');\n      }\n\n      this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishDisconnecting, () => {\n        if (!reconnecting) {\n          this.notifyStop(status, error);\n        }\n      });\n    });\n  }\n\n  update() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      needsRenegotiation: true\n    };\n    let needsRenegotiation = options.needsRenegotiation; // Check in case this function has been called before peer connection is set up\n    // since that is necessary to try to update remote videos without the full resubscribe path\n\n    needsRenegotiation || (needsRenegotiation = this.meetingSessionContext.peer === undefined); // If updating local or remote video without negotiation fails, fall back to renegotiation\n\n    needsRenegotiation || (needsRenegotiation = !this.updateRemoteVideosFromLastVideosToReceive());\n    needsRenegotiation || (needsRenegotiation = !this.updateLocalVideoFromPolicy()); // `MeetingSessionContext.lastVideosToReceive` needs to be updated regardless\n\n    this.meetingSessionContext.lastVideosToReceive = this.meetingSessionContext.videosToReceive;\n\n    if (!needsRenegotiation) {\n      this.logger.info('Update request does not require resubscribe'); // Call `actionFinishUpdating` to apply the new encoding parameters that may have been set in `updateLocalVideoFromPolicy`.\n\n      this.actionFinishUpdating();\n      return true; // Skip the subscribe!\n    }\n\n    this.logger.info('Update request requires resubscribe');\n    const result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, () => {\n      this.actionUpdateWithRenegotiation(true);\n    });\n    return result === SessionStateControllerTransitionResult_1.default.Transitioned || result === SessionStateControllerTransitionResult_1.default.DeferredTransition;\n  } // This function will try to use the diff between `this.meetingSessionContext.lastVideosToReceive`\n  // and `this.meetingSessionContext.videosToReceive` to determine if the changes can be accomplished\n  // through `SignalingClient.remoteVideoUpdate` rather then the full subscribe.\n  //\n  // It requires the caller to manage `this.meetingSessionContext.lastVideosToReceive`\n  // and `this.meetingSessionContext.videosToReceive` so that `this.meetingSessionContext.lastVideosToReceive`\n  // contains the stream IDs from either last time a subscribe was set, or last time this function was set.\n  //\n  // It will return true if succesful, if false the caller must fall back to a full renegotiation\n\n\n  updateRemoteVideosFromLastVideosToReceive() {\n    var _a, _b;\n\n    const context = this.meetingSessionContext;\n\n    if (((_a = context.videosToReceive) === null || _a === void 0 ? void 0 : _a.empty()) || ((_b = context.lastVideosToReceive) === null || _b === void 0 ? void 0 : _b.empty())) {\n      return false;\n    } // Check existence of all required dependencies and requisite functions\n\n\n    if (!context.transceiverController || !context.transceiverController.getMidForStreamId || !context.transceiverController.setStreamIdForMid || !context.videosToReceive.forEach || !context.signalingClient.remoteVideoUpdate || !context.videoStreamIndex.overrideStreamIdMappings) {\n      return false;\n    }\n\n    let added = [];\n    const simulcastStreamUpdates = new Map();\n    let removed = [];\n\n    if (context.lastVideosToReceive === null) {\n      added = context.videosToReceive.array();\n    } else {\n      const index = context.videoStreamIndex;\n      context.videosToReceive.forEach(currentId => {\n        if (context.lastVideosToReceive.contain(currentId)) {\n          return;\n        } // Check if group ID exists in previous set (i.e. simulcast stream switch)\n\n\n        let foundUpdatedPreviousStreamId = false;\n        context.lastVideosToReceive.forEach(previousId => {\n          if (foundUpdatedPreviousStreamId) {\n            return; // Short circuit since we have already found it\n          }\n\n          if (index.StreamIdsInSameGroup(previousId, currentId)) {\n            simulcastStreamUpdates.set(previousId, currentId);\n            foundUpdatedPreviousStreamId = true;\n          }\n        });\n\n        if (!foundUpdatedPreviousStreamId) {\n          // Otherwise this must be a new stream\n          added.push(currentId);\n        }\n      });\n      removed = context.lastVideosToReceive.array().filter(idFromPrevious => {\n        const stillReceiving = context.videosToReceive.contain(idFromPrevious);\n        const isUpdated = simulcastStreamUpdates.has(idFromPrevious);\n        return !stillReceiving && !isUpdated;\n      });\n    }\n\n    this.logger.info(`Request to update remote videos with added: ${added}, updated: ${[...simulcastStreamUpdates.entries()]}, removed: ${removed}`);\n    const updatedVideoSubscriptionConfigurations = [];\n\n    for (const [previousId, currentId] of simulcastStreamUpdates.entries()) {\n      const updatedConfig = new SignalingClientVideoSubscriptionConfiguration_1.default();\n      updatedConfig.streamId = currentId;\n      updatedConfig.attendeeId = context.videoStreamIndex.attendeeIdForStreamId(currentId);\n      updatedConfig.mid = context.transceiverController.getMidForStreamId(previousId);\n\n      if (updatedConfig.mid === undefined) {\n        this.logger.info(`No MID found for stream ID ${previousId}, cannot update stream without renegotiation`);\n        return false;\n      }\n\n      updatedVideoSubscriptionConfigurations.push(updatedConfig); // We need to override some other components dependent on the subscribe paths for certain functionality\n\n      context.transceiverController.setStreamIdForMid(updatedConfig.mid, currentId);\n      context.videoStreamIndex.overrideStreamIdMappings(previousId, currentId);\n\n      if (context.videoTileController.haveVideoTileForAttendeeId(updatedConfig.attendeeId)) {\n        const tile = context.videoTileController.getVideoTileForAttendeeId(updatedConfig.attendeeId);\n\n        if (!tile.setStreamId) {\n          // Required function\n          return false;\n        }\n\n        tile.setStreamId(currentId);\n      }\n    }\n\n    if (updatedVideoSubscriptionConfigurations.length !== 0) {\n      context.signalingClient.remoteVideoUpdate(updatedVideoSubscriptionConfigurations, []);\n    } // Only simulcast stream switches (i.e. not add/remove/source switches) are possible currently\n\n\n    if (added.length !== 0 || removed.length !== 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  updateLocalVideoFromPolicy() {\n    // Try updating parameters without renegotiation\n    if (this.meetingSessionContext.enableSimulcast) {\n      // The following may result in `this.mayNeedRenegotiationForSimulcastLayerChange` being switched on\n      const encodingParam = this.meetingSessionContext.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n\n      if (this.mayNeedRenegotiationForSimulcastLayerChange && !this.negotiatedBitrateLayersAllocationRtpHeaderExtension()) {\n        this.logger.info('Needs regenotiation for local video simulcast layer change');\n        this.mayNeedRenegotiationForSimulcastLayerChange = false;\n        return false;\n      }\n\n      this.meetingSessionContext.transceiverController.setEncodingParameters(encodingParam);\n    } else {\n      this.meetingSessionContext.videoCaptureAndEncodeParameter = this.meetingSessionContext.videoUplinkBandwidthPolicy.chooseCaptureAndEncodeParameters(); // Bitrate will be set in `actionFinishUpdating`. This should never need a resubscribe.\n    }\n\n    this.logger.info('Updated local video from policy without renegotiation');\n    return true;\n  }\n\n  negotiatedBitrateLayersAllocationRtpHeaderExtension() {\n    if (!this.meetingSessionContext.transceiverController.localVideoTransceiver()) {\n      return false;\n    }\n\n    const parameters = this.meetingSessionContext.transceiverController.localVideoTransceiver().sender.getParameters();\n\n    if (!parameters || !parameters.headerExtensions) {\n      return false;\n    }\n\n    return parameters.headerExtensions.some(extension => extension.uri === 'http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00');\n  }\n\n  restartLocalVideo(callback) {\n    const restartVideo = () => __awaiter(this, void 0, void 0, function* () {\n      if (this._videoTileController.hasStartedLocalVideoTile()) {\n        this.logger.info('stopping local video tile prior to local video restart');\n\n        this._videoTileController.stopLocalVideoTile();\n\n        this.logger.info('preparing local video restart update');\n        yield this.actionUpdateWithRenegotiation(false);\n        this.logger.info('starting local video tile for local video restart');\n\n        this._videoTileController.startLocalVideoTile();\n      }\n\n      this.logger.info('finalizing local video restart update');\n      yield this.actionUpdateWithRenegotiation(true);\n      callback();\n    });\n\n    const result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, () => {\n      restartVideo();\n    });\n    return result === SessionStateControllerTransitionResult_1.default.Transitioned || result === SessionStateControllerTransitionResult_1.default.DeferredTransition;\n  }\n\n  replaceLocalVideo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let videoStream = null;\n\n      try {\n        videoStream = yield this.mediaStreamBroker.acquireVideoInputStream();\n      } catch (error) {\n        throw new Error(`could not acquire video stream from mediaStreamBroker due to ${error.message}`);\n      }\n\n      if (!videoStream || videoStream.getVideoTracks().length < 1) {\n        throw new Error('could not acquire video track');\n      }\n\n      const videoTrack = videoStream.getVideoTracks()[0];\n\n      if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n        throw new Error('no active meeting and peer connection');\n      }\n\n      if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n        yield this.meetingSessionContext.transceiverController.setVideoInput(videoTrack);\n      } else {\n        throw new Error('cannot replace track on Plan B');\n      } // if there is a local tile, a video tile update event should be fired.\n\n\n      const localTile = this.meetingSessionContext.videoTileController.getLocalVideoTile();\n\n      if (localTile) {\n        const state = localTile.state();\n        const settings = videoStream.getVideoTracks()[0].getSettings(); // so tile update wil be fired.\n\n        localTile.bindVideoStream(state.boundAttendeeId, true, videoStream, settings.width, settings.height, state.streamId, state.boundExternalUserId);\n      } // Update the active video input on subscription context to match what we just changed\n      // so that subsequent meeting actions can reuse and destroy it.\n\n\n      this.meetingSessionContext.activeVideoInput = videoStream;\n    });\n  }\n\n  restartLocalAudio(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let audioStream = null;\n\n      try {\n        audioStream = yield this.mediaStreamBroker.acquireAudioInputStream();\n      } catch (error) {\n        this.logger.info('could not acquire audio stream from mediaStreamBroker');\n      }\n\n      if (!audioStream || audioStream.getAudioTracks().length < 1) {\n        throw new Error('could not acquire audio track');\n      }\n\n      this.connectionHealthData.reset();\n      this.connectionHealthData.setConnectionStartTime();\n      const audioTrack = audioStream.getAudioTracks()[0];\n\n      if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n        throw new Error('no active meeting and peer connection');\n      }\n\n      let replaceTrackSuccess = false;\n\n      if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n        replaceTrackSuccess = yield this.meetingSessionContext.transceiverController.replaceAudioTrack(audioTrack);\n      } else {\n        replaceTrackSuccess = yield DefaultTransceiverController_1.default.replaceAudioTrackForSender(this.meetingSessionContext.localAudioSender, audioTrack);\n      }\n\n      this._realtimeController.realtimeSetLocalAudioInput(audioStream);\n\n      this.meetingSessionContext.activeAudioInput = audioStream;\n      callback();\n\n      if (replaceTrackSuccess) {\n        return Promise.resolve();\n      } else {\n        return Promise.reject();\n      }\n    });\n  }\n\n  actionUpdateWithRenegotiation(notify) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // See declaration (unpaused in actionFinishUpdating)\n      // The operations in `update` do not need this protection because they are synchronous.\n      this.monitorTask.pauseResubscribeCheck();\n      this.receiveIndexTask.pauseIngestion(); // TODO: do not block other updates while waiting for video input\n\n      try {\n        yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoUpdate'), [new ReceiveVideoInputTask_1.default(this.meetingSessionContext), new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [new AttachMediaInputTask_1.default(this.meetingSessionContext), new CreateSDPTask_1.default(this.meetingSessionContext), new SetLocalDescriptionTask_1.default(this.meetingSessionContext), new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext), new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext), new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)]), this.configuration.connectionTimeoutMs)]).run();\n\n        if (notify) {\n          this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, () => {\n            this.actionFinishUpdating();\n          });\n        }\n      } catch (error) {\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, () => {\n          const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);\n\n          if (status.statusCode() !== MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n            this.logger.info('failed to update audio-video session');\n          }\n\n          this.handleMeetingSessionStatus(status, error);\n        });\n      }\n    });\n  }\n\n  notifyStop(status, error) {\n    var _a;\n\n    this.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.audioVideoDidStop).map(f => f.bind(observer)(status));\n    });\n\n    if (this.promotedToPrimaryMeeting && error) {\n      this.forEachObserver(observer => {\n        this.promotedToPrimaryMeeting = false;\n        Types_1.Maybe.of(observer.audioVideoWasDemotedFromPrimaryMeeting).map(f => f.bind(observer)(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.SignalingInternalServerError)));\n      });\n    }\n    /* istanbul ignore else */\n\n\n    if (this.eventController) {\n      const {\n        signalingOpenDurationMs,\n        poorConnectionCount,\n        startTimeMs,\n        iceGatheringDurationMs,\n        attendeePresenceDurationMs,\n        meetingStartDurationMs\n      } = this.meetingSessionContext;\n      const attributes = {\n        maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n        meetingDurationMs: startTimeMs === null ? 0 : Math.round(Date.now() - startTimeMs),\n        meetingStatus: MeetingSessionStatusCode_1.default[status.statusCode()],\n        signalingOpenDurationMs,\n        iceGatheringDurationMs,\n        attendeePresenceDurationMs,\n        poorConnectionCount,\n        meetingStartDurationMs,\n        retryCount: this.totalRetryCount\n      };\n      /* istanbul ignore next: toString is optional */\n\n      const meetingErrorMessage = error && error.message || ((_a = status.toString) === null || _a === void 0 ? void 0 : _a.call(status)) || '';\n\n      if (attributes.meetingDurationMs === 0) {\n        attributes.meetingErrorMessage = meetingErrorMessage;\n        delete attributes.meetingDurationMs;\n        delete attributes.attendeePresenceDurationMs;\n        delete attributes.meetingStartDurationMs;\n        this.eventController.publishEvent('meetingStartFailed', attributes);\n      } else if (status.isFailure() || status.isAudioConnectionFailure()) {\n        attributes.meetingErrorMessage = meetingErrorMessage;\n        this.eventController.publishEvent('meetingFailed', attributes);\n      } else {\n        this.eventController.publishEvent('meetingEnded', attributes);\n      }\n    }\n  }\n\n  actionFinishUpdating() {\n    // we do not update parameter for simulcast since they are updated in AttachMediaInputTask\n    if (!this.meetingSessionContext.enableSimulcast) {\n      if (this.useUpdateTransceiverControllerForUplink) {\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.updateTransceiverController();\n      } else {\n        const maxBitrateKbps = this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0];\n        this.enforceBandwidthLimitationForSender(maxBitrateKbps);\n      }\n    }\n\n    this.monitorTask.resumeResubscribeCheck();\n    this.receiveIndexTask.resumeIngestion();\n    this.logger.info('updated audio-video session');\n  }\n\n  reconnect(status, error) {\n    const willRetry = this._reconnectController.retryWithBackoff(() => __awaiter(this, void 0, void 0, function* () {\n      if (this.sessionStateController.state() === SessionStateControllerState_1.default.NotConnected) {\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, () => {\n          this.actionConnect(true);\n        });\n      } else {\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Reconnect, () => {\n          this.actionReconnect(status);\n        });\n      }\n\n      this.totalRetryCount += 1;\n    }), () => {\n      this.logger.info('canceled retry');\n    });\n\n    if (!willRetry) {\n      this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, () => {\n        this.actionDisconnect(status, false, error);\n      });\n    }\n\n    return willRetry;\n  }\n\n  actionReconnect(status) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._reconnectController.hasStartedConnectionAttempt()) {\n        this._reconnectController.startedConnectionAttempt(false);\n\n        this.forEachObserver(observer => {\n          Types_1.Maybe.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(true));\n        });\n      }\n\n      this.meetingSessionContext.volumeIndicatorAdapter.onReconnect();\n      this.connectionHealthData.reset();\n\n      try {\n        yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoReconnect'), [new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [new CleanRestartedSessionTask_1.default(this.meetingSessionContext), new SerialGroupTask_1.default(this.logger, 'Signaling', [new OpenSignalingConnectionTask_1.default(this.meetingSessionContext), new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext), new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext)]), new CreatePeerConnectionTask_1.default(this.meetingSessionContext)]), this.configuration.connectionTimeoutMs), // TODO: Do we need ReceiveVideoInputTask in the reconnect operation?\n        new ReceiveVideoInputTask_1.default(this.meetingSessionContext), new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [new AttachMediaInputTask_1.default(this.meetingSessionContext), new CreateSDPTask_1.default(this.meetingSessionContext), new SetLocalDescriptionTask_1.default(this.meetingSessionContext), new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext), new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext), new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)]), this.configuration.connectionTimeoutMs)]).run();\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {\n          /* istanbul ignore else */\n          if (this.eventController) {\n            const {\n              signalingOpenDurationMs,\n              poorConnectionCount,\n              startTimeMs,\n              iceGatheringDurationMs,\n              attendeePresenceDurationMs,\n              meetingStartDurationMs\n            } = this.meetingSessionContext;\n            const attributes = {\n              maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n              meetingDurationMs: Math.round(Date.now() - startTimeMs),\n              meetingStatus: MeetingSessionStatusCode_1.default[status.statusCode()],\n              signalingOpenDurationMs,\n              iceGatheringDurationMs,\n              attendeePresenceDurationMs,\n              poorConnectionCount,\n              meetingStartDurationMs,\n              retryCount: this.totalRetryCount\n            };\n            this.eventController.publishEvent('meetingReconnected', attributes);\n          }\n\n          this.actionFinishConnecting();\n        });\n      } catch (error) {\n        // To perform the \"Reconnect\" action again, the session should be in the \"Connected\" state.\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {\n          this.logger.info('failed to reconnect audio-video session');\n          const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);\n          this.handleMeetingSessionStatus(status, error);\n        });\n      }\n\n      this.connectionHealthData.setConnectionStartTime();\n    });\n  }\n\n  wrapTaskName(taskName) {\n    return `${taskName}/${this.configuration.meetingId}/${this.configuration.credentials.attendeeId}`;\n  } // Extract the meeting status from `Error.message`, relying on specific phrasing\n  // 'the meeting status code ${CODE}`.\n  //\n  // e.g. reject(new Error(\n  //        `canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode.MeetingEnded}`));\n\n\n  getMeetingStatusCode(error) {\n    const matched = /the meeting status code: (\\d+)/.exec(error && error.message);\n\n    if (matched && matched.length > 1) {\n      return Number.parseInt(matched[1], 10);\n    }\n\n    return null;\n  }\n\n  enforceBandwidthLimitationForSender(maxBitrateKbps) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n        yield this.meetingSessionContext.transceiverController.setVideoSendingBitrateKbps(maxBitrateKbps);\n      } else {\n        yield DefaultTransceiverController_1.default.setVideoSendingBitrateKbpsForSender(this.meetingSessionContext.localVideoSender, maxBitrateKbps, this.meetingSessionContext.logger);\n      }\n    });\n  }\n\n  handleMeetingSessionStatus(status, error) {\n    this.logger.info(`handling status: ${MeetingSessionStatusCode_1.default[status.statusCode()]}`);\n\n    if (!status.isTerminal()) {\n      if (this.meetingSessionContext.statsCollector) {\n        this.meetingSessionContext.statsCollector.logMeetingSessionStatus(status);\n      }\n    }\n\n    if (status.statusCode() === MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n      this.restartLocalVideo(() => {\n        this.logger.info('handled incompatible SDP by attempting to restart video');\n      });\n      return true;\n    }\n\n    if (status.statusCode() === MeetingSessionStatusCode_1.default.VideoCallSwitchToViewOnly) {\n      this._videoTileController.removeLocalVideoTile();\n\n      this.forEachObserver(observer => {\n        Types_1.Maybe.of(observer.videoSendDidBecomeUnavailable).map(f => f.bind(observer)());\n      });\n      return false;\n    }\n\n    if (status.statusCode() === MeetingSessionStatusCode_1.default.AudioVideoWasRemovedFromPrimaryMeeting) {\n      this.forEachObserver(observer => {\n        Types_1.Maybe.of(observer.audioVideoWasDemotedFromPrimaryMeeting).map(f => f.bind(observer)(status));\n      });\n      return false;\n    }\n\n    if (status.isTerminal()) {\n      this.logger.error('session will not be reconnected');\n\n      if (this.meetingSessionContext.reconnectController) {\n        this.meetingSessionContext.reconnectController.disableReconnect();\n      }\n    }\n\n    if (status.isFailure() || status.isTerminal()) {\n      if (this.meetingSessionContext.reconnectController) {\n        const willRetry = this.reconnect(status, error);\n\n        if (willRetry) {\n          this.logger.warn(`will retry due to status code ${MeetingSessionStatusCode_1.default[status.statusCode()]}${error ? ` and error: ${error.message}` : ``}`);\n        } else {\n          this.logger.error(`failed with status code ${MeetingSessionStatusCode_1.default[status.statusCode()]}${error ? ` and error: ${error.message}` : ``}`);\n        }\n\n        return willRetry;\n      }\n    }\n\n    return false;\n  }\n\n  setVideoMaxBandwidthKbps(maxBandwidthKbps) {\n    if (this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n      this.logger.info(`video send has ideal max bandwidth ${maxBandwidthKbps} kbps`);\n      this.meetingSessionContext.videoUplinkBandwidthPolicy.setIdealMaxBandwidthKbps(maxBandwidthKbps);\n    }\n\n    this.maxUplinkBandwidthKbps = maxBandwidthKbps;\n  }\n\n  handleHasBandwidthPriority(hasBandwidthPriority) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy && !this.meetingSessionContext.enableSimulcast) {\n        if (this.useUpdateTransceiverControllerForUplink) {\n          this.meetingSessionContext.videoUplinkBandwidthPolicy.setHasBandwidthPriority(hasBandwidthPriority);\n          yield this.meetingSessionContext.videoUplinkBandwidthPolicy.updateTransceiverController();\n          return;\n        }\n\n        const oldMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.setHasBandwidthPriority(hasBandwidthPriority);\n        const newMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n\n        if (oldMaxBandwidth !== newMaxBandwidth) {\n          this.logger.info(`video send bandwidth priority ${hasBandwidthPriority} max has changed from ${oldMaxBandwidth} kbps to ${newMaxBandwidth} kbps`);\n          yield this.enforceBandwidthLimitationForSender(newMaxBandwidth);\n        }\n      }\n    });\n  }\n\n  pauseReceivingStream(streamId) {\n    if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n      this.meetingSessionContext.signalingClient.pause([streamId]);\n    }\n  }\n\n  resumeReceivingStream(streamId) {\n    if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n      this.meetingSessionContext.signalingClient.resume([streamId]);\n    }\n  }\n\n  getRemoteVideoSources() {\n    const {\n      videoStreamIndex\n    } = this.meetingSessionContext;\n\n    if (!videoStreamIndex) {\n      this.logger.info('meeting has not started');\n      return [];\n    }\n\n    const selfAttendeeId = this.configuration.credentials.attendeeId;\n    return videoStreamIndex.allVideoSendingSourcesExcludingSelf(selfAttendeeId);\n  }\n\n  encodingSimulcastLayersDidChange(simulcastLayers) {\n    this.mayNeedRenegotiationForSimulcastLayerChange = true;\n    this.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.encodingSimulcastLayersDidChange).map(f => f.bind(observer)(simulcastLayers));\n    });\n  }\n\n  promoteToPrimaryMeeting(credentials) {\n    return this.actionPromoteToPrimaryMeeting(credentials);\n  }\n\n  actionPromoteToPrimaryMeeting(credentials) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resultingStatus = new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.SignalingRequestFailed);\n      yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('PromoteToPrimaryMeeting'), [new TimeoutTask_1.default(this.logger, new PromoteToPrimaryMeetingTask_1.default(this.meetingSessionContext, credentials, status => {\n        resultingStatus = status;\n      }), this.configuration.connectionTimeoutMs)]).run();\n      this.promotedToPrimaryMeeting = resultingStatus.statusCode() === MeetingSessionStatusCode_1.default.OK;\n      return resultingStatus;\n    });\n  }\n\n  demoteFromPrimaryMeeting() {\n    this.meetingSessionContext.signalingClient.demoteFromPrimaryMeeting();\n    this.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.audioVideoWasDemotedFromPrimaryMeeting).map(f => f.bind(observer)(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.OK)));\n    });\n  }\n\n}\n\nexports.default = DefaultAudioVideoController;\nDefaultAudioVideoController.MIN_VOLUME_DECIBELS = -42;\nDefaultAudioVideoController.MAX_VOLUME_DECIBELS = -14;\nDefaultAudioVideoController.PING_PONG_INTERVAL_MS = 10000;","map":{"version":3,"mappings":"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","names":["DefaultAudioVideoController","constructor","configuration","logger","webSocketAdapter","mediaStreamBroker","reconnectController","eventReporter","AudioProfile_1","ConnectionHealthData_1","Set","AudioVideoControllerState_1","undefined","_logger","sessionStateController","DefaultSessionStateController_1","_configuration","enableSimulcast","enableSimulcastForUnifiedPlanChromiumBasedBrowsers","DefaultBrowserBehavior_1","hasChromiumWebRTC","_webSocketAdapter","_realtimeController","DefaultRealtimeController_1","realtimeSetLocalAttendeeId","credentials","attendeeId","externalUserId","_mediaStreamBroker","_reconnectController","_videoTileController","DefaultVideoTileController_1","DefaultVideoTileFactory_1","_audioMixController","DefaultAudioMixController_1","meetingSessionContext","_eventController","DefaultEventController_1","destroy","observerQueue","clear","destroyed","realtimeController","activeSpeakerDetector","_activeSpeakerDetector","DefaultActiveSpeakerDetector_1","handleHasBandwidthPriority","bind","videoTileController","audioMixController","eventController","rtcPeerConnection","peer","getRTCPeerConnectionStats","selector","getStats","setAudioProfile","audioProfile","_audioProfile","addObserver","observer","info","add","removeObserver","delete","forEachObserver","observerFunc","AsyncScheduler_1","nextTick","has","initSignalingClient","signalingClient","connectionHealthData","reset","browserBehavior","meetingSessionConfiguration","DefaultSignalingClient_1","uninstallPreStartObserver","preStartObserver","prestart","createOrReuseSignalingTask","run","then","handleClosed","__awaiter","signalingTask","handleSignalingClientEvent","event","type","SignalingClientEventType_1","WebSocketClosed","registerObserver","catch","e","error","start","options","startReturningPromise","signalingOnly","Promise","resolve","reject","perform","SessionStateControllerAction_1","Connect","actionConnect","connectWithPromises","needsToWaitForAttendeePresence","context","timeout","timeoutMs","task","TimeoutTask_1","monitorTask","MonitorTask_1","connectionHealthPolicyConfiguration","monitor","once","receiveAudioInput","ReceiveAudioInputTask_1","receiveIndexTask","ReceiveVideoStreamIndexTask_1","pauseResubscribeCheck","pauseIngestion","signaling","SerialGroupTask_1","ListenForVolumeIndicatorsTask_1","SendAndReceiveDataMessagesTask_1","JoinAndReceiveIndexTask_1","ReceiveTURNCredentialsTask_1","createPeerConnection","CreatePeerConnectionTask_1","attachMediaInput","AttachMediaInputTask_1","createSDP","CreateSDPTask_1","setLocalDescription","SetLocalDescriptionTask_1","ice","FinishGatheringICECandidatesTask_1","subscribeAck","SubscribeAndReceiveSubscribeAckTask_1","wrapTaskName","connectionTimeoutMs","ParallelGroupTask_1","WaitForAttendeePresenceTask_1","SetRemoteDescriptionTask_1","attendeePresenceTimeoutMs","connectWithTasks","OpenSignalingConnectionTask_1","reconnecting","audioVideoController","useAudioConnection","urls","audioHostURL","transceiverController","VideoOnlyTransceiverController_1","SimulcastTransceiverController_1","DefaultTransceiverController_1","volumeIndicatorAdapter","DefaultVolumeIndicatorAdapter_1","MIN_VOLUME_DECIBELS","MAX_VOLUME_DECIBELS","videoDownlinkBandwidthPolicy","videoUplinkBandwidthPolicy","simulcastPolicy","DefaultSimulcastUplinkPolicy_1","VideoAdaptiveProbePolicy_1","videoStreamIndex","SimulcastVideoStreamIndex_1","DefaultVideoStreamIndex_1","NScaleVideoUplinkBandwidthPolicy_1","disableResolutionScaleDown","AllHighestVideoBandwidthPolicy_1","setTransceiverController","updateTransceiverController","requiresUnifiedPlan","useUpdateTransceiverControllerForUplink","maxUplinkBandwidthKbps","setIdealMaxBandwidthKbps","bindToTileController","lastKnownVideoAvailability","MeetingSessionVideoAvailability_1","videoCaptureAndEncodeParameter","DefaultVideoCaptureAndEncodeParameter_1","videosToReceive","DefaultVideoStreamIdSet_1","videosPaused","statsCollector","DefaultStatsCollector_1","connectionMonitor","SignalingAndMetricsConnectionMonitor_1","DefaultPingPong_1","PING_PONG_INTERVAL_MS","videoDeviceInformation","totalRetryCount","startAudioVideoTimestamp","Date","now","Types_1","of","audioVideoDidStartConnecting","map","f","publishEvent","hasStartedConnectionAttempt","startedConnectionAttempt","connect","usePromises","setConnectionStartTime","FinishConnecting","meetingStartDurationMs","maxVideoTileCount","poorConnectionCount","retryCount","signalingOpenDurationMs","iceGatheringDurationMs","startTimeMs","actionFinishConnecting","status","MeetingSessionStatus_1","getMeetingStatusCode","MeetingSessionStatusCode_1","TaskFailed","state","SessionStateControllerState_1","NotConnected","Fail","actionDisconnect","handleMeetingSessionStatus","notifyStop","videoDuplexMode","SignalingProtocol_js_1","RX","enforceBandwidthLimitationForSender","encodeBitrates","audioVideoDidStart","resumeIngestion","resumeResubscribeCheck","stopReturningPromise","_a","closeConnection","ReleaseMediaStreamsTask_1","Disconnect","disableReconnect","Left","stop","LeaveAndReceiveLeaveAckTask_1","stopError","subtasks","CleanStoppedSessionTask_1","push","cleanError","FinishDisconnecting","update","needsRenegotiation","updateRemoteVideosFromLastVideosToReceive","updateLocalVideoFromPolicy","lastVideosToReceive","actionFinishUpdating","result","Update","actionUpdateWithRenegotiation","SessionStateControllerTransitionResult_1","Transitioned","DeferredTransition","empty","_b","getMidForStreamId","setStreamIdForMid","forEach","remoteVideoUpdate","overrideStreamIdMappings","added","simulcastStreamUpdates","Map","removed","array","index","currentId","contain","foundUpdatedPreviousStreamId","previousId","StreamIdsInSameGroup","set","filter","idFromPrevious","stillReceiving","isUpdated","entries","updatedVideoSubscriptionConfigurations","updatedConfig","SignalingClientVideoSubscriptionConfiguration_1","streamId","attendeeIdForStreamId","mid","haveVideoTileForAttendeeId","tile","getVideoTileForAttendeeId","setStreamId","length","encodingParam","chooseEncodingParameters","mayNeedRenegotiationForSimulcastLayerChange","negotiatedBitrateLayersAllocationRtpHeaderExtension","setEncodingParameters","chooseCaptureAndEncodeParameters","localVideoTransceiver","parameters","sender","getParameters","headerExtensions","some","extension","uri","restartLocalVideo","callback","restartVideo","hasStartedLocalVideoTile","stopLocalVideoTile","startLocalVideoTile","replaceLocalVideo","videoStream","acquireVideoInputStream","Error","message","getVideoTracks","videoTrack","setVideoInput","localTile","getLocalVideoTile","settings","getSettings","bindVideoStream","boundAttendeeId","width","height","boundExternalUserId","activeVideoInput","restartLocalAudio","audioStream","acquireAudioInputStream","getAudioTracks","audioTrack","replaceTrackSuccess","replaceAudioTrack","replaceAudioTrackForSender","localAudioSender","realtimeSetLocalAudioInput","activeAudioInput","notify","ReceiveVideoInputTask_1","FinishUpdating","statusCode","IncompatibleSDP","audioVideoDidStop","promotedToPrimaryMeeting","audioVideoWasDemotedFromPrimaryMeeting","SignalingInternalServerError","attendeePresenceDurationMs","attributes","meetingDurationMs","Math","round","meetingStatus","meetingErrorMessage","toString","isFailure","isAudioConnectionFailure","maxBitrateKbps","reconnect","willRetry","retryWithBackoff","Reconnect","actionReconnect","onReconnect","CleanRestartedSessionTask_1","taskName","meetingId","matched","exec","Number","parseInt","setVideoSendingBitrateKbps","setVideoSendingBitrateKbpsForSender","localVideoSender","isTerminal","logMeetingSessionStatus","VideoCallSwitchToViewOnly","removeLocalVideoTile","videoSendDidBecomeUnavailable","AudioVideoWasRemovedFromPrimaryMeeting","warn","setVideoMaxBandwidthKbps","maxBandwidthKbps","hasBandwidthPriority","setHasBandwidthPriority","oldMaxBandwidth","newMaxBandwidth","pauseReceivingStream","pause","resumeReceivingStream","resume","getRemoteVideoSources","selfAttendeeId","allVideoSendingSourcesExcludingSelf","encodingSimulcastLayersDidChange","simulcastLayers","promoteToPrimaryMeeting","actionPromoteToPrimaryMeeting","resultingStatus","SignalingRequestFailed","PromoteToPrimaryMeetingTask_1","OK","demoteFromPrimaryMeeting","exports"],"sourceRoot":"","sources":["../../src/audiovideocontroller/DefaultAudioVideoController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
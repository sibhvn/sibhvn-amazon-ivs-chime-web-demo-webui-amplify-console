{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseConnectionHealthPolicy_1 = require(\"./BaseConnectionHealthPolicy\");\n\nclass UnusableAudioWarningConnectionHealthPolicy extends BaseConnectionHealthPolicy_1.default {\n  constructor(configuration, data) {\n    super(configuration, data);\n    this.coolDownTimeMs = configuration.cooldownTimeMs;\n    this.pastSamplesToConsider = configuration.pastSamplesToConsider;\n    this.fractionalLoss = configuration.fractionalLoss;\n    this.packetsExpected = configuration.packetsExpected;\n    this.maximumTimesToWarn = configuration.maximumTimesToWarn;\n    this.lastWarnTimestampMs = 0;\n    this.warnCount = 0;\n  }\n\n  calculateFractionalLoss() {\n    if (this.currentData.packetsReceivedInLastMinute.length < this.pastSamplesToConsider) {\n      return 0;\n    }\n\n    const samplesToConsider = this.pastSamplesToConsider;\n    const totalPacketsExpected = samplesToConsider * this.packetsExpected;\n    let totalPacketsReceived = 0;\n\n    for (let i = 0; i < samplesToConsider; i++) {\n      totalPacketsReceived += this.currentData.packetsReceivedInLastMinute[i];\n    }\n\n    return Math.min(Math.max(1 - totalPacketsReceived / totalPacketsExpected, 0), 1);\n  }\n\n  health() {\n    const warnedRecently = Date.now() - this.lastWarnTimestampMs < this.coolDownTimeMs;\n\n    if (warnedRecently) {\n      return this.currentHealth;\n    }\n\n    const hasHadHighPacketLoss = this.calculateFractionalLoss() >= this.fractionalLoss;\n\n    if (hasHadHighPacketLoss) {\n      if (this.currentHealth !== 0) {\n        this.lastWarnTimestampMs = Date.now();\n        this.warnCount++;\n\n        if (this.warnCount > this.maximumTimesToWarn) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    return 1;\n  }\n\n}\n\nexports.default = UnusableAudioWarningConnectionHealthPolicy;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAEA;;AAKA,MAAqBA,0CAArB,SACUC,oCADV,CACoC;EAUlCC,YAAYC,aAAZ,EAAgEC,IAAhE,EAA0F;IACxF,MAAMD,aAAN,EAAqBC,IAArB;IACA,KAAKC,cAAL,GAAsBF,aAAa,CAACG,cAApC;IACA,KAAKC,qBAAL,GAA6BJ,aAAa,CAACI,qBAA3C;IACA,KAAKC,cAAL,GAAsBL,aAAa,CAACK,cAApC;IACA,KAAKC,eAAL,GAAuBN,aAAa,CAACM,eAArC;IACA,KAAKC,kBAAL,GAA0BP,aAAa,CAACO,kBAAxC;IACA,KAAKC,mBAAL,GAA2B,CAA3B;IACA,KAAKC,SAAL,GAAiB,CAAjB;EACD;;EAEDC,uBAAuB;IACrB,IAAI,KAAKC,WAAL,CAAiBC,2BAAjB,CAA6CC,MAA7C,GAAsD,KAAKT,qBAA/D,EAAsF;MACpF,OAAO,CAAP;IACD;;IACD,MAAMU,iBAAiB,GAAG,KAAKV,qBAA/B;IAEA,MAAMW,oBAAoB,GAAGD,iBAAiB,GAAG,KAAKR,eAAtD;IACA,IAAIU,oBAAoB,GAAG,CAA3B;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,iBAApB,EAAuCG,CAAC,EAAxC,EAA4C;MAC1CD,oBAAoB,IAAI,KAAKL,WAAL,CAAiBC,2BAAjB,CAA6CK,CAA7C,CAAxB;IACD;;IACD,OAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,IAAIJ,oBAAoB,GAAGD,oBAApC,EAA0D,CAA1D,CAAT,EAAuE,CAAvE,CAAP;EACD;;EAEDM,MAAM;IACJ,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAL,KAAa,KAAKhB,mBAAlB,GAAwC,KAAKN,cAApE;;IACA,IAAIoB,cAAJ,EAAoB;MAClB,OAAO,KAAKG,aAAZ;IACD;;IACD,MAAMC,oBAAoB,GAAG,KAAKhB,uBAAL,MAAkC,KAAKL,cAApE;;IACA,IAAIqB,oBAAJ,EAA0B;MACxB,IAAI,KAAKD,aAAL,KAAuB,CAA3B,EAA8B;QAC5B,KAAKjB,mBAAL,GAA2Be,IAAI,CAACC,GAAL,EAA3B;QACA,KAAKf,SAAL;;QACA,IAAI,KAAKA,SAAL,GAAiB,KAAKF,kBAA1B,EAA8C;UAC5C,OAAO,CAAP;QACD;MACF;;MACD,OAAO,CAAP;IACD;;IACD,OAAO,CAAP;EACD;;AApDiC;;AADpCoB","names":["UnusableAudioWarningConnectionHealthPolicy","BaseConnectionHealthPolicy_1","constructor","configuration","data","coolDownTimeMs","cooldownTimeMs","pastSamplesToConsider","fractionalLoss","packetsExpected","maximumTimesToWarn","lastWarnTimestampMs","warnCount","calculateFractionalLoss","currentData","packetsReceivedInLastMinute","length","samplesToConsider","totalPacketsExpected","totalPacketsReceived","i","Math","min","max","health","warnedRecently","Date","now","currentHealth","hasHadHighPacketLoss","exports"],"sourceRoot":"","sources":["../../src/connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
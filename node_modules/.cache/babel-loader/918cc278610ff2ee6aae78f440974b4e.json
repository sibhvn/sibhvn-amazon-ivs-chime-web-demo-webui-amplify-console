{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst DefaultSDP_1 = require(\"../sdp/DefaultSDP\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[CreateSDPTask]] asynchronously calls [[createOffer]] on peer connection.\n */\n\n\nclass CreateSDPTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'CreateSDPTask';\n  }\n\n  cancel() {\n    // Just in case. The baseCancel behavior should prevent this.\n\n    /* istanbul ignore else */\n    if (this.cancelPromise) {\n      const error = new Error(`canceling ${this.name()}`);\n      this.cancelPromise(error);\n      delete this.cancelPromise;\n    }\n  }\n\n  sessionUsesAudio() {\n    var _a, _b;\n\n    return !!((_b = (_a = this.context.meetingSessionConfiguration) === null || _a === void 0 ? void 0 : _a.urls) === null || _b === void 0 ? void 0 : _b.audioHostURL);\n  }\n\n  sessionUsesVideo() {\n    const enabled = true;\n    let sending;\n\n    if (this.context.transceiverController.useTransceivers()) {\n      sending = this.context.transceiverController.hasVideoInput();\n    } else {\n      sending = this.context.videoTileController.hasStartedLocalVideoTile();\n    }\n\n    const receiving = !!this.context.videosToReceive && !this.context.videosToReceive.empty();\n    const usesVideo = enabled && (sending || receiving);\n    this.context.logger.info(`uses video: ${usesVideo} (enabled: ${enabled}, sending: ${sending}, receiving: ${receiving})`);\n    return usesVideo;\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const offerOptions = {\n        offerToReceiveAudio: this.sessionUsesAudio(),\n        offerToReceiveVideo: this.sessionUsesVideo()\n      };\n      this.logger.info(`peer connection offerOptions: ${JSON.stringify(offerOptions)}`);\n      yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        this.cancelPromise = error => {\n          reject(error);\n        };\n\n        try {\n          this.context.sdpOfferInit = yield this.context.peer.createOffer(offerOptions);\n          this.context.logger.info('peer connection created offer');\n\n          if (this.context.previousSdpOffer) {\n            if (new DefaultSDP_1.default(this.context.sdpOfferInit.sdp).videoSendSectionHasDifferentSSRC(this.context.previousSdpOffer)) {\n              const error = new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.IncompatibleSDP}`);\n              this.context.previousSdpOffer = null;\n              reject(error);\n              return;\n            }\n          }\n\n          resolve();\n        } catch (error) {\n          reject(error);\n        } finally {\n          delete this.cancelPromise;\n        }\n      }));\n    });\n  }\n\n}\n\nexports.default = CreateSDPTask;","map":{"version":3,"mappings":"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","names":["CreateSDPTask","BaseTask_1","constructor","context","logger","cancel","cancelPromise","error","Error","name","sessionUsesAudio","meetingSessionConfiguration","_a","urls","_b","audioHostURL","sessionUsesVideo","enabled","sending","transceiverController","useTransceivers","hasVideoInput","videoTileController","hasStartedLocalVideoTile","receiving","videosToReceive","empty","usesVideo","info","run","offerOptions","offerToReceiveAudio","offerToReceiveVideo","JSON","stringify","Promise","resolve","reject","__awaiter","sdpOfferInit","peer","createOffer","previousSdpOffer","DefaultSDP_1","sdp","videoSendSectionHasDifferentSSRC","MeetingSessionStatusCode_1","IncompatibleSDP","exports"],"sourceRoot":"","sources":["../../src/task/CreateSDPTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
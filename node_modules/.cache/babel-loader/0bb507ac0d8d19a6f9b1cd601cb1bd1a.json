{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BackgroundFilterMonitor = void 0;\n\nconst loader_1 = require(\"../../libs/voicefocus/loader\");\n\nconst CanvasVideoFrameBuffer_1 = require(\"../videoframeprocessor/CanvasVideoFrameBuffer\");\n\nconst BackgroundFilterFrameCounter_1 = require(\"./BackgroundFilterFrameCounter\");\n/** @internal */\n\n\nclass DeferredObservable {\n  constructor() {\n    /** Access the last-resolved value of next()\n     */\n    this.value = undefined;\n    this.resolve = null;\n  }\n  /** Create a promise that resolves once next() is called\n   */\n\n\n  whenNext() {\n    /* istanbul ignore else */\n    if (!this.promise) {\n      // externally-resolvable promise\n      this.promise = new Promise(resolve => this.resolve = resolve);\n    }\n\n    return this.promise;\n  }\n  /** Update the value and resolve\n   */\n\n\n  next(value) {\n    // store the value, for sync access\n    this.value = value; // resolve the promise so anyone awaiting whenNext resolves\n\n    this.resolve(value); // delete the promise so future whenNext calls get a new promise\n\n    delete this.promise;\n  }\n\n}\n/**\n * The [[BackgroundFilterProcessor]] uses WASM and TensorFlow Lite to apply changes to the\n * background image.\n */\n\n/** @internal */\n\n\nclass BackgroundFilterProcessor {\n  constructor(filterType, spec, options, delegate) {\n    this.targetCanvas = document.createElement('canvas');\n    this.canvasCtx = this.targetCanvas.getContext('2d');\n    this.canvasVideoFrameBuffer = new CanvasVideoFrameBuffer_1.default(this.targetCanvas);\n    this.mask$ = new DeferredObservable();\n    this.sourceWidth = 0;\n    this.sourceHeight = 0;\n    this.frameNumber = 0;\n    this.videoFramesPerFilterUpdate = 1;\n    this.initWorkerPromise = BackgroundFilterProcessor.createWorkerPromise();\n    this.loadModelPromise = BackgroundFilterProcessor.createWorkerPromise();\n    this.modelInitialized = false;\n    this.destroyed = false;\n    this.filterType = filterType;\n    this.validateSpec(spec);\n    this.validateOptions(options);\n    this.spec = spec;\n    this.logger = options.logger;\n    this.delegate = delegate;\n    this.initCPUMonitor(options);\n  }\n\n  static createWorkerPromise() {\n    const resolver = {\n      resolve: null,\n      reject: null,\n      promise: null\n    };\n    resolver.promise = new Promise((resolve, reject) => {\n      resolver.resolve = resolve;\n      resolver.reject = reject;\n    });\n    return resolver;\n  }\n  /** Check if the input spec are not null\n   */\n\n\n  validateSpec(spec) {\n    if (!spec) {\n      throw new Error('processor has null spec');\n    }\n\n    if (!spec.model) {\n      throw new Error('processor spec has null model');\n    }\n\n    if (!spec.paths) {\n      throw new Error('processor spec has null paths');\n    }\n  }\n\n  validateOptions(options) {\n    if (!options) {\n      throw new Error('processor has null options');\n    }\n\n    if (!options.logger) {\n      throw new Error('processor has null options - logger');\n    }\n\n    if (!options.reportingPeriodMillis) {\n      throw new Error('processor has null options - reportingPeriodMillis');\n    }\n\n    if (!options.filterCPUUtilization) {\n      throw new Error('processor has null options - filterCPUUtilization');\n    }\n  }\n\n  initCPUMonitor(options) {\n    const CPU_MONITORING_PERIOD_MILLIS = 5000;\n    const MAX_SEGMENTATION_SKIP_RATE = 10;\n    const MIN_SEGMENTATION_SKIP_RATE = 1;\n    this.videoFramesPerFilterUpdate = 1;\n    this.frameCounter = new BackgroundFilterFrameCounter_1.default(this.delegate, options.reportingPeriodMillis, options.filterCPUUtilization, this.logger);\n    this.cpuMonitor = new BackgroundFilterMonitor(CPU_MONITORING_PERIOD_MILLIS, {\n      reduceCPUUtilization: () => {\n        this.updateVideoFramesPerFilterUpdate(Math.min(this.videoFramesPerFilterUpdate + 1, MAX_SEGMENTATION_SKIP_RATE));\n      },\n      increaseCPUUtilization: () => {\n        this.updateVideoFramesPerFilterUpdate(Math.max(this.videoFramesPerFilterUpdate - 1, MIN_SEGMENTATION_SKIP_RATE));\n      }\n    });\n    this.delegate.addObserver(this.cpuMonitor);\n  }\n  /** Converts a value to a JSON string\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  stringify(value) {\n    return JSON.stringify(value, null, 2);\n  }\n  /**\n   * Sends a message to worker and resolves promise in response to worker's initialize event\n   */\n\n\n  handleInitialize(msg) {\n    this.logger.info(`received initialize message: ${this.stringify(msg)}`);\n\n    if (!msg.payload) {\n      this.logger.error('failed to initialize module');\n      this.initWorkerPromise.reject(new Error('failed to initialize the module'));\n      return;\n    }\n\n    const model = this.spec.model;\n    this.worker.postMessage({\n      msg: 'loadModel',\n      payload: {\n        modelUrl: model.path,\n        inputHeight: model.input.height,\n        inputWidth: model.input.width,\n        inputChannels: 4,\n        modelRangeMin: model.input.range[0],\n        modelRangeMax: model.input.range[1],\n        blurPixels: 0\n      }\n    });\n    this.initWorkerPromise.resolve({});\n  }\n  /**\n   * Resolves promise in response to worker's loadModel event\n   */\n\n\n  handleLoadModel(msg) {\n    this.logger.info(`received load model message: ${this.stringify(msg)}`);\n\n    if (msg.payload !== 2) {\n      this.logger.error('failed to load model! status: ' + msg.payload);\n      /** Rejects model promise\n       */\n\n      this.loadModelPromise.reject(new Error('failed to load model! status: ' + msg.payload));\n      return;\n    }\n\n    this.modelInitialized = true;\n    this.loadModelPromise.resolve({});\n  }\n  /** Updates the payload output value in response to worker's predict event\n   */\n\n\n  handlePredict(msg) {\n    this.mask$.next(msg.payload.output);\n  }\n  /**\n   * This method will handle the asynchronous messaging between the main JS thread\n   * and the worker thread.\n   * @param evt An event that was sent from the worker to the JS thread.\n   * @returns\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  handleWorkerEvent(evt) {\n    const msg = evt.data;\n\n    switch (msg.msg) {\n      case 'initialize':\n        this.handleInitialize(msg);\n        break;\n\n      case 'loadModel':\n        this.handleLoadModel(msg);\n        break;\n\n      case 'predict':\n        this.handlePredict(msg);\n        break;\n\n      default:\n        this.logger.info(`unexpected event msg: ${this.stringify(msg)}`);\n        break;\n    }\n  }\n  /**\n   * This method initializes all of the resource necessary to processs background filter. It returns\n   * a promise and resolves or rejects the promise once the initialization is complete.\n   * @returns\n   * @throws An error will be thrown\n   */\n\n\n  loadAssets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.logger.info('start initializing the processor');\n\n      try {\n        this.worker = yield loader_1.loadWorker(this.spec.paths.worker, 'BackgroundFilterWorker', {}, null);\n        this.worker.addEventListener('message', ev => this.handleWorkerEvent(ev));\n        this.worker.postMessage({\n          msg: 'initialize',\n          payload: {\n            wasmPath: this.spec.paths.wasm,\n            simdPath: this.spec.paths.simd\n          }\n        });\n        yield this.initWorkerPromise.promise;\n        this.logger.info(`successfully initialized the ${this.filterType} worker`);\n        yield this.loadModelPromise.promise;\n        this.logger.info(`successfully loaded ${this.filterType} worker segmentation model`);\n      } catch (error) {\n        throw new Error(`could not initialize the ${this.filterType} video frame processor due to '${error.message}'`);\n      }\n\n      this.logger.info(`successfully initialized the ${this.filterType} processor`);\n    });\n  }\n  /**\n   * Processes the VideoFrameBuffer by applying a segmentation mask and replacing the background.\n   * @param buffers object that contains the canvas element that will be used to obtain the image data to process\n   * @returns the updated buffer that contains the image with the background replaced.\n   */\n\n\n  process(buffers) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.destroyed) {\n        return buffers;\n      }\n\n      this.frameCounter.frameReceived(buffers[0].framerate);\n      this.cpuMonitor.frameReceived();\n      const inputCanvas = buffers[0].asCanvasElement();\n\n      if (!inputCanvas) {\n        return buffers;\n      }\n\n      if (!this.modelInitialized) {\n        // return existing buffer, if any\n        buffers[0] = this.canvasVideoFrameBuffer;\n        return buffers;\n      }\n\n      const frameWidth = inputCanvas.width;\n      const frameHeight = inputCanvas.height;\n\n      if (frameWidth === 0 || frameHeight === 0) {\n        return buffers;\n      } // on first execution of process the source width will be zero\n\n\n      if (this.sourceWidth === 0) {\n        this.sourceWidth = frameWidth;\n        this.sourceHeight = frameHeight; // update target canvas size to match the frame size\n\n        this.targetCanvas.width = this.sourceWidth;\n        this.targetCanvas.height = this.sourceHeight;\n        this.logger.info(`${this.filterType} source width: ${this.sourceWidth}`);\n        this.logger.info(`${this.filterType} source height: ${this.sourceHeight}`);\n        this.initOnFirstExecution();\n      }\n\n      if (this.sourceWidth !== frameWidth || this.sourceHeight !== frameHeight) {\n        this.sourceWidth = frameWidth;\n        this.sourceHeight = frameHeight; // update target canvas size to match the frame size\n\n        this.targetCanvas.width = this.sourceWidth;\n        this.targetCanvas.height = this.sourceHeight;\n      }\n\n      try {\n        this.frameCounter.filterSubmitted();\n        let mask = this.mask$.value;\n        const hscale = this.spec.model.input.width / inputCanvas.width;\n        const vscale = this.spec.model.input.height / inputCanvas.height;\n\n        if (this.scaledCanvas === undefined) {\n          this.scaledCanvas = document.createElement('canvas');\n          this.scaledCanvas.width = this.spec.model.input.width;\n          this.scaledCanvas.height = this.spec.model.input.height;\n        }\n\n        const scaledCtx = this.scaledCanvas.getContext('2d');\n        scaledCtx.save();\n        scaledCtx.scale(hscale, vscale);\n        scaledCtx.drawImage(inputCanvas, 0, 0);\n        scaledCtx.restore();\n        const imageData = scaledCtx.getImageData(0, 0, this.scaledCanvas.width, this.scaledCanvas.height); // update the filter mask based on the filter update rate\n\n        if (this.frameNumber % this.videoFramesPerFilterUpdate === 0) {\n          // process frame...\n          const maskPromise = this.mask$.whenNext();\n          this.worker.postMessage({\n            msg: 'predict',\n            payload: imageData\n          }, [imageData.data.buffer]);\n          mask = yield maskPromise;\n        } // It's possible that while waiting for the predict to complete the processor was destroyed.\n        // adding a destroyed check here to ensure the implementation of drawImageWithMask does not throw\n        // an error due to destroyed processor.\n\n\n        if (!this.destroyed) {\n          this.drawImageWithMask(inputCanvas, mask);\n        }\n      } catch (error) {\n        this.logger.error(`could not process ${this.filterType} frame buffer due to ${error}`);\n        return buffers;\n      } finally {\n        this.frameCounter.filterComplete();\n        this.frameNumber++;\n      }\n\n      buffers[0] = this.canvasVideoFrameBuffer;\n      return buffers;\n    });\n  }\n\n  updateVideoFramesPerFilterUpdate(newRate) {\n    if (newRate !== this.videoFramesPerFilterUpdate) {\n      this.videoFramesPerFilterUpdate = newRate;\n      this.logger.info(`Adjusting filter rate to compensate for CPU utilization. ` + `Filter rate is ${this.videoFramesPerFilterUpdate} video frames per filter.`);\n    }\n  }\n  /**\n   * Clean up processor resources\n   */\n\n\n  destroy() {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      this.destroyed = true;\n      this.delegate.removeObserver(this.cpuMonitor);\n      this.canvasVideoFrameBuffer.destroy();\n      (_a = this.worker) === null || _a === void 0 ? void 0 : _a.postMessage({\n        msg: 'destroy'\n      });\n      (_b = this.worker) === null || _b === void 0 ? void 0 : _b.postMessage({\n        msg: 'stop'\n      });\n      (_c = this.targetCanvas) === null || _c === void 0 ? void 0 : _c.remove();\n      this.targetCanvas = undefined;\n      (_d = this.scaledCanvas) === null || _d === void 0 ? void 0 : _d.remove();\n      this.scaledCanvas = undefined;\n      this.logger.info(`${this.filterType} frame process destroyed`);\n    });\n  }\n\n}\n\nexports.default = BackgroundFilterProcessor;\n/** @internal */\n\nclass BackgroundFilterMonitor {\n  constructor(monitoringPeriodMillis, observer) {\n    this.monitoringPeriodMillis = monitoringPeriodMillis;\n    this.observer = observer;\n    this.lastCPUChangeTimestamp = 0;\n  }\n\n  filterCPUUtilizationHigh() {\n    const timestamp = Date.now(); // Allow some time to pass before we check CPU utilization.\n\n    if (timestamp - this.lastCPUChangeTimestamp >= this.monitoringPeriodMillis) {\n      this.lastCPUChangeTimestamp = timestamp;\n      this.observer.reduceCPUUtilization();\n    }\n  }\n\n  frameReceived() {\n    const timestamp = Date.now(); // If a enough time has passed, reset the processor and continue to monitor\n\n    if (timestamp - this.lastCPUChangeTimestamp >= this.monitoringPeriodMillis * 2) {\n      this.lastCPUChangeTimestamp = timestamp;\n      this.observer.increaseCPUUtilization();\n    }\n  }\n\n}\n\nexports.BackgroundFilterMonitor = BackgroundFilterMonitor;","map":{"version":3,"mappings":"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","names":["DeferredObservable","constructor","undefined","whenNext","promise","Promise","resolve","next","value","BackgroundFilterProcessor","filterType","spec","options","delegate","document","createElement","targetCanvas","getContext","CanvasVideoFrameBuffer_1","createWorkerPromise","validateSpec","validateOptions","logger","initCPUMonitor","resolver","reject","Error","model","paths","reportingPeriodMillis","filterCPUUtilization","CPU_MONITORING_PERIOD_MILLIS","MAX_SEGMENTATION_SKIP_RATE","MIN_SEGMENTATION_SKIP_RATE","videoFramesPerFilterUpdate","frameCounter","BackgroundFilterFrameCounter_1","cpuMonitor","BackgroundFilterMonitor","reduceCPUUtilization","updateVideoFramesPerFilterUpdate","Math","min","increaseCPUUtilization","max","addObserver","stringify","JSON","handleInitialize","msg","info","payload","error","initWorkerPromise","worker","postMessage","modelUrl","path","inputHeight","input","height","inputWidth","width","inputChannels","modelRangeMin","range","modelRangeMax","blurPixels","handleLoadModel","loadModelPromise","modelInitialized","handlePredict","mask$","output","handleWorkerEvent","evt","data","loadAssets","loader_1","addEventListener","ev","wasmPath","wasm","simdPath","simd","message","process","buffers","destroyed","frameReceived","framerate","inputCanvas","asCanvasElement","canvasVideoFrameBuffer","frameWidth","frameHeight","sourceWidth","sourceHeight","initOnFirstExecution","filterSubmitted","mask","hscale","vscale","scaledCanvas","scaledCtx","save","scale","drawImage","restore","imageData","getImageData","frameNumber","maskPromise","buffer","drawImageWithMask","filterComplete","newRate","destroy","removeObserver","_a","_b","_c","remove","_d","exports","monitoringPeriodMillis","observer","filterCPUUtilizationHigh","timestamp","Date","now","lastCPUChangeTimestamp"],"sourceRoot":"","sources":["../../src/backgroundfilter/BackgroundFilterProcessor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
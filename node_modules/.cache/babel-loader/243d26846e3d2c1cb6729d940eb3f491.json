{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[ReceiveAudioInputTask]] acquires an audio input.\n */\n\n\nclass ReceiveAudioInputTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'ReceiveAudioInputTask';\n  }\n\n  run() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!((_b = (_a = this.context.meetingSessionConfiguration) === null || _a === void 0 ? void 0 : _a.urls) === null || _b === void 0 ? void 0 : _b.audioHostURL)) {\n        this.context.logger.info('No audio connection: not acquiring audio input');\n        return;\n      }\n\n      if (this.context.activeAudioInput) {\n        this.context.logger.info('an active audio input exists');\n        return;\n      }\n\n      let audioInput;\n\n      try {\n        audioInput = yield this.context.mediaStreamBroker.acquireAudioInputStream();\n      } catch (error) {\n        this.context.logger.warn('could not acquire audio input from current device');\n      }\n\n      if (audioInput) {\n        this.context.activeAudioInput = audioInput;\n        this.context.realtimeController.realtimeSetLocalAudioInput(audioInput);\n      } else {\n        this.context.logger.warn('an audio input is not available');\n      }\n    });\n  }\n\n}\n\nexports.default = ReceiveAudioInputTask;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAEA;;;;;AAGA,MAAqBA,qBAArB,SAAmDC,kBAAnD,CAA2D;EAGzDC,YAAoBC,OAApB,EAAsD;IACpD,MAAMA,OAAO,CAACC,MAAd;IADkB;IAFV,gBAAW,uBAAX;EAIT;;EAEKC,GAAG;;;;MACP,IAAI,EAAC,iBAAKF,OAAL,CAAaG,2BAAb,MAAwC,IAAxC,IAAwCC,aAAxC,GAAwC,MAAxC,GAAwCA,GAAEC,IAA1C,MAA8C,IAA9C,IAA8CC,aAA9C,GAA8C,MAA9C,GAA8CA,GAAEC,YAAjD,CAAJ,EAAmE;QACjE,KAAKP,OAAL,CAAaC,MAAb,CAAoBO,IAApB,CAAyB,gDAAzB;QACA;MACD;;MAED,IAAI,KAAKR,OAAL,CAAaS,gBAAjB,EAAmC;QACjC,KAAKT,OAAL,CAAaC,MAAb,CAAoBO,IAApB,CAAyB,8BAAzB;QACA;MACD;;MACD,IAAIE,UAAJ;;MACA,IAAI;QACFA,UAAU,GAAG,MAAM,KAAKV,OAAL,CAAaW,iBAAb,CAA+BC,uBAA/B,EAAnB;MACD,CAFD,CAEE,OAAOC,KAAP,EAAc;QACd,KAAKb,OAAL,CAAaC,MAAb,CAAoBa,IAApB,CAAyB,mDAAzB;MACD;;MAED,IAAIJ,UAAJ,EAAgB;QACd,KAAKV,OAAL,CAAaS,gBAAb,GAAgCC,UAAhC;QACA,KAAKV,OAAL,CAAae,kBAAb,CAAgCC,0BAAhC,CAA2DN,UAA3D;MACD,CAHD,MAGO;QACL,KAAKV,OAAL,CAAaC,MAAb,CAAoBa,IAApB,CAAyB,iCAAzB;MACD;;EACF;;AA9BwD;;AAA3DG","names":["ReceiveAudioInputTask","BaseTask_1","constructor","context","logger","run","meetingSessionConfiguration","_a","urls","_b","audioHostURL","info","activeAudioInput","audioInput","mediaStreamBroker","acquireAudioInputStream","error","warn","realtimeController","realtimeSetLocalAudioInput","exports"],"sourceRoot":"","sources":["../../src/task/ReceiveAudioInputTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
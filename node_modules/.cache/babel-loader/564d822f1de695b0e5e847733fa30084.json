{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[ParallelGroupTask]] runs a set of tasks in parallel. When canceled, it\n * stops any currently running tasks.\n */\n\n\nclass ParallelGroupTask extends BaseTask_1.default {\n  constructor(logger, taskName, tasksToRunParallel) {\n    super(logger);\n    this.taskName = taskName;\n    this.tasksToRunParallel = tasksToRunParallel;\n\n    for (const task of tasksToRunParallel) {\n      task.setParent(this);\n    }\n  }\n\n  cancel() {\n    for (const task of this.tasksToRunParallel) {\n      this.logger.info(`canceling parallel group task ${this.name()} subtask ${task.name()}`);\n      task.cancel();\n    }\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const taskResults = [];\n\n      for (const task of this.tasksToRunParallel) {\n        this.logger.info(`parallel group task ${this.name()} running subtask ${task.name()}`);\n        taskResults.push(task.run());\n      }\n\n      const failures = [];\n\n      for (let i = 0; i < taskResults.length; i++) {\n        try {\n          yield taskResults[i];\n        } catch (err) {\n          failures.push(`task ${this.tasksToRunParallel[i].name()} failed: ${err.message}`);\n        }\n\n        this.logger.info(`parallel group task ${this.name()} completed subtask ${this.tasksToRunParallel[i].name()}`);\n      }\n\n      if (failures.length > 0) {\n        const failureMessage = failures.join(', ');\n        this.logAndThrow(`parallel group task ${this.name()} failed for tasks: ${failureMessage}`);\n      }\n\n      this.logger.info(`parallel group task ${this.name()} completed`);\n    });\n  }\n\n}\n\nexports.default = ParallelGroupTask;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAGA;;;;;;AAIA,MAAqBA,iBAArB,SAA+CC,kBAA/C,CAAuD;EACrDC,YAAYC,MAAZ,EAAsCC,QAAtC,EAAgEC,kBAAhE,EAA0F;IACxF,MAAMF,MAAN;IADoC;IAA0B;;IAE9D,KAAK,MAAMG,IAAX,IAAmBD,kBAAnB,EAAuC;MACrCC,IAAI,CAACC,SAAL,CAAe,IAAf;IACD;EACF;;EAEDC,MAAM;IACJ,KAAK,MAAMF,IAAX,IAAmB,KAAKD,kBAAxB,EAA4C;MAC1C,KAAKF,MAAL,CAAYM,IAAZ,CAAiB,iCAAiC,KAAKC,IAAL,EAAW,YAAYJ,IAAI,CAACI,IAAL,EAAW,EAApF;MACAJ,IAAI,CAACE,MAAL;IACD;EACF;;EAEKG,GAAG;;MACP,MAAMC,WAAW,GAAoB,EAArC;;MACA,KAAK,MAAMN,IAAX,IAAmB,KAAKD,kBAAxB,EAA4C;QAC1C,KAAKF,MAAL,CAAYM,IAAZ,CAAiB,uBAAuB,KAAKC,IAAL,EAAW,oBAAoBJ,IAAI,CAACI,IAAL,EAAW,EAAlF;QACAE,WAAW,CAACC,IAAZ,CAAiBP,IAAI,CAACK,GAAL,EAAjB;MACD;;MACD,MAAMG,QAAQ,GAAa,EAA3B;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACI,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;QAC3C,IAAI;UACF,MAAMH,WAAW,CAACG,CAAD,CAAjB;QACD,CAFD,CAEE,OAAOE,GAAP,EAAY;UACZH,QAAQ,CAACD,IAAT,CAAc,QAAQ,KAAKR,kBAAL,CAAwBU,CAAxB,EAA2BL,IAA3B,EAAiC,YAAYO,GAAG,CAACC,OAAO,EAA9E;QACD;;QACD,KAAKf,MAAL,CAAYM,IAAZ,CACE,uBAAuB,KAAKC,IAAL,EAAW,sBAAsB,KAAKL,kBAAL,CAAwBU,CAAxB,EAA2BL,IAA3B,EAAiC,EAD3F;MAGD;;MACD,IAAII,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;QACvB,MAAMG,cAAc,GAAGL,QAAQ,CAACM,IAAT,CAAc,IAAd,CAAvB;QACA,KAAKC,WAAL,CAAiB,uBAAuB,KAAKX,IAAL,EAAW,sBAAsBS,cAAc,EAAvF;MACD;;MACD,KAAKhB,MAAL,CAAYM,IAAZ,CAAiB,uBAAuB,KAAKC,IAAL,EAAW,YAAnD;IACD;EAAA;;AArCoD;;AAAvDY","names":["ParallelGroupTask","BaseTask_1","constructor","logger","taskName","tasksToRunParallel","task","setParent","cancel","info","name","run","taskResults","push","failures","i","length","err","message","failureMessage","join","logAndThrow","exports"],"sourceRoot":"","sources":["../../src/task/ParallelGroupTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * [[VideoPriorityBasedPolicyConfig]] contains the network issue response delay and network issue recovery delay.\n */\n\nclass VideoPriorityBasedPolicyConfig {\n  /** Initializes a [[VideoPriorityBasedPolicyConfig]] with the network event delays.\n   *\n   * @param networkIssueResponseDelayFactor Delays before reducing subscribed video bitrate. Input should be a value between 0 and 1.\n   * @param networkIssueRecoveryDelayFactor Delays before starting to increase bitrates after a network event and\n   * delays between increasing video bitrates on each individual stream. Input should be a value between 0 and 1.\n   */\n  constructor() {\n    let networkIssueResponseDelayFactor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let networkIssueRecoveryDelayFactor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.networkIssueResponseDelayFactor = networkIssueResponseDelayFactor;\n    this.networkIssueRecoveryDelayFactor = networkIssueRecoveryDelayFactor;\n    this.currentNetworkEvent = 0\n    /* Stable */\n    ;\n    this.bandwidthDecreaseTimestamp = 0; // the last time bandwidth decreases\n\n    this.referenceBitrate = 0;\n\n    if (networkIssueResponseDelayFactor < 0) {\n      networkIssueResponseDelayFactor = 0;\n    } else if (networkIssueResponseDelayFactor > 1) {\n      networkIssueResponseDelayFactor = 1;\n    }\n\n    this.networkIssueResponseDelayFactor = networkIssueResponseDelayFactor;\n\n    if (networkIssueRecoveryDelayFactor < 0) {\n      networkIssueRecoveryDelayFactor = 0;\n    } else if (networkIssueRecoveryDelayFactor > 1) {\n      networkIssueRecoveryDelayFactor = 1;\n    }\n\n    this.networkIssueRecoveryDelayFactor = networkIssueRecoveryDelayFactor;\n  } // determine if subscribe is allowed based on network issue/recovery delays\n\n\n  allowSubscribe(numberOfParticipants, currentEstimated) {\n    let timeBeforeAllowSubscribeMs = 0;\n    const previousNetworkEvent = this.currentNetworkEvent;\n\n    if (currentEstimated > this.referenceBitrate) {\n      // if bw increases\n      this.currentNetworkEvent = 2\n      /* Increase */\n      ;\n      this.referenceBitrate = currentEstimated;\n      return true;\n    } else if (currentEstimated < this.referenceBitrate) {\n      // if bw decreases, we use response delay\n      this.currentNetworkEvent = 1\n      /* Decrease */\n      ;\n      timeBeforeAllowSubscribeMs = this.getSubscribeDelay(this.currentNetworkEvent, numberOfParticipants);\n\n      if (previousNetworkEvent !== 1\n      /* Decrease */\n      ) {\n        this.bandwidthDecreaseTimestamp = Date.now();\n      } else if (Date.now() - this.bandwidthDecreaseTimestamp > timeBeforeAllowSubscribeMs) {\n        this.referenceBitrate = currentEstimated;\n        return true;\n      }\n\n      return false;\n    } else {\n      this.currentNetworkEvent = 0\n      /* Stable */\n      ;\n      return false;\n    }\n  } // convert network event delay factor to actual delay in ms\n\n\n  getSubscribeDelay(event, numberOfParticipants) {\n    // left and right boundary of the delay\n    let subscribeDelay = VideoPriorityBasedPolicyConfig.MINIMUM_DELAY_MS;\n    const range = VideoPriorityBasedPolicyConfig.MAXIMUM_DELAY_MS - VideoPriorityBasedPolicyConfig.MINIMUM_DELAY_MS;\n    const responseFactor = this.networkIssueResponseDelayFactor;\n\n    switch (event) {\n      case 1\n      /* Decrease */\n      :\n        // we include number of participants here since bigger size of the meeting will generate higher bitrate\n        subscribeDelay += range * responseFactor * (1 + numberOfParticipants / 10);\n        subscribeDelay = Math.min(VideoPriorityBasedPolicyConfig.MAXIMUM_DELAY_MS, subscribeDelay);\n        break;\n    }\n\n    return subscribeDelay;\n  }\n\n}\n\nexports.default = VideoPriorityBasedPolicyConfig;\nVideoPriorityBasedPolicyConfig.MINIMUM_DELAY_MS = 2000;\nVideoPriorityBasedPolicyConfig.MAXIMUM_DELAY_MS = 8000; // presets\n\nVideoPriorityBasedPolicyConfig.Default = new VideoPriorityBasedPolicyConfig(0, 0);\nVideoPriorityBasedPolicyConfig.UnstableNetworkPreset = new VideoPriorityBasedPolicyConfig(0, 1);\nVideoPriorityBasedPolicyConfig.StableNetworkPreset = new VideoPriorityBasedPolicyConfig(1, 0);","map":{"version":3,"mappings":"cAAA;AACA;;;;;AASA;;;;AAGA,MAAqBA,8BAArB,CAAmD;EAajD;;;;;;EAMAC,cAEoD;IAAA,IAD3CC,+BAC2C,uEADD,CACC;IAAA,IAA3CC,+BAA2C,uEAAD,CAAC;IAD3C;IACA;IAZD,2BAAmB;IAAA;IAAnB;IACA,kCAAqC,CAArC,CAW4C,CAXJ;;IACxC,wBAA2B,CAA3B;;IAYN,IAAID,+BAA+B,GAAG,CAAtC,EAAyC;MACvCA,+BAA+B,GAAG,CAAlC;IACD,CAFD,MAEO,IAAIA,+BAA+B,GAAG,CAAtC,EAAyC;MAC9CA,+BAA+B,GAAG,CAAlC;IACD;;IACD,KAAKA,+BAAL,GAAuCA,+BAAvC;;IAEA,IAAIC,+BAA+B,GAAG,CAAtC,EAAyC;MACvCA,+BAA+B,GAAG,CAAlC;IACD,CAFD,MAEO,IAAIA,+BAA+B,GAAG,CAAtC,EAAyC;MAC9CA,+BAA+B,GAAG,CAAlC;IACD;;IACD,KAAKA,+BAAL,GAAuCA,+BAAvC;EACD,CApCgD,CAsCjD;;;EACAC,cAAc,CAACC,oBAAD,EAA+BC,gBAA/B,EAAuD;IACnE,IAAIC,0BAA0B,GAAG,CAAjC;IACA,MAAMC,oBAAoB,GAAG,KAAKC,mBAAlC;;IAEA,IAAIH,gBAAgB,GAAG,KAAKI,gBAA5B,EAA8C;MAC5C;MACA,KAAKD,mBAAL,GAAwB;MAAA;MAAxB;MACA,KAAKC,gBAAL,GAAwBJ,gBAAxB;MACA,OAAO,IAAP;IACD,CALD,MAKO,IAAIA,gBAAgB,GAAG,KAAKI,gBAA5B,EAA8C;MACnD;MACA,KAAKD,mBAAL,GAAwB;MAAA;MAAxB;MACAF,0BAA0B,GAAG,KAAKI,iBAAL,CAC3B,KAAKF,mBADsB,EAE3BJ,oBAF2B,CAA7B;;MAKA,IAAIG,oBAAoB;MAAA;MAAxB,EAAoD;QAClD,KAAKI,0BAAL,GAAkCC,IAAI,CAACC,GAAL,EAAlC;MACD,CAFD,MAEO,IAAID,IAAI,CAACC,GAAL,KAAa,KAAKF,0BAAlB,GAA+CL,0BAAnD,EAA+E;QACpF,KAAKG,gBAAL,GAAwBJ,gBAAxB;QACA,OAAO,IAAP;MACD;;MACD,OAAO,KAAP;IACD,CAfM,MAeA;MACL,KAAKG,mBAAL,GAAwB;MAAA;MAAxB;MACA,OAAO,KAAP;IACD;EACF,CAnEgD,CAqEjD;;;EACQE,iBAAiB,CAACI,KAAD,EAAsBV,oBAAtB,EAAkD;IACzE;IACA,IAAIW,cAAc,GAAGhB,8BAA8B,CAACiB,gBAApD;IACA,MAAMC,KAAK,GACTlB,8BAA8B,CAACmB,gBAA/B,GACAnB,8BAA8B,CAACiB,gBAFjC;IAIA,MAAMG,cAAc,GAAG,KAAKlB,+BAA5B;;IAEA,QAAQa,KAAR;MACE;MAAA;MAAA;QACE;QACAC,cAAc,IAAIE,KAAK,GAAGE,cAAR,IAA0B,IAAIf,oBAAoB,GAAG,EAArD,CAAlB;QACAW,cAAc,GAAGK,IAAI,CAACC,GAAL,CAAStB,8BAA8B,CAACmB,gBAAxC,EAA0DH,cAA1D,CAAjB;QACA;IALJ;;IAQA,OAAOA,cAAP;EACD;;AAxFgD;;AAAnDO;AAC0BvB,kDAAmB,IAAnB;AACAA,kDAAmB,IAAnB,C,CAExB;;AACgBA,yCAAU,IAAIA,8BAAJ,CAAmC,CAAnC,EAAsC,CAAtC,CAAV;AACAA,uDAAwB,IAAIA,8BAAJ,CAAmC,CAAnC,EAAsC,CAAtC,CAAxB;AACAA,qDAAsB,IAAIA,8BAAJ,CAAmC,CAAnC,EAAsC,CAAtC,CAAtB","names":["VideoPriorityBasedPolicyConfig","constructor","networkIssueResponseDelayFactor","networkIssueRecoveryDelayFactor","allowSubscribe","numberOfParticipants","currentEstimated","timeBeforeAllowSubscribeMs","previousNetworkEvent","currentNetworkEvent","referenceBitrate","getSubscribeDelay","bandwidthDecreaseTimestamp","Date","now","event","subscribeDelay","MINIMUM_DELAY_MS","range","MAXIMUM_DELAY_MS","responseFactor","Math","min","exports"],"sourceRoot":"","sources":["../../src/videodownlinkbandwidthpolicy/VideoPriorityBasedPolicyConfig.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
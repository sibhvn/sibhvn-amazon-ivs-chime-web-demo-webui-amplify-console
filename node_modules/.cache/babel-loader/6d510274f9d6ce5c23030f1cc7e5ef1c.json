{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ConnectionHealthPolicyConfiguration_1 = require(\"../connectionhealthpolicy/ConnectionHealthPolicyConfiguration\");\n\nconst Utils_1 = require(\"../utils/Utils\");\n\nconst MeetingSessionCredentials_1 = require(\"./MeetingSessionCredentials\");\n\nconst MeetingSessionURLs_1 = require(\"./MeetingSessionURLs\");\n/**\n * [[MeetingSessionConfiguration]] contains the information necessary to start\n * a session.\n */\n\n\nclass MeetingSessionConfiguration {\n  /**\n   * Constructs a MeetingSessionConfiguration optionally with a chime:CreateMeeting and\n   * chime:CreateAttendee response. You can pass in either a JSON object containing the\n   * responses, or a JSON object containing the information in the Meeting and Attendee\n   * root-level fields. Examples:\n   *\n   * ```\n   * const configuration = new MeetingSessionConfiguration({\n   *   \"Meeting\": {\n   *      \"MeetingId\": \"...\",\n   *      \"MediaPlacement\": {\n   *        \"AudioHostUrl\": \"...\",\n   *        \"ScreenDataUrl\": \"...\",\n   *        \"ScreenSharingUrl\": \"...\",\n   *        \"ScreenViewingUrl\": \"...\",\n   *        \"SignalingUrl\": \"...\",\n   *        \"TurnControlUrl\": \"...\"\n   *      }\n   *    }\n   *   }\n   * }, {\n   *   \"Attendee\": {\n   *     \"ExternalUserId\": \"...\",\n   *     \"AttendeeId\": \"...\",\n   *     \"JoinToken\": \"...\"\n   *   }\n   * });\n   * ```\n   *\n   * ```\n   * const configuration = new MeetingSessionConfiguration({\n   *   \"MeetingId\": \"...\",\n   *   \"MediaPlacement\": {\n   *     \"AudioHostUrl\": \"...\",\n   *     \"ScreenDataUrl\": \"...\",\n   *     \"ScreenSharingUrl\": \"...\",\n   *     \"ScreenViewingUrl\": \"...\",\n   *     \"SignalingUrl\": \"...\",\n   *     \"TurnControlUrl\": \"...\"\n   *   }\n   * }, {\n   *   \"ExternalUserId\": \"...\",\n   *   \"AttendeeId\": \"...\",\n   *   \"JoinToken\": \"...\"\n   * });\n   * ```\n   */\n  constructor(createMeetingResponse, createAttendeeResponse) {\n    /**\n     * The id of the meeting the session is joining.\n     */\n    this.meetingId = null;\n    /**\n     * The external meeting id of the meeting the session is joining.\n     */\n\n    this.externalMeetingId = null;\n    /**\n     * The credentials used to authenticate the session.\n     */\n\n    this.credentials = null;\n    /**\n     * The URLs the session uses to reach the meeting service.\n     */\n\n    this.urls = null;\n    /**\n     * Maximum amount of time in milliseconds to allow for connecting.\n     */\n\n    this.connectionTimeoutMs = 15000;\n    /**\n     * Maximum amount of time in milliseconds to allow for a screen sharing connection.\n     */\n\n    this.screenSharingTimeoutMs = 5000;\n    /**\n     * Maximum amount of time in milliseconds to allow for a screen viewing connection.\n     */\n\n    this.screenViewingTimeoutMs = 5000;\n    /**\n     * Maximum amount of time in milliseconds to wait for the current attendee to be present\n     * after initial connection.\n     */\n\n    this.attendeePresenceTimeoutMs = 0;\n    /**\n     * Configuration for connection health policies: reconnection, unusable audio warning connection,\n     * and signal strength bars connection.\n     */\n\n    this.connectionHealthPolicyConfiguration = new ConnectionHealthPolicyConfiguration_1.default();\n    /**\n     * Maximum amount of time in milliseconds to allow for reconnecting.\n     */\n\n    this.reconnectTimeoutMs = 120 * 1000;\n    /**\n     * Fixed wait amount in milliseconds between reconnecting attempts.\n     */\n\n    this.reconnectFixedWaitMs = 0;\n    /**\n     * The short back-off time in milliseconds between reconnecting attempts.\n     */\n\n    this.reconnectShortBackOffMs = 1 * 1000;\n    /**\n     * The long back-off time in milliseconds between reconnecting attempts.\n     */\n\n    this.reconnectLongBackOffMs = 5 * 1000;\n    /**\n     * Feature flag to enable Chromium-based browsers.\n     *\n     * This field is deprecated and will be removed in future version. Right now it will always be regarded as true,\n     * since Plan B is not supported for Chromium-based browsers any more.\n     */\n\n    this.enableUnifiedPlanForChromiumBasedBrowsers = true;\n    /**\n     * Feature flag to enable Simulcast\n     */\n\n    this.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;\n    /**\n     * Video downlink bandwidth policy to determine which remote videos\n     * are subscribed to.\n     */\n\n    this.videoDownlinkBandwidthPolicy = null;\n    /**\n     * Video uplink bandwidth policy to determine the bandwidth constraints\n     * of the local video.\n     */\n\n    this.videoUplinkBandwidthPolicy = null;\n    /**\n     * Keep the last frame of the video when a remote video is paused via the pauseVideoTile API.\n     * This is done by not clearing the srcObject property of the videoElement.\n     */\n\n    this.keepLastFrameWhenPaused = false;\n\n    if (createMeetingResponse) {\n      createMeetingResponse = Utils_1.toLowerCasePropertyNames(createMeetingResponse);\n\n      if (createMeetingResponse.meeting) {\n        createMeetingResponse = createMeetingResponse.meeting;\n      }\n\n      this.meetingId = createMeetingResponse.meetingid;\n      this.externalMeetingId = createMeetingResponse.externalmeetingid;\n      this.urls = new MeetingSessionURLs_1.default();\n      this.urls.audioHostURL = createMeetingResponse.mediaplacement.audiohosturl;\n      this.urls.screenDataURL = createMeetingResponse.mediaplacement.screendataurl;\n      this.urls.screenSharingURL = createMeetingResponse.mediaplacement.screensharingurl;\n      this.urls.screenViewingURL = createMeetingResponse.mediaplacement.screenviewingurl;\n      this.urls.signalingURL = createMeetingResponse.mediaplacement.signalingurl;\n      this.urls.turnControlURL = createMeetingResponse.mediaplacement.turncontrolurl;\n\n      if (createMeetingResponse.mediaplacement.eventingestionurl) {\n        this.urls.eventIngestionURL = createMeetingResponse.mediaplacement.eventingestionurl;\n      }\n    }\n\n    if (createAttendeeResponse) {\n      createAttendeeResponse = Utils_1.toLowerCasePropertyNames(createAttendeeResponse);\n\n      if (createAttendeeResponse.attendee) {\n        createAttendeeResponse = createAttendeeResponse.attendee;\n      }\n\n      this.credentials = new MeetingSessionCredentials_1.default();\n      this.credentials.attendeeId = createAttendeeResponse.attendeeid;\n      this.credentials.externalUserId = createAttendeeResponse.externaluserid;\n      this.credentials.joinToken = createAttendeeResponse.jointoken;\n    }\n  }\n\n}\n\nexports.default = MeetingSessionConfiguration;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAGA;;AACA;;AAGA;;AACA;AAEA;;;;;;AAIA,MAAqBA,2BAArB,CAAgD;EAyG9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+CAC,YAAYC,qBAAZ,EAAyCC,sBAAzC,EAAqE;IAvJrE;;;IAGA,iBAA2B,IAA3B;IAEA;;;;IAGA,yBAAmC,IAAnC;IAEA;;;;IAGA,mBAAgD,IAAhD;IAEA;;;;IAGA,YAAkC,IAAlC;IAEA;;;;IAGA,2BAA8B,KAA9B;IAEA;;;;IAGA,8BAAiC,IAAjC;IAEA;;;;IAGA,8BAAiC,IAAjC;IAEA;;;;;IAIA,iCAAoC,CAApC;IAEA;;;;;IAIA,2CAA2E,IAAIC,6CAAJ,EAA3E;IAEA;;;;IAGA,0BAAqB,MAAM,IAA3B;IAEA;;;;IAGA,4BAAuB,CAAvB;IAEA;;;;IAGA,+BAA0B,IAAI,IAA9B;IAEA;;;;IAGA,8BAAyB,IAAI,IAA7B;IAEA;;;;;;;IAMA,iDAAqD,IAArD;IAEA;;;;IAGA,0DAA8D,KAA9D;IAEA;;;;;IAIA,oCAA6D,IAA7D;IAEA;;;;;IAIA,kCAAyD,IAAzD;IAQA;;;;;IAIA,+BAAmC,KAAnC;;IAkDE,IAAIF,qBAAJ,EAA2B;MACzBA,qBAAqB,GAAGG,iCAAyBH,qBAAzB,CAAxB;;MACA,IAAIA,qBAAqB,CAACI,OAA1B,EAAmC;QACjCJ,qBAAqB,GAAGA,qBAAqB,CAACI,OAA9C;MACD;;MACD,KAAKC,SAAL,GAAiBL,qBAAqB,CAACM,SAAvC;MACA,KAAKC,iBAAL,GAAyBP,qBAAqB,CAACQ,iBAA/C;MACA,KAAKC,IAAL,GAAY,IAAIC,4BAAJ,EAAZ;MACA,KAAKD,IAAL,CAAUE,YAAV,GAAyBX,qBAAqB,CAACY,cAAtB,CAAqCC,YAA9D;MACA,KAAKJ,IAAL,CAAUK,aAAV,GAA0Bd,qBAAqB,CAACY,cAAtB,CAAqCG,aAA/D;MACA,KAAKN,IAAL,CAAUO,gBAAV,GAA6BhB,qBAAqB,CAACY,cAAtB,CAAqCK,gBAAlE;MACA,KAAKR,IAAL,CAAUS,gBAAV,GAA6BlB,qBAAqB,CAACY,cAAtB,CAAqCO,gBAAlE;MACA,KAAKV,IAAL,CAAUW,YAAV,GAAyBpB,qBAAqB,CAACY,cAAtB,CAAqCS,YAA9D;MACA,KAAKZ,IAAL,CAAUa,cAAV,GAA2BtB,qBAAqB,CAACY,cAAtB,CAAqCW,cAAhE;;MACA,IAAIvB,qBAAqB,CAACY,cAAtB,CAAqCY,iBAAzC,EAA4D;QAC1D,KAAKf,IAAL,CAAUgB,iBAAV,GAA8BzB,qBAAqB,CAACY,cAAtB,CAAqCY,iBAAnE;MACD;IACF;;IACD,IAAIvB,sBAAJ,EAA4B;MAC1BA,sBAAsB,GAAGE,iCAAyBF,sBAAzB,CAAzB;;MACA,IAAIA,sBAAsB,CAACyB,QAA3B,EAAqC;QACnCzB,sBAAsB,GAAGA,sBAAsB,CAACyB,QAAhD;MACD;;MACD,KAAKC,WAAL,GAAmB,IAAIC,mCAAJ,EAAnB;MACA,KAAKD,WAAL,CAAiBE,UAAjB,GAA8B5B,sBAAsB,CAAC6B,UAArD;MACA,KAAKH,WAAL,CAAiBI,cAAjB,GAAkC9B,sBAAsB,CAAC+B,cAAzD;MACA,KAAKL,WAAL,CAAiBM,SAAjB,GAA6BhC,sBAAsB,CAACiC,SAApD;IACD;EACF;;AArL6C;;AAAhDC","names":["MeetingSessionConfiguration","constructor","createMeetingResponse","createAttendeeResponse","ConnectionHealthPolicyConfiguration_1","Utils_1","meeting","meetingId","meetingid","externalMeetingId","externalmeetingid","urls","MeetingSessionURLs_1","audioHostURL","mediaplacement","audiohosturl","screenDataURL","screendataurl","screenSharingURL","screensharingurl","screenViewingURL","screenviewingurl","signalingURL","signalingurl","turnControlURL","turncontrolurl","eventingestionurl","eventIngestionURL","attendee","credentials","MeetingSessionCredentials_1","attendeeId","attendeeid","externalUserId","externaluserid","joinToken","jointoken","exports"],"sourceRoot":"","sources":["../../src/meetingsession/MeetingSessionConfiguration.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
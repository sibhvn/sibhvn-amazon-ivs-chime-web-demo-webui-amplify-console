{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass DefaultDevicePixelRatioMonitor {\n  constructor(devicePixelRatioSource, logger) {\n    this.devicePixelRatioSource = devicePixelRatioSource;\n    this.observerQueue = new Set();\n\n    this.mediaQueryListener = () => {\n      this.observerQueue.forEach(tileObserver => {\n        tileObserver.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());\n      });\n    };\n\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const mediaQueryList = matchMedia(`(resolution: ${this.devicePixelRatioSource.devicePixelRatio()}dppx)`);\n\n    if (typeof mediaQueryList.addEventListener === 'function') {\n      mediaQueryList.addEventListener('change', this.mediaQueryListener);\n      this.mediaQueryList = mediaQueryList;\n    } else if (typeof mediaQueryList.addListener === 'function') {\n      mediaQueryList.addListener(this.mediaQueryListener);\n      this.mediaQueryList = mediaQueryList;\n    } else {\n      logger.warn('ignoring DefaultDevicePixelRatioMonitor');\n    }\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.mediaQueryList) {\n        if (typeof this.mediaQueryList.addEventListener === 'function') {\n          this.mediaQueryList.removeEventListener('change', this.mediaQueryListener);\n        } else {\n          this.mediaQueryList.removeListener(this.mediaQueryListener);\n        }\n      }\n\n      delete this.mediaQueryListener;\n      this.observerQueue.clear();\n    });\n  }\n\n  registerObserver(observer) {\n    this.observerQueue.add(observer);\n    observer.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());\n  }\n\n  removeObserver(observer) {\n    this.observerQueue.delete(observer);\n  }\n\n}\n\nexports.default = DefaultDevicePixelRatioMonitor;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAqBA,8BAArB,CAAmD;EAKjDC,YAAoBC,sBAApB,EAAoEC,MAApE,EAAkF;IAA9D;IAHZ,qBAAgB,IAAIC,GAAJ,EAAhB;;IAkCR,0BAAqB,MAAW;MAC9B,KAAKC,aAAL,CAAmBC,OAAnB,CAA2BC,YAAY,IAAG;QACxCA,YAAY,CAACC,uBAAb,CAAqC,KAAKN,sBAAL,CAA4BO,gBAA5B,EAArC;MACD,CAFD;IAGD,CAJD;;IA9BE,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;MACjC;IACD;;IAED,MAAMC,cAAc,GAAGC,UAAU,CAC/B,gBAAgB,KAAKV,sBAAL,CAA4BO,gBAA5B,EAA8C,OAD/B,CAAjC;;IAGA,IAAI,OAAOE,cAAc,CAACE,gBAAtB,KAA2C,UAA/C,EAA2D;MACzDF,cAAc,CAACE,gBAAf,CAAgC,QAAhC,EAA0C,KAAKC,kBAA/C;MACA,KAAKH,cAAL,GAAsBA,cAAtB;IACD,CAHD,MAGO,IAAI,OAAOA,cAAc,CAACI,WAAtB,KAAsC,UAA1C,EAAsD;MAC3DJ,cAAc,CAACI,WAAf,CAA2B,KAAKD,kBAAhC;MACA,KAAKH,cAAL,GAAsBA,cAAtB;IACD,CAHM,MAGA;MACLR,MAAM,CAACa,IAAP,CAAY,yCAAZ;IACD;EACF;;EAEKC,OAAO;;MACX,IAAI,KAAKN,cAAT,EAAyB;QACvB,IAAI,OAAO,KAAKA,cAAL,CAAoBE,gBAA3B,KAAgD,UAApD,EAAgE;UAC9D,KAAKF,cAAL,CAAoBO,mBAApB,CAAwC,QAAxC,EAAkD,KAAKJ,kBAAvD;QACD,CAFD,MAEO;UACL,KAAKH,cAAL,CAAoBQ,cAApB,CAAmC,KAAKL,kBAAxC;QACD;MACF;;MACD,OAAO,KAAKA,kBAAZ;MACA,KAAKT,aAAL,CAAmBe,KAAnB;IACD;EAAA;;EAQDC,gBAAgB,CAACC,QAAD,EAAmC;IACjD,KAAKjB,aAAL,CAAmBkB,GAAnB,CAAuBD,QAAvB;IACAA,QAAQ,CAACd,uBAAT,CAAiC,KAAKN,sBAAL,CAA4BO,gBAA5B,EAAjC;EACD;;EAEDe,cAAc,CAACF,QAAD,EAAmC;IAC/C,KAAKjB,aAAL,CAAmBoB,MAAnB,CAA0BH,QAA1B;EACD;;AAjDgD;;AAAnDI","names":["DefaultDevicePixelRatioMonitor","constructor","devicePixelRatioSource","logger","Set","observerQueue","forEach","tileObserver","devicePixelRatioChanged","devicePixelRatio","window","mediaQueryList","matchMedia","addEventListener","mediaQueryListener","addListener","warn","destroy","removeEventListener","removeListener","clear","registerObserver","observer","add","removeObserver","delete","exports"],"sourceRoot":"","sources":["../../src/devicepixelratiomonitor/DefaultDevicePixelRatioMonitor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
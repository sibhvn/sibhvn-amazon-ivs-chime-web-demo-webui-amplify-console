{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst MeetingSessionTURNCredentials_1 = require(\"../meetingsession/MeetingSessionTURNCredentials\");\n\nconst DefaultModality_1 = require(\"../modality/DefaultModality\");\n\nconst Versioning_1 = require(\"../versioning/Versioning\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[ReceiveTURNCredentialsTask]] asynchronously retrieves TURN credentials.\n */\n\n\nclass ReceiveTURNCredentialsTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'ReceiveTURNCredentialsTask';\n    this.url = context.meetingSessionConfiguration.urls.turnControlURL;\n    this.meetingId = context.meetingSessionConfiguration.meetingId;\n    this.joinToken = context.meetingSessionConfiguration.credentials.joinToken;\n  }\n\n  cancel() {\n    // Just in case. The baseCancel behavior should prevent this.\n\n    /* istanbul ignore else */\n    if (this.cancelPromise) {\n      const error = new Error(`canceling ${this.name()}`);\n      this.cancelPromise(error);\n      delete this.cancelPromise;\n    }\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.context.turnCredentials) {\n        this.context.logger.info('TURN credentials available, skipping credentials fetch');\n        return;\n      }\n\n      this.context.logger.error('missing TURN credentials - falling back to fetch');\n\n      if (!this.url) {\n        this.context.logger.info('TURN control url not supplied, skipping credentials fetch');\n        return;\n      }\n\n      const options = {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'omit',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Chime-Auth-Token': '_aws_wt_session=' + new DefaultModality_1.default(this.joinToken).base()\n        },\n        redirect: 'follow',\n        referrer: 'no-referrer',\n        body: JSON.stringify({\n          meetingId: this.meetingId\n        })\n      };\n      this.context.logger.info(`requesting TURN credentials from ${this.url}`); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const responseBodyJson = yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        this.cancelPromise = error => {\n          reject(error);\n        };\n\n        try {\n          const responseBody = yield fetch(Versioning_1.default.urlWithVersion(this.url), options);\n          this.context.logger.info(`received TURN credentials`);\n\n          if (responseBody.status && responseBody.status === 403) {\n            reject(new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.TURNCredentialsForbidden}`));\n            return;\n          }\n\n          if (responseBody.status && responseBody.status === 404) {\n            reject(new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.MeetingEnded}`));\n            return;\n          }\n\n          resolve(yield responseBody.json());\n        } catch (error) {\n          reject(error);\n        } finally {\n          delete this.cancelPromise;\n        }\n      }));\n      this.context.turnCredentials = new MeetingSessionTURNCredentials_1.default();\n      this.context.turnCredentials.password = responseBodyJson.password;\n      this.context.turnCredentials.ttl = responseBodyJson.ttl;\n      this.context.turnCredentials.uris = responseBodyJson.uris.map(uri => {\n        return this.context.meetingSessionConfiguration.urls.urlRewriter(uri);\n      }).filter(uri => {\n        return !!uri;\n      });\n      this.context.turnCredentials.username = responseBodyJson.username;\n    });\n  }\n\n}\n\nexports.default = ReceiveTURNCredentialsTask;","map":{"version":3,"mappings":"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","names":["ReceiveTURNCredentialsTask","BaseTask_1","constructor","context","logger","url","meetingSessionConfiguration","urls","turnControlURL","meetingId","joinToken","credentials","cancel","cancelPromise","error","Error","name","run","turnCredentials","info","options","method","mode","cache","headers","DefaultModality_1","base","redirect","referrer","body","JSON","stringify","responseBodyJson","Promise","resolve","reject","__awaiter","responseBody","fetch","Versioning_1","urlWithVersion","status","MeetingSessionStatusCode_1","TURNCredentialsForbidden","MeetingEnded","json","MeetingSessionTURNCredentials_1","password","ttl","uris","map","uri","urlRewriter","filter","username","exports"],"sourceRoot":"","sources":["../../src/task/ReceiveTURNCredentialsTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
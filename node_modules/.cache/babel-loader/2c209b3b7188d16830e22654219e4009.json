{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Types_1 = require(\"../utils/Types\");\n\nclass SignalingAndMetricsConnectionMonitor {\n  constructor(audioVideoController, realtimeController, videoTileController, connectionHealthData, pingPong, statsCollector) {\n    this.audioVideoController = audioVideoController;\n    this.realtimeController = realtimeController;\n    this.videoTileController = videoTileController;\n    this.connectionHealthData = connectionHealthData;\n    this.pingPong = pingPong;\n    this.statsCollector = statsCollector;\n    this.isActive = false;\n    this.hasSeenValidPacketMetricsBefore = false;\n    this.lastAvailableSendBandwidthKbps = 0;\n    this.lastAvailableRecvBandwidthKbps = 0;\n    this.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(signalStrength => {\n      if (this.isActive) {\n        this.receiveSignalStrengthChange(signalStrength);\n      }\n    });\n  }\n\n  start() {\n    this.isActive = true;\n    this.pingPong.addObserver(this);\n    this.pingPong.start();\n    this.audioVideoController.addObserver(this);\n  }\n\n  stop() {\n    this.isActive = false;\n    this.pingPong.removeObserver(this);\n    this.pingPong.stop();\n    this.audioVideoController.removeObserver(this);\n  }\n\n  receiveSignalStrengthChange(signalStrength) {\n    if (signalStrength === 0) {\n      this.connectionHealthData.setLastNoSignalTimestampMs(Date.now());\n    } else if (signalStrength <= 0.5) {\n      this.connectionHealthData.setLastWeakSignalTimestampMs(Date.now());\n    } else {\n      this.connectionHealthData.setLastGoodSignalTimestampMs(Date.now());\n    }\n\n    this.updateConnectionHealth();\n  }\n\n  didReceivePong(_id, latencyMs, clockSkewMs) {\n    this.connectionHealthData.setConsecutiveMissedPongs(0);\n    this.statsCollector.logLatency('ping_pong', latencyMs);\n    this.statsCollector.logLatency('ping_pong_clock_skew', clockSkewMs);\n    this.updateConnectionHealth();\n  }\n\n  didMissPongs() {\n    this.connectionHealthData.setConsecutiveMissedPongs(this.connectionHealthData.consecutiveMissedPongs + 1);\n    this.updateConnectionHealth();\n  }\n\n  metricsDidReceive(clientMetricReport) {\n    let packetsReceived = 0;\n    let fractionPacketsLostInbound = 0;\n    const metricReport = clientMetricReport.getObservableMetrics();\n    const potentialPacketsReceived = metricReport.audioPacketsReceived;\n    const potentialFractionPacketsLostInbound = metricReport.audioPacketsReceivedFractionLoss;\n    let videoUpstreamBitrateKbps = 0;\n    const videoUpstreamPacketPerSecond = metricReport.videoPacketSentPerSecond;\n    const videoUpstreamBitrate = metricReport.videoUpstreamBitrate;\n    const availableSendBandwidth = metricReport.availableSendBandwidth || metricReport.availableOutgoingBitrate;\n    const availableRecvBandwidth = metricReport.availableReceiveBandwidth || metricReport.availableIncomingBitrate;\n    const audioSpeakerDelayMs = metricReport.audioSpeakerDelayMs;\n    const nackCountPerSecond = metricReport.nackCountReceivedPerSecond || metricReport.googNackCountReceivedPerSecond; // Firefox does not presently have aggregated bandwidth estimation\n\n    if (typeof availableSendBandwidth === 'number' && !isNaN(availableSendBandwidth)) {\n      this.updateAvailableSendBandwidth(availableSendBandwidth / 1000, nackCountPerSecond);\n    }\n\n    if (typeof availableRecvBandwidth === 'number' && !isNaN(availableRecvBandwidth)) {\n      this.updateAvailableReceiveBandwidth(availableRecvBandwidth / 1000);\n    }\n\n    if (typeof videoUpstreamBitrate === 'number' && !isNaN(videoUpstreamBitrate)) {\n      videoUpstreamBitrateKbps = videoUpstreamBitrate / 1000;\n    }\n\n    if (typeof audioSpeakerDelayMs === 'number' && !isNaN(audioSpeakerDelayMs)) {\n      this.connectionHealthData.setAudioSpeakerDelayMs(audioSpeakerDelayMs);\n    }\n\n    this.monitorVideoUplinkHealth(videoUpstreamBitrateKbps, videoUpstreamPacketPerSecond);\n\n    if (typeof potentialPacketsReceived === 'number' && typeof potentialFractionPacketsLostInbound === 'number') {\n      packetsReceived = potentialPacketsReceived;\n      fractionPacketsLostInbound = potentialFractionPacketsLostInbound;\n\n      if (packetsReceived < 0 || fractionPacketsLostInbound < 0) {\n        // TODO: getting negative numbers on this metric after reconnect sometimes\n        // For now, just skip the metric if it looks weird.\n        return;\n      }\n    } else {\n      return;\n    }\n\n    this.addToMinuteWindow(this.connectionHealthData.packetsReceivedInLastMinute, packetsReceived);\n    this.addToMinuteWindow(this.connectionHealthData.fractionPacketsLostInboundInLastMinute, fractionPacketsLostInbound);\n\n    if (packetsReceived > 0) {\n      this.hasSeenValidPacketMetricsBefore = true;\n      this.connectionHealthData.setConsecutiveStatsWithNoPackets(0);\n    } else if (this.hasSeenValidPacketMetricsBefore) {\n      this.connectionHealthData.setConsecutiveStatsWithNoPackets(this.connectionHealthData.consecutiveStatsWithNoPackets + 1);\n    }\n\n    if (packetsReceived === 0 || fractionPacketsLostInbound > 0) {\n      this.connectionHealthData.setLastPacketLossInboundTimestampMs(Date.now());\n    }\n\n    this.updateConnectionHealth();\n  }\n\n  addToMinuteWindow(array, value) {\n    array.unshift(value);\n\n    if (array.length > 60) {\n      array.pop();\n    }\n  }\n\n  updateAvailableSendBandwidth(sendBandwidthKbps, nackCountPerSecond) {\n    if (sendBandwidthKbps !== this.lastAvailableSendBandwidthKbps) {\n      if (this.lastAvailableSendBandwidthKbps === 0) {\n        this.lastAvailableSendBandwidthKbps = sendBandwidthKbps;\n        return;\n      }\n\n      const prevSendBandwidthKbps = this.lastAvailableSendBandwidthKbps;\n      this.lastAvailableSendBandwidthKbps = sendBandwidthKbps;\n      this.audioVideoController.forEachObserver(observer => {\n        Types_1.Maybe.of(observer.videoSendBandwidthDidChange).map(f => f.bind(observer)(sendBandwidthKbps, prevSendBandwidthKbps, nackCountPerSecond));\n      });\n    }\n  }\n\n  updateAvailableReceiveBandwidth(recvBandwidthKbps) {\n    if (recvBandwidthKbps !== this.lastAvailableRecvBandwidthKbps) {\n      if (this.lastAvailableRecvBandwidthKbps === 0) {\n        this.lastAvailableRecvBandwidthKbps = recvBandwidthKbps;\n        return;\n      }\n\n      const prevRecvBandwidthKbps = this.lastAvailableRecvBandwidthKbps;\n      this.lastAvailableRecvBandwidthKbps = recvBandwidthKbps;\n      this.audioVideoController.forEachObserver(observer => {\n        Types_1.Maybe.of(observer.videoReceiveBandwidthDidChange).map(f => f.bind(observer)(recvBandwidthKbps, prevRecvBandwidthKbps));\n      });\n    }\n  }\n\n  updateConnectionHealth() {\n    this.audioVideoController.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.connectionHealthDidChange).map(f => f.bind(observer)(this.connectionHealthData.clone()));\n    });\n  }\n\n  monitorVideoUplinkHealth(videoUpstreamBitrateKbps, videoUpstreamPacketsPerSecond) {\n    if (!this.videoTileController.hasStartedLocalVideoTile()) {\n      return;\n    }\n\n    this.audioVideoController.forEachObserver(observer => {\n      Types_1.Maybe.of(observer.videoSendHealthDidChange).map(f => f.bind(observer)(videoUpstreamBitrateKbps, videoUpstreamPacketsPerSecond));\n    });\n  }\n\n}\n\nexports.default = SignalingAndMetricsConnectionMonitor;","map":{"version":3,"mappings":"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","names":["SignalingAndMetricsConnectionMonitor","constructor","audioVideoController","realtimeController","videoTileController","connectionHealthData","pingPong","statsCollector","realtimeSubscribeToLocalSignalStrengthChange","signalStrength","isActive","receiveSignalStrengthChange","start","addObserver","stop","removeObserver","setLastNoSignalTimestampMs","Date","now","setLastWeakSignalTimestampMs","setLastGoodSignalTimestampMs","updateConnectionHealth","didReceivePong","_id","latencyMs","clockSkewMs","setConsecutiveMissedPongs","logLatency","didMissPongs","consecutiveMissedPongs","metricsDidReceive","clientMetricReport","packetsReceived","fractionPacketsLostInbound","metricReport","getObservableMetrics","potentialPacketsReceived","audioPacketsReceived","potentialFractionPacketsLostInbound","audioPacketsReceivedFractionLoss","videoUpstreamBitrateKbps","videoUpstreamPacketPerSecond","videoPacketSentPerSecond","videoUpstreamBitrate","availableSendBandwidth","availableOutgoingBitrate","availableRecvBandwidth","availableReceiveBandwidth","availableIncomingBitrate","audioSpeakerDelayMs","nackCountPerSecond","nackCountReceivedPerSecond","googNackCountReceivedPerSecond","isNaN","updateAvailableSendBandwidth","updateAvailableReceiveBandwidth","setAudioSpeakerDelayMs","monitorVideoUplinkHealth","addToMinuteWindow","packetsReceivedInLastMinute","fractionPacketsLostInboundInLastMinute","hasSeenValidPacketMetricsBefore","setConsecutiveStatsWithNoPackets","consecutiveStatsWithNoPackets","setLastPacketLossInboundTimestampMs","array","value","unshift","length","pop","sendBandwidthKbps","lastAvailableSendBandwidthKbps","prevSendBandwidthKbps","forEachObserver","observer","Types_1","of","videoSendBandwidthDidChange","map","f","bind","recvBandwidthKbps","lastAvailableRecvBandwidthKbps","prevRecvBandwidthKbps","videoReceiveBandwidthDidChange","connectionHealthDidChange","clone","videoUpstreamPacketsPerSecond","hasStartedLocalVideoTile","videoSendHealthDidChange","exports"],"sourceRoot":"","sources":["../../src/connectionmonitor/SignalingAndMetricsConnectionMonitor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Versioning_1 = require(\"../versioning/Versioning\");\n\nclass DefaultSigV4 {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  constructor(chimeClient, awsClient) {\n    this.chimeClient = chimeClient;\n    this.awsClient = awsClient;\n  }\n\n  makeTwoDigits(n) {\n    /* istanbul ignore if */\n\n    /* istanbul ignore else */\n    if (n > 9) {\n      return n.toString();\n    } else {\n      return '0' + n.toString();\n    }\n  }\n\n  getDateTimeString() {\n    const d = new Date();\n    return d.getUTCFullYear() + this.makeTwoDigits(d.getUTCMonth() + 1) + this.makeTwoDigits(d.getUTCDate()) + 'T' + this.makeTwoDigits(d.getUTCHours()) + this.makeTwoDigits(d.getUTCMinutes()) + this.makeTwoDigits(d.getUTCSeconds()) + 'Z';\n  }\n\n  getDateString(dateTimeString) {\n    return dateTimeString.substring(0, dateTimeString.indexOf('T'));\n  }\n\n  getSignatureKey(key, date, regionName, serviceName) {\n    const kDate = this.awsClient.util.crypto.hmac('AWS4' + key, date, 'buffer');\n    const kRegion = this.awsClient.util.crypto.hmac(kDate, regionName, 'buffer');\n    const kService = this.awsClient.util.crypto.hmac(kRegion, serviceName, 'buffer');\n    const kSigning = this.awsClient.util.crypto.hmac(kService, 'aws4_request', 'buffer');\n    return kSigning;\n  }\n\n  signURL(method, scheme, serviceName, hostname, path, payload, queryParams) {\n    const now = this.getDateTimeString();\n    const today = this.getDateString(now);\n    const algorithm = 'AWS4-HMAC-SHA256';\n    const region = this.chimeClient.config.region;\n    const signedHeaders = 'host';\n    const canonicalHeaders = 'host:' + hostname.toLowerCase() + '\\n';\n    const credentialScope = today + '/' + region + '/' + serviceName + '/' + 'aws4_request';\n    const credentials = this.chimeClient.config.credentials;\n    let params = new Map();\n    params.set('X-Amz-Algorithm', [algorithm]);\n    params.set('X-Amz-Credential', [encodeURIComponent(credentials.accessKeyId + '/' + credentialScope)]);\n    params.set('X-Amz-Date', [now]);\n    params.set('X-Amz-Expires', ['10']);\n    params.set('X-Amz-SignedHeaders', ['host']);\n\n    if (credentials.sessionToken) {\n      params.set('X-Amz-Security-Token', [encodeURIComponent(credentials.sessionToken)]);\n    }\n\n    params.set(Versioning_1.default.X_AMZN_VERSION, [encodeURIComponent(Versioning_1.default.sdkVersion)]);\n    params.set(Versioning_1.default.X_AMZN_USER_AGENT, [encodeURIComponent(Versioning_1.default.sdkUserAgentLowResolution)]);\n    queryParams === null || queryParams === void 0 ? void 0 : queryParams.forEach((values, key) => {\n      const encodedKey = encodeURIComponent(key);\n      values.sort().forEach(value => {\n        if (!params.has(encodedKey)) {\n          params.set(encodedKey, []);\n        }\n\n        params.get(encodedKey).push(encodeURIComponent(value));\n      });\n    });\n    let canonicalQuerystring = '';\n    params = new Map([...params.entries()].sort());\n    params.forEach((values, key) => {\n      values.forEach(value => {\n        if (canonicalQuerystring.length) {\n          canonicalQuerystring += '&';\n        }\n\n        canonicalQuerystring += key + '=' + value;\n      });\n    });\n    const canonicalRequest = method + '\\n' + path + '\\n' + canonicalQuerystring + '\\n' + canonicalHeaders + '\\n' + signedHeaders + '\\n' + this.awsClient.util.crypto.sha256(payload, 'hex');\n    const hashedCanonicalRequest = this.awsClient.util.crypto.sha256(canonicalRequest, 'hex');\n    const stringToSign = 'AWS4-HMAC-SHA256\\n' + now + '\\n' + today + '/' + region + '/' + serviceName + '/aws4_request\\n' + hashedCanonicalRequest;\n    const signingKey = this.getSignatureKey(credentials.secretAccessKey, today, region, serviceName);\n    const signature = this.awsClient.util.crypto.hmac(signingKey, stringToSign, 'hex');\n    const finalParams = canonicalQuerystring + '&X-Amz-Signature=' + signature;\n    return scheme + '://' + hostname + path + '?' + finalParams;\n  }\n\n}\n\nexports.default = DefaultSigV4;","map":{"version":3,"mappings":"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","names":["DefaultSigV4","constructor","chimeClient","awsClient","makeTwoDigits","n","toString","getDateTimeString","d","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getDateString","dateTimeString","substring","indexOf","getSignatureKey","key","date","regionName","serviceName","kDate","util","crypto","hmac","kRegion","kService","kSigning","signURL","method","scheme","hostname","path","payload","queryParams","now","today","algorithm","region","config","signedHeaders","canonicalHeaders","toLowerCase","credentialScope","credentials","params","Map","set","encodeURIComponent","accessKeyId","sessionToken","Versioning_1","X_AMZN_VERSION","sdkVersion","X_AMZN_USER_AGENT","sdkUserAgentLowResolution","forEach","values","encodedKey","sort","value","has","get","push","canonicalQuerystring","entries","length","canonicalRequest","sha256","hashedCanonicalRequest","stringToSign","signingKey","secretAccessKey","signature","finalParams","exports"],"sourceRoot":"","sources":["../../src/sigv4/DefaultSigV4.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
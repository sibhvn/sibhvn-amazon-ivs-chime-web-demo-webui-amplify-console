{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultTransceiverController_1 = require(\"./DefaultTransceiverController\");\n\nclass SimulcastTransceiverController extends DefaultTransceiverController_1.default {\n  constructor(logger, browserBehavior) {\n    super(logger, browserBehavior);\n    this.videoQualityControlParameterMap = new Map();\n    let scale = 4;\n\n    for (let i = 0; i < SimulcastTransceiverController.NAME_ARR_ASCENDING.length; i++) {\n      const ridName = SimulcastTransceiverController.NAME_ARR_ASCENDING[i];\n      this.videoQualityControlParameterMap.set(ridName, {\n        rid: ridName,\n        scaleResolutionDownBy: scale,\n        maxBitrate: SimulcastTransceiverController.BITRATE_ARR_ASCENDING[i] * 1000\n      });\n      scale = scale / 2;\n    }\n  } // Note: `scaleResolutionDownBy` has only been tested with values 1, 2, and 4.\n\n\n  setEncodingParameters(encodingParamMap) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {\n        return;\n      }\n\n      const sender = this._localCameraTransceiver.sender;\n      const newEncodingParams = Array.from(encodingParamMap.values());\n\n      if (newEncodingParams.length <= 0) {\n        return;\n      }\n\n      const oldParam = sender.getParameters();\n\n      if (!oldParam.encodings) {\n        oldParam.encodings = newEncodingParams;\n      } else {\n        for (let i = 0; i < oldParam.encodings.length; i++) {\n          if (oldParam.encodings[i].rid === SimulcastTransceiverController.LOW_LEVEL_NAME) {\n            oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME).maxBitrate;\n            oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME).active;\n            oldParam.encodings[i].scaleResolutionDownBy = encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME).scaleResolutionDownBy;\n          }\n\n          if (oldParam.encodings[i].rid === SimulcastTransceiverController.MID_LEVEL_NAME) {\n            oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME).maxBitrate;\n            oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME).active;\n            oldParam.encodings[i].scaleResolutionDownBy = encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME).scaleResolutionDownBy;\n          }\n\n          if (oldParam.encodings[i].rid === SimulcastTransceiverController.HIGH_LEVEL_NAME) {\n            oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME).maxBitrate;\n            oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME).active;\n            oldParam.encodings[i].scaleResolutionDownBy = encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME).scaleResolutionDownBy;\n          }\n        }\n      }\n\n      yield sender.setParameters(oldParam);\n      this.logVideoTransceiverParameters();\n    });\n  }\n\n  static replaceAudioTrackForSender(sender, track) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!sender) {\n        return false;\n      }\n\n      yield sender.replaceTrack(track);\n      return true;\n    });\n  }\n\n  setVideoSendingBitrateKbps(_bitrateKbps) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return;\n    });\n  }\n\n  setupLocalTransceivers() {\n    if (!this.useTransceivers()) {\n      return;\n    }\n\n    if (!this.defaultMediaStream && typeof MediaStream !== 'undefined') {\n      this.defaultMediaStream = new MediaStream();\n    }\n\n    if (!this._localAudioTransceiver) {\n      this._localAudioTransceiver = this.peer.addTransceiver('audio', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream]\n      });\n    }\n\n    if (!this._localCameraTransceiver) {\n      const encodingParams = Array.from(this.videoQualityControlParameterMap.values());\n      this._localCameraTransceiver = this.peer.addTransceiver('video', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream],\n        sendEncodings: encodingParams\n      });\n    }\n  }\n\n  logVideoTransceiverParameters() {\n    const params = this._localCameraTransceiver.sender.getParameters();\n\n    const encodings = params.encodings;\n    let msg = 'simulcast: current encoding parameters \\n';\n\n    for (const encodingParam of encodings) {\n      msg += `rid=${encodingParam.rid} maxBitrate=${encodingParam.maxBitrate} active=${encodingParam.active} scaleDownBy=${encodingParam.scaleResolutionDownBy} \\n`;\n    }\n\n    this.logger.info(msg);\n  }\n\n}\n\nexports.default = SimulcastTransceiverController;\nSimulcastTransceiverController.LOW_LEVEL_NAME = 'low';\nSimulcastTransceiverController.MID_LEVEL_NAME = 'mid';\nSimulcastTransceiverController.HIGH_LEVEL_NAME = 'hi';\nSimulcastTransceiverController.NAME_ARR_ASCENDING = ['low', 'mid', 'hi'];\nSimulcastTransceiverController.BITRATE_ARR_ASCENDING = [200, 400, 1100];","map":{"version":3,"mappings":"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","names":["SimulcastTransceiverController","DefaultTransceiverController_1","constructor","logger","browserBehavior","Map","scale","i","NAME_ARR_ASCENDING","length","ridName","videoQualityControlParameterMap","set","rid","scaleResolutionDownBy","maxBitrate","BITRATE_ARR_ASCENDING","setEncodingParameters","encodingParamMap","_localCameraTransceiver","direction","sender","newEncodingParams","Array","from","values","oldParam","getParameters","encodings","LOW_LEVEL_NAME","get","active","MID_LEVEL_NAME","HIGH_LEVEL_NAME","setParameters","logVideoTransceiverParameters","replaceAudioTrackForSender","track","replaceTrack","setVideoSendingBitrateKbps","_bitrateKbps","setupLocalTransceivers","useTransceivers","defaultMediaStream","MediaStream","_localAudioTransceiver","peer","addTransceiver","streams","encodingParams","sendEncodings","params","msg","encodingParam","info","exports"],"sourceRoot":"","sources":["../../src/transceivercontroller/SimulcastTransceiverController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\n\nconst IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\n\nclass MediaDeviceProxyHandler {\n  constructor() {\n    this.scheduler = null;\n    this.devices = null;\n    this.deviceChangeListeners = new Set(); // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types\n\n    this.get = (target, property, receiver) => {\n      if (!Reflect.has(target, property)) {\n        return undefined;\n      }\n\n      if (!('ondevicechange' in navigator.mediaDevices)) {\n        if (property === 'addEventListener') {\n          return this.patchAddEventListener(target, property, receiver);\n        } else if (property === 'removeEventListener') {\n          return this.patchRemoveEventListener(target, property, receiver);\n        }\n      }\n\n      const value = Reflect.get(target, property, receiver);\n      return typeof value === 'function' ? value.bind(target) : value;\n    };\n\n    this.patchAddEventListener = (target, property, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    receiver) => {\n      const value = Reflect.get(target, property, receiver);\n      return (type, listener, options) => {\n        if (type === 'devicechange') {\n          this.deviceChangeListeners.add(listener);\n\n          if (!this.scheduler) {\n            this.scheduler = new IntervalScheduler_1.default(MediaDeviceProxyHandler.INTERVAL_MS);\n            this.scheduler.start(this.pollDeviceLists);\n          }\n        } else {\n          return Reflect.apply(value, target, [type, listener, options]);\n        }\n      };\n    };\n\n    this.patchRemoveEventListener = (target, property, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    receiver) => {\n      const value = Reflect.get(target, property, receiver);\n      return (type, listener, options) => {\n        if (type === 'devicechange') {\n          this.deviceChangeListeners.delete(listener);\n\n          if (this.deviceChangeListeners.size === 0 && this.scheduler) {\n            this.scheduler.stop();\n            this.scheduler = null;\n          }\n        } else {\n          return Reflect.apply(value, target, [type, listener, options]);\n        }\n      };\n    };\n\n    this.pollDeviceLists = () => __awaiter(this, void 0, void 0, function* () {\n      const newDevices = yield this.sortedDeviceList();\n\n      if (this.devices) {\n        const changed = newDevices.length !== this.devices.length || newDevices.some((device, index) => {\n          return device.deviceId !== this.devices[index].deviceId;\n        });\n\n        if (changed) {\n          this.handleDeviceChangeEvent();\n        }\n      }\n\n      this.devices = newDevices;\n    });\n  }\n\n  sortedDeviceList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // @ts-ignore\n      const newDevices = yield navigator.mediaDevices.enumerateDevices();\n      return newDevices.sort((device1, device2) => {\n        if (device1.deviceId < device2.deviceId) {\n          return 1;\n        }\n\n        if (device1.deviceId > device2.deviceId) {\n          return -1;\n        }\n\n        return 0;\n      });\n    });\n  }\n\n  handleDeviceChangeEvent() {\n    for (const listener of this.deviceChangeListeners) {\n      AsyncScheduler_1.default.nextTick(() => {\n        /* istanbul ignore else */\n        if (this.deviceChangeListeners.has(listener)) {\n          const event = new Event('devicechange');\n\n          if (typeof listener === 'function') {\n            listener(event);\n          } else {\n            listener.handleEvent(event);\n          }\n        }\n      });\n    }\n  }\n\n}\n\nexports.default = MediaDeviceProxyHandler;\nMediaDeviceProxyHandler.INTERVAL_MS = 1000;","map":{"version":3,"mappings":"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","names":["MediaDeviceProxyHandler","constructor","Set","target","property","receiver","Reflect","has","undefined","navigator","mediaDevices","patchAddEventListener","patchRemoveEventListener","value","get","bind","type","listener","options","deviceChangeListeners","add","scheduler","IntervalScheduler_1","INTERVAL_MS","start","pollDeviceLists","apply","delete","size","stop","__awaiter","newDevices","sortedDeviceList","devices","changed","length","some","device","index","deviceId","handleDeviceChangeEvent","enumerateDevices","sort","device1","device2","AsyncScheduler_1","nextTick","event","Event","handleEvent","exports"],"sourceRoot":"","sources":["../../src/mediadevicefactory/MediaDeviceProxyHandler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
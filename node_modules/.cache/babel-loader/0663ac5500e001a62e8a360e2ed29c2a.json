{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * [[AudioVideoControllerState]] includes the compute resources shared by [[Task]].\n */\n\nclass AudioVideoControllerState {\n  constructor() {\n    this.logger = null;\n    this.browserBehavior = null;\n    this.signalingClient = null;\n    this.meetingSessionConfiguration = null;\n    this.peer = null;\n    this.previousSdpOffer = null;\n    this.sdpOfferInit = null;\n    this.audioVideoController = null;\n    this.realtimeController = null;\n    this.videoTileController = null;\n    this.mediaStreamBroker = null;\n    this.audioMixController = null;\n    this.activeAudioInput = null;\n    this.activeVideoInput = null;\n    this.transceiverController = null;\n    this.indexFrame = null;\n    this.iceCandidates = [];\n    this.iceCandidateHandler = null;\n    this.iceGatheringStateEventHandler = null;\n    this.sdpAnswer = null;\n    this.turnCredentials = null;\n    this.reconnectController = null;\n    this.removableObservers = [];\n    this.audioProfile = null;\n    this.videoStreamIndex = null;\n    this.videoDownlinkBandwidthPolicy = null;\n    this.videoUplinkBandwidthPolicy = null;\n    this.lastKnownVideoAvailability = null;\n    this.localVideoSender = null;\n    this.localAudioSender = null;\n    this.videoCaptureAndEncodeParameter = null; // An unordered list of IDs provided by the downlink policy that\n    // we will eventually subscribe to.\n\n    this.videosToReceive = null; // The last processed set of IDs provided by the policy, so that we can\n    // compare what changes were additions, stream switches, or removals.\n\n    this.lastVideosToReceive = null; // An ordered list corresponding to `videosToReceive` where the order\n    // itself correspond to transceivers; 0 in this list corresponds to an inactive tranceiver.\n\n    this.videoSubscriptions = null; // The video subscription limit is set by the backend and is subject to change in future.\n    // This value is set in the `JoinAndReceiveIndexTask` when we process the `SdkJoinAckFrame`\n    // and is used in the `ReceiveVideoStreamIndexTask` to limit the total number of streams\n    // that we include in the `videosToReceive`.\n\n    this.videoSubscriptionLimit = 25; // The previous SDP answer will be used as a dictionary to seed the compression library\n    // during decompressing the compressed SDP answer.\n\n    this.previousSdpAnswerAsString = ''; // This flag indicates if the backend supports compression for the client.\n\n    this.serverSupportsCompression = false;\n    this.videosPaused = null;\n    this.videoDuplexMode = null;\n    this.volumeIndicatorAdapter = null;\n    this.statsCollector = null;\n    this.connectionMonitor = null;\n    this.videoInputAttachedTimestampMs = 0;\n    this.audioDeviceInformation = {};\n    this.videoDeviceInformation = {};\n    this.enableSimulcast = false;\n    this.eventController = null;\n    this.signalingOpenDurationMs = null;\n    this.iceGatheringDurationMs = null;\n    this.startAudioVideoTimestamp = null;\n    this.attendeePresenceDurationMs = null;\n    this.meetingStartDurationMs = null;\n    this.poorConnectionCount = 0;\n    this.maxVideoTileCount = 0;\n    this.startTimeMs = null;\n  }\n\n}\n\nexports.default = AudioVideoControllerState;","map":{"version":3,"mappings":"cAAA;AACA;;;;;AA6BA;;;;AAGA,MAAqBA,yBAArB,CAA8C;EAA9CC;IACE,cAAwB,IAAxB;IAEA,uBAAkD,IAAlD;IAEA,uBAA0C,IAA1C;IAEA,mCAAkE,IAAlE;IAEA,YAAiC,IAAjC;IAEA,wBAA+B,IAA/B;IAEA,oBAAiD,IAAjD;IAEA,4BAAoD,IAApD;IAEA,0BAAgD,IAAhD;IAEA,2BAAkD,IAAlD;IAEA,yBAA8C,IAA9C;IAEA,0BAAgD,IAAhD;IAEA,wBAAuC,IAAvC;IAEA,wBAAuC,IAAvC;IAEA,6BAAsD,IAAtD;IAEA,kBAAmC,IAAnC;IAEA,qBAAmC,EAAnC;IAEA,2BAA2E,IAA3E;IAEA,qCAAqD,IAArD;IAEA,iBAA2B,IAA3B;IAEA,uBAAwD,IAAxD;IAEA,2BAAkD,IAAlD;IAEA,0BAA0C,EAA1C;IAEA,oBAAoC,IAApC;IAEA,wBAA4C,IAA5C;IAEA,oCAAoE,IAApE;IAEA,kCAAgE,IAAhE;IAEA,kCAAqE,IAArE;IAEA,wBAAwC,IAAxC;IAEA,wBAAwC,IAAxC;IAEA,sCAAwE,IAAxE,CA7DF,CA+DE;IACA;;IACA,uBAA2C,IAA3C,CAjEF,CAmEE;IACA;;IACA,2BAA+C,IAA/C,CArEF,CAuEE;IACA;;IACA,0BAAsC,IAAtC,CAzEF,CA2EE;IACA;IACA;IACA;;IACA,8BAAiC,EAAjC,CA/EF,CAiFE;IACA;;IACA,iCAAoC,EAApC,CAnFF,CAqFE;;IACA,iCAAqC,KAArC;IAEA,oBAAwC,IAAxC;IAEA,uBAA+C,IAA/C;IAEA,8BAAwD,IAAxD;IAEA,sBAAwC,IAAxC;IAEA,yBAA8C,IAA9C;IAEA,qCAAwC,CAAxC;IAEA,8BAAmD,EAAnD;IAEA,8BAAmD,EAAnD;IAEA,uBAA2B,KAA3B;IAEA,uBAA0C,IAA1C;IAEA,+BAAyC,IAAzC;IAEA,8BAAwC,IAAxC;IAEA,gCAA0C,IAA1C;IAEA,kCAA4C,IAA5C;IAEA,8BAAwC,IAAxC;IAEA,2BAA8B,CAA9B;IAEA,yBAA4B,CAA5B;IAEA,mBAA6B,IAA7B;EACD;;AA3H6C;;AAA9CC","names":["AudioVideoControllerState","constructor","exports"],"sourceRoot":"","sources":["../../src/audiovideocontroller/AudioVideoControllerState.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
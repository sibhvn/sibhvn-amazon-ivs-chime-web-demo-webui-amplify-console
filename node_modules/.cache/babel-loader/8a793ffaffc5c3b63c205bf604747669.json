{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n\nclass ListenForVolumeIndicatorsTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'ListenForVolumeIndicatorsTask';\n\n    this.realtimeMuteAndUnmuteHandler = muted => {\n      this.context.signalingClient.mute(muted);\n    };\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.context.removableObservers.push(this);\n      this.context.signalingClient.registerObserver(this);\n      this.context.realtimeController.realtimeSubscribeToMuteAndUnmuteLocalAudio(this.realtimeMuteAndUnmuteHandler);\n    });\n  }\n\n  removeObserver() {\n    this.context.realtimeController.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(this.realtimeMuteAndUnmuteHandler);\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  handleSignalingClientEvent(event) {\n    if (event.type !== SignalingClientEventType_1.default.ReceivedSignalFrame) {\n      return;\n    }\n\n    if (event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_STREAM_ID_INFO) {\n      // @ts-ignore\n      const audioStreamIdInfo = event.message.audioStreamIdInfo;\n      this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioStreamIdInfo(audioStreamIdInfo);\n    } else if (event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_METADATA) {\n      // @ts-ignore\n      const audioMetadata = event.message.audioMetadata;\n      this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioMetadata(audioMetadata);\n    }\n  }\n\n}\n\nexports.default = ListenForVolumeIndicatorsTask;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAEA;;AAKA;;AAEA,MAAqBA,6BAArB,SACUC,kBADV,CACkB;EAGhBC,YAAoBC,OAApB,EAAsD;IACpD,MAAMA,OAAO,CAACC,MAAd;IADkB;IADV,gBAAW,+BAAX;;IAqCV,oCAAgCC,KAAD,IAAyB;MACtD,KAAKF,OAAL,CAAaG,eAAb,CAA6BC,IAA7B,CAAkCF,KAAlC;IACD,CAFD;EAlCC;;EAEKG,GAAG;;MACP,KAAKL,OAAL,CAAaM,kBAAb,CAAgCC,IAAhC,CAAqC,IAArC;MACA,KAAKP,OAAL,CAAaG,eAAb,CAA6BK,gBAA7B,CAA8C,IAA9C;MACA,KAAKR,OAAL,CAAaS,kBAAb,CAAgCC,0CAAhC,CACE,KAAKC,4BADP;IAGD;EAAA;;EAEDC,cAAc;IACZ,KAAKZ,OAAL,CAAaS,kBAAb,CAAgCI,4CAAhC,CACE,KAAKF,4BADP;IAGA,KAAKX,OAAL,CAAaG,eAAb,CAA6BS,cAA7B,CAA4C,IAA5C;EACD;;EAEDE,0BAA0B,CAACC,KAAD,EAA4B;IACpD,IAAIA,KAAK,CAACC,IAAN,KAAeC,mCAAyBC,mBAA5C,EAAiE;MAC/D;IACD;;IACD,IAAIH,KAAK,CAACI,OAAN,CAAcH,IAAd,KAAuBI,sCAAeC,IAAf,CAAoBC,oBAA/C,EAAqE;MACnE;MACA,MAAMC,iBAAiB,GAA8BR,KAAK,CAACI,OAAN,CAAcI,iBAAnE;MACA,KAAKvB,OAAL,CAAawB,sBAAb,CAAoCC,uCAApC,CACEF,iBADF;IAGD,CAND,MAMO,IAAIR,KAAK,CAACI,OAAN,CAAcH,IAAd,KAAuBI,sCAAeC,IAAf,CAAoBK,cAA/C,EAA+D;MACpE;MACA,MAAMC,aAAa,GAA0BZ,KAAK,CAACI,OAAN,CAAcQ,aAA3D;MACA,KAAK3B,OAAL,CAAawB,sBAAb,CAAoCI,mCAApC,CAAwED,aAAxE;IACD;EACF;;AArCe;;AADlBE","names":["ListenForVolumeIndicatorsTask","BaseTask_1","constructor","context","logger","muted","signalingClient","mute","run","removableObservers","push","registerObserver","realtimeController","realtimeSubscribeToMuteAndUnmuteLocalAudio","realtimeMuteAndUnmuteHandler","removeObserver","realtimeUnsubscribeToMuteAndUnmuteLocalAudio","handleSignalingClientEvent","event","type","SignalingClientEventType_1","ReceivedSignalFrame","message","SignalingProtocol_js_1","Type","AUDIO_STREAM_ID_INFO","audioStreamIdInfo","volumeIndicatorAdapter","sendRealtimeUpdatesForAudioStreamIdInfo","AUDIO_METADATA","audioMetadata","sendRealtimeUpdatesForAudioMetadata","exports"],"sourceRoot":"","sources":["../../src/task/ListenForVolumeIndicatorsTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
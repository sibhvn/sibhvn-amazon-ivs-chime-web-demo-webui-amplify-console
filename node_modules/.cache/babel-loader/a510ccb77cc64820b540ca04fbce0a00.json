{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\n\nconst IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst Types_1 = require(\"../utils/Types\");\n/**\n * [[DefaultPingPong]] implements the PingPong and SignalingClientObserver interface.\n */\n\n\nclass DefaultPingPong {\n  constructor(signalingClient, intervalMs, logger) {\n    this.signalingClient = signalingClient;\n    this.intervalMs = intervalMs;\n    this.logger = logger;\n    this.observerQueue = new Set();\n    this.consecutivePongsUnaccountedFor = 0;\n    this.intervalScheduler = new IntervalScheduler_1.default(this.intervalMs);\n    this.pingId = 0;\n  }\n\n  addObserver(observer) {\n    this.logger.info('adding a ping-pong observer');\n    this.observerQueue.add(observer);\n  }\n\n  removeObserver(observer) {\n    this.logger.info('removing a ping-pong observer');\n    this.observerQueue.delete(observer);\n  }\n\n  forEachObserver(observerFunc) {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler_1.default.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  start() {\n    this.stop();\n    this.signalingClient.registerObserver(this);\n\n    if (this.signalingClient.ready()) {\n      this.startPingInterval();\n    }\n  }\n\n  stop() {\n    this.stopPingInterval();\n    this.signalingClient.removeObserver(this);\n  }\n\n  startPingInterval() {\n    this.intervalScheduler.start(() => {\n      this.ping();\n    });\n    this.ping();\n  }\n\n  stopPingInterval() {\n    this.intervalScheduler.stop();\n    this.pingId = 0;\n    this.consecutivePongsUnaccountedFor = 0;\n  }\n\n  ping() {\n    if (this.consecutivePongsUnaccountedFor > 0) {\n      this.logger.warn(`missed pong ${this.consecutivePongsUnaccountedFor} time(s)`);\n      this.forEachObserver(observer => {\n        Types_1.Maybe.of(observer.didMissPongs).map(f => f.bind(observer)(this.consecutivePongsUnaccountedFor));\n      });\n    }\n\n    this.consecutivePongsUnaccountedFor += 1;\n    this.pingId = this.pingId + 1 & 0xffffffff;\n    const ping = SignalingProtocol_js_1.SdkPingPongFrame.create();\n    ping.pingId = this.pingId;\n    ping.type = SignalingProtocol_js_1.SdkPingPongType.PING;\n    this.pingTimestampLocalMs = this.signalingClient.pingPong(ping);\n    this.logger.debug(() => {\n      return `sent ping ${this.pingId}`;\n    });\n  }\n\n  pong(pingId) {\n    const pong = SignalingProtocol_js_1.SdkPingPongFrame.create();\n    pong.pingId = pingId;\n    pong.type = SignalingProtocol_js_1.SdkPingPongType.PONG;\n    this.signalingClient.pingPong(pong);\n  }\n\n  handleSignalingClientEvent(event) {\n    switch (event.type) {\n      case SignalingClientEventType_1.default.WebSocketOpen:\n        this.startPingInterval();\n        break;\n\n      case SignalingClientEventType_1.default.WebSocketFailed:\n      case SignalingClientEventType_1.default.WebSocketError:\n        this.logger.warn(`stopped pinging (${SignalingClientEventType_1.default[event.type]})`);\n        this.stopPingInterval();\n        break;\n\n      case SignalingClientEventType_1.default.WebSocketClosing:\n      case SignalingClientEventType_1.default.WebSocketClosed:\n        this.logger.info(`stopped pinging (${SignalingClientEventType_1.default[event.type]})`);\n        this.stopPingInterval();\n        break;\n\n      case SignalingClientEventType_1.default.ReceivedSignalFrame:\n        if (event.message.type !== SignalingProtocol_js_1.SdkSignalFrame.Type.PING_PONG) {\n          break;\n        }\n\n        if (event.message.pingPong.type === SignalingProtocol_js_1.SdkPingPongType.PONG) {\n          const pingId = event.message.pingPong.pingId;\n\n          if (pingId !== this.pingId) {\n            this.logger.warn(`unexpected ping id ${pingId} (expected ${this.pingId})`);\n            break;\n          }\n\n          this.consecutivePongsUnaccountedFor = 0;\n          let pongTimestampRemoteMs;\n\n          if (typeof event.message.timestampMs === 'number') {\n            pongTimestampRemoteMs = event.message.timestampMs;\n          } else {\n            break;\n          }\n\n          this.logger.debug(() => {\n            return `received pong ${pingId} with timestamp ${pongTimestampRemoteMs}`;\n          });\n          const pongTimestampLocalMs = event.timestampMs;\n          const pingPongLocalIntervalMs = pongTimestampLocalMs - this.pingTimestampLocalMs;\n          const estimatedPingTimestampRemoteMs = Math.round(pongTimestampRemoteMs - pingPongLocalIntervalMs / 2);\n          const estimatedClockSkewMs = this.pingTimestampLocalMs - estimatedPingTimestampRemoteMs;\n          this.logger.info(`local clock skew estimate=${estimatedClockSkewMs}ms from ping-pong time=${pingPongLocalIntervalMs}ms`);\n          this.forEachObserver(observer => {\n            Types_1.Maybe.of(observer.didReceivePong).map(f => f.bind(observer)(pingId, estimatedClockSkewMs, pingPongLocalIntervalMs));\n          });\n        } else {\n          this.pong(event.message.pingPong.pingId);\n        }\n\n        break;\n    }\n  }\n\n}\n\nexports.default = DefaultPingPong;","map":{"version":3,"mappings":"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","names":["DefaultPingPong","constructor","signalingClient","intervalMs","logger","Set","intervalScheduler","IntervalScheduler_1","pingId","addObserver","observer","info","observerQueue","add","removeObserver","delete","forEachObserver","observerFunc","AsyncScheduler_1","nextTick","has","start","stop","registerObserver","ready","startPingInterval","stopPingInterval","ping","consecutivePongsUnaccountedFor","warn","Types_1","of","didMissPongs","map","f","bind","SignalingProtocol_js_1","create","type","PING","pingTimestampLocalMs","pingPong","debug","pong","PONG","handleSignalingClientEvent","event","SignalingClientEventType_1","WebSocketOpen","WebSocketFailed","WebSocketError","WebSocketClosing","WebSocketClosed","ReceivedSignalFrame","message","Type","PING_PONG","pongTimestampRemoteMs","timestampMs","pongTimestampLocalMs","pingPongLocalIntervalMs","estimatedPingTimestampRemoteMs","Math","round","estimatedClockSkewMs","didReceivePong","exports"],"sourceRoot":"","sources":["../../src/pingpong/DefaultPingPong.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
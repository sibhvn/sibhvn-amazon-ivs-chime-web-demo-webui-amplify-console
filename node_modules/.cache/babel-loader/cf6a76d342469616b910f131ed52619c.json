{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultVideoStreamIdSet_1 = require(\"../videostreamidset/DefaultVideoStreamIdSet\");\n/**\n * [[AllHighestVideoBandwidthPolicy]] implements is a rudimentary policy that simply\n * always subscribes to the highest quality video stream available\n * for all non-self participants.\n */\n\n\nclass AllHighestVideoBandwidthPolicy {\n  constructor(selfAttendeeId) {\n    this.selfAttendeeId = selfAttendeeId;\n    this.reset();\n  }\n\n  reset() {\n    this.optimalReceiveSet = new DefaultVideoStreamIdSet_1.default();\n    this.subscribedReceiveSet = new DefaultVideoStreamIdSet_1.default();\n    this.videoSources = undefined;\n  }\n\n  updateIndex(videoIndex) {\n    this.videoIndex = videoIndex;\n    this.optimalReceiveSet = this.calculateOptimalReceiveSet(videoIndex);\n  }\n\n  updateMetrics(_clientMetricReport) {}\n\n  wantsResubscribe() {\n    return !this.subscribedReceiveSet.equal(this.optimalReceiveSet);\n  }\n\n  chooseSubscriptions() {\n    this.subscribedReceiveSet = this.optimalReceiveSet.clone();\n    return this.subscribedReceiveSet.clone();\n  }\n\n  chooseRemoteVideoSources(videoSources) {\n    this.videoSources = videoSources;\n    this.optimalReceiveSet = this.calculateOptimalReceiveSet(this.videoIndex).clone();\n  }\n\n  calculateOptimalReceiveSet(videoIndex) {\n    const streamSelectionSet = new DefaultVideoStreamIdSet_1.default();\n\n    if (!this.videoIndex || this.videoIndex.allStreams().empty()) {\n      return streamSelectionSet;\n    }\n\n    const receiveSet = videoIndex.highestQualityStreamFromEachGroupExcludingSelf(this.selfAttendeeId); // If video sources are not chosen, then return the default receive set.\n\n    if (this.videoSources === undefined) {\n      return receiveSet;\n    } // Get the list of all the remote stream information\n\n\n    const remoteInfos = this.videoIndex.remoteStreamDescriptions();\n    const mapOfAttendeeIdToOptimalStreamId = new Map();\n\n    for (const info of remoteInfos) {\n      if (receiveSet.contain(info.streamId)) {\n        mapOfAttendeeIdToOptimalStreamId.set(info.attendeeId, info.streamId);\n      }\n    }\n\n    for (const videoSource of this.videoSources) {\n      const attendeeId = videoSource.attendee.attendeeId;\n\n      if (mapOfAttendeeIdToOptimalStreamId.has(attendeeId)) {\n        streamSelectionSet.add(mapOfAttendeeIdToOptimalStreamId.get(attendeeId));\n      }\n    }\n\n    return streamSelectionSet;\n  }\n\n}\n\nexports.default = AllHighestVideoBandwidthPolicy;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAIA;AAKA;;;;;;;AAKA,MAAqBA,8BAArB,CAAmD;EAMjDC,YAAoBC,cAApB,EAA0C;IAAtB;IAClB,KAAKC,KAAL;EACD;;EAEDA,KAAK;IACH,KAAKC,iBAAL,GAAyB,IAAIC,iCAAJ,EAAzB;IACA,KAAKC,oBAAL,GAA4B,IAAID,iCAAJ,EAA5B;IACA,KAAKE,YAAL,GAAoBC,SAApB;EACD;;EAEDC,WAAW,CAACC,UAAD,EAA6B;IACtC,KAAKA,UAAL,GAAkBA,UAAlB;IACA,KAAKN,iBAAL,GAAyB,KAAKO,0BAAL,CAAgCD,UAAhC,CAAzB;EACD;;EAEDE,aAAa,CAACC,mBAAD,EAAwC,CAAU;;EAE/DC,gBAAgB;IACd,OAAO,CAAC,KAAKR,oBAAL,CAA0BS,KAA1B,CAAgC,KAAKX,iBAArC,CAAR;EACD;;EAEDY,mBAAmB;IACjB,KAAKV,oBAAL,GAA4B,KAAKF,iBAAL,CAAuBa,KAAvB,EAA5B;IACA,OAAO,KAAKX,oBAAL,CAA0BW,KAA1B,EAAP;EACD;;EAEDC,wBAAwB,CAACX,YAAD,EAA4B;IAClD,KAAKA,YAAL,GAAoBA,YAApB;IACA,KAAKH,iBAAL,GAAyB,KAAKO,0BAAL,CAAgC,KAAKD,UAArC,EAAiDO,KAAjD,EAAzB;EACD;;EAEON,0BAA0B,CAACD,UAAD,EAA6B;IAC7D,MAAMS,kBAAkB,GAAG,IAAId,iCAAJ,EAA3B;;IAEA,IAAI,CAAC,KAAKK,UAAN,IAAoB,KAAKA,UAAL,CAAgBU,UAAhB,GAA6BC,KAA7B,EAAxB,EAA8D;MAC5D,OAAOF,kBAAP;IACD;;IAED,MAAMG,UAAU,GAAGZ,UAAU,CAACa,8CAAX,CACjB,KAAKrB,cADY,CAAnB,CAP6D,CAW7D;;IACA,IAAI,KAAKK,YAAL,KAAsBC,SAA1B,EAAqC;MACnC,OAAOc,UAAP;IACD,CAd4D,CAgB7D;;;IACA,MAAME,WAAW,GAAG,KAAKd,UAAL,CAAgBe,wBAAhB,EAApB;IAEA,MAAMC,gCAAgC,GAAG,IAAIC,GAAJ,EAAzC;;IAEA,KAAK,MAAMC,IAAX,IAAmBJ,WAAnB,EAAgC;MAC9B,IAAIF,UAAU,CAACO,OAAX,CAAmBD,IAAI,CAACE,QAAxB,CAAJ,EAAuC;QACrCJ,gCAAgC,CAACK,GAAjC,CAAqCH,IAAI,CAACI,UAA1C,EAAsDJ,IAAI,CAACE,QAA3D;MACD;IACF;;IAED,KAAK,MAAMG,WAAX,IAA0B,KAAK1B,YAA/B,EAA6C;MAC3C,MAAMyB,UAAU,GAAGC,WAAW,CAACC,QAAZ,CAAqBF,UAAxC;;MACA,IAAIN,gCAAgC,CAACS,GAAjC,CAAqCH,UAArC,CAAJ,EAAsD;QACpDb,kBAAkB,CAACiB,GAAnB,CAAuBV,gCAAgC,CAACW,GAAjC,CAAqCL,UAArC,CAAvB;MACD;IACF;;IAED,OAAOb,kBAAP;EACD;;AAxEgD;;AAAnDmB","names":["AllHighestVideoBandwidthPolicy","constructor","selfAttendeeId","reset","optimalReceiveSet","DefaultVideoStreamIdSet_1","subscribedReceiveSet","videoSources","undefined","updateIndex","videoIndex","calculateOptimalReceiveSet","updateMetrics","_clientMetricReport","wantsResubscribe","equal","chooseSubscriptions","clone","chooseRemoteVideoSources","streamSelectionSet","allStreams","empty","receiveSet","highestQualityStreamFromEachGroupExcludingSelf","remoteInfos","remoteStreamDescriptions","mapOfAttendeeIdToOptimalStreamId","Map","info","contain","streamId","set","attendeeId","videoSource","attendee","has","add","get","exports"],"sourceRoot":"","sources":["../../src/videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
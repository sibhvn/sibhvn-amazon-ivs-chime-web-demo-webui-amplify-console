{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst DefaultVideoStreamIndex_1 = require(\"./DefaultVideoStreamIndex\");\n\nconst VideoStreamDescription_1 = require(\"./VideoStreamDescription\");\n/**\n * [[SimulcastTransceiverController]] implements [[VideoStreamIndex]] to facilitate video stream\n * subscription and includes query functions for stream id and attendee id.\n */\n\n\nclass SimulcastVideoStreamIndex extends DefaultVideoStreamIndex_1.default {\n  constructor(logger) {\n    super(logger);\n    this.streamIdToBitrateKbpsMap = new Map();\n    this._localStreamInfos = [];\n    this._lastBitRateMsgTime = Date.now();\n  }\n\n  localStreamDescriptions() {\n    const clonedDescriptions = [];\n\n    this._localStreamInfos.forEach(desc => {\n      clonedDescriptions.push(desc.clone());\n    });\n\n    return clonedDescriptions;\n  }\n\n  integrateUplinkPolicyDecision(encodingParams) {\n    // Reuse local streams (that might already have stream IDs allocated) until\n    // there are no more and then add as many new local streams as needed\n    let hasStreamsToReuse = true;\n    let localStreamIndex = 0;\n\n    for (let i = 0; i < encodingParams.length; i++) {\n      const targetMaxBitrateKbps = encodingParams[i].maxBitrate / 1000;\n      const targetMaxFrameRate = encodingParams[i].maxFramerate;\n\n      if (!hasStreamsToReuse || i === this._localStreamInfos.length) {\n        hasStreamsToReuse = false;\n        const newInfo = new VideoStreamDescription_1.default();\n        newInfo.maxBitrateKbps = targetMaxBitrateKbps;\n        newInfo.maxFrameRate = targetMaxFrameRate;\n        newInfo.disabledByUplinkPolicy = targetMaxBitrateKbps === 0 ? true : false;\n\n        if (targetMaxBitrateKbps !== 0) {\n          newInfo.timeEnabled = Date.now();\n        }\n\n        this._localStreamInfos.push(newInfo);\n\n        localStreamIndex++;\n        continue;\n      }\n\n      if (this._localStreamInfos[localStreamIndex].maxBitrateKbps === 0 && targetMaxBitrateKbps > 0) {\n        this._localStreamInfos[localStreamIndex].timeEnabled = Date.now();\n      }\n\n      this._localStreamInfos[localStreamIndex].maxBitrateKbps = targetMaxBitrateKbps;\n      this._localStreamInfos[localStreamIndex].maxFrameRate = targetMaxFrameRate;\n      this._localStreamInfos[localStreamIndex].disabledByUplinkPolicy = targetMaxBitrateKbps === 0 ? true : false;\n\n      if (this._localStreamInfos[localStreamIndex].disabledByUplinkPolicy === true) {\n        this._localStreamInfos[localStreamIndex].disabledByWebRTC = false;\n      }\n\n      localStreamIndex++;\n    }\n\n    if (hasStreamsToReuse) {\n      // splice is zero-based, remove stream starting from localStreamIndex\n      this._localStreamInfos.splice(localStreamIndex);\n    }\n  }\n\n  integrateBitratesFrame(bitrateFrame) {\n    super.integrateBitratesFrame(bitrateFrame);\n    const stillSending = new Set();\n    const existingSet = new Set(this.streamIdToBitrateKbpsMap.keys());\n\n    for (const bitrateMsg of bitrateFrame.bitrates) {\n      stillSending.add(bitrateMsg.sourceStreamId);\n      this.streamIdToBitrateKbpsMap.set(bitrateMsg.sourceStreamId, this.convertBpsToKbps(bitrateMsg.avgBitrateBps));\n    }\n\n    for (const id of existingSet) {\n      if (!stillSending.has(id)) {\n        const avgBitrateBps = this.streamIdToBitrateKbpsMap.get(id);\n\n        if (avgBitrateBps === SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE) {\n          this.streamIdToBitrateKbpsMap.set(id, SimulcastVideoStreamIndex.RECENTLY_INACTIVE_STREAM_BITRATE);\n        } else {\n          this.streamIdToBitrateKbpsMap.set(id, SimulcastVideoStreamIndex.NOT_SENDING_STREAM_BITRATE);\n        }\n      }\n    }\n\n    for (let i = 0; i < this._localStreamInfos.length; i++) {\n      this._localStreamInfos[i].disabledByWebRTC = false;\n      const streamId = this._localStreamInfos[i].streamId;\n\n      if (this._localStreamInfos[i].disabledByUplinkPolicy) {\n        continue;\n      }\n\n      if (this.streamIdToBitrateKbpsMap.has(streamId)) {\n        const avgBitrateKbps = this.streamIdToBitrateKbpsMap.get(streamId);\n\n        if (avgBitrateKbps === SimulcastVideoStreamIndex.NOT_SENDING_STREAM_BITRATE && this._lastBitRateMsgTime - this._localStreamInfos[i].timeEnabled > SimulcastVideoStreamIndex.BitratesMsgFrequencyMs) {\n          this._localStreamInfos[i].disabledByWebRTC = true;\n        }\n      } else {\n        // Do not flag as disabled if it was recently enabled\n        if (this._lastBitRateMsgTime - this._localStreamInfos[i].timeEnabled > SimulcastVideoStreamIndex.BitratesMsgFrequencyMs) {\n          this._localStreamInfos[i].disabledByWebRTC = true;\n        }\n      }\n    }\n\n    this._lastBitRateMsgTime = Date.now();\n    this.logLocalStreamDescriptions();\n  }\n\n  logLocalStreamDescriptions() {\n    let msg = '';\n\n    for (const desc of this._localStreamInfos) {\n      msg += `streamId=${desc.streamId} maxBitrate=${desc.maxBitrateKbps} disabledByWebRTC=${desc.disabledByWebRTC} disabledByUplink=${desc.disabledByUplinkPolicy}\\n`;\n    }\n\n    this.logger.debug(() => {\n      return msg;\n    });\n  }\n\n  integrateIndexFrame(indexFrame) {\n    super.integrateIndexFrame(indexFrame);\n    const newIndexStreamIdSet = new Set();\n    const existingSet = new Set(this.streamIdToBitrateKbpsMap.keys());\n\n    for (const stream of this.currentIndex.sources) {\n      if (stream.mediaType !== SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {\n        continue;\n      }\n\n      newIndexStreamIdSet.add(stream.streamId);\n\n      if (!this.streamIdToBitrateKbpsMap.has(stream.streamId)) {\n        this.streamIdToBitrateKbpsMap.set(stream.streamId, SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE);\n      }\n    }\n\n    for (const id of existingSet) {\n      if (!newIndexStreamIdSet.has(id)) {\n        this.streamIdToBitrateKbpsMap.delete(id);\n      }\n    }\n  }\n\n  integrateSubscribeAckFrame(subscribeAck) {\n    super.integrateSubscribeAckFrame(subscribeAck);\n\n    if (!subscribeAck.allocations || subscribeAck.allocations === undefined) {\n      return;\n    }\n\n    let localStreamStartIndex = 0;\n\n    for (const allocation of subscribeAck.allocations) {\n      // track label is what we offered to the server\n      if (this._localStreamInfos.length < localStreamStartIndex + 1) {\n        this.logger.info('simulcast: allocation has more than number of local streams');\n        break;\n      }\n\n      this._localStreamInfos[localStreamStartIndex].groupId = allocation.groupId;\n      this._localStreamInfos[localStreamStartIndex].streamId = allocation.streamId;\n\n      if (!this.streamIdToBitrateKbpsMap.has(allocation.streamId)) {\n        this.streamIdToBitrateKbpsMap.set(allocation.streamId, SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE);\n      }\n\n      localStreamStartIndex++;\n    }\n  }\n\n}\n\nexports.default = SimulcastVideoStreamIndex; // First time when the bitrate of a stream id is missing from bitrate message, mark it as UNSEEN\n\nSimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE = -2; // Second time when the bitrate is missing, mark it as recently inactive\n\nSimulcastVideoStreamIndex.RECENTLY_INACTIVE_STREAM_BITRATE = -1; // Third time when bitrate is missing, mark it as not sending\n\nSimulcastVideoStreamIndex.NOT_SENDING_STREAM_BITRATE = 0;\nSimulcastVideoStreamIndex.BitratesMsgFrequencyMs = 4000;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAGA;;AAMA;;AACA;AAEA;;;;;;AAIA,MAAqBA,yBAArB,SAAuDC,iCAAvD,CAA8E;EAgB5EC,YAAYC,MAAZ,EAA0B;IACxB,MAAMA,MAAN;IAhBM,gCAAgD,IAAIC,GAAJ,EAAhD;IAWA,yBAA8C,EAA9C;IAMN,KAAKC,mBAAL,GAA2BC,IAAI,CAACC,GAAL,EAA3B;EACD;;EAEDC,uBAAuB;IACrB,MAAMC,kBAAkB,GAA6B,EAArD;;IACA,KAAKC,iBAAL,CAAuBC,OAAvB,CAA+BC,IAAI,IAAG;MACpCH,kBAAkB,CAACI,IAAnB,CAAwBD,IAAI,CAACE,KAAL,EAAxB;IACD,CAFD;;IAGA,OAAOL,kBAAP;EACD;;EAEDM,6BAA6B,CAACC,cAAD,EAA2C;IACtE;IACA;IACA,IAAIC,iBAAiB,GAAG,IAAxB;IACA,IAAIC,gBAAgB,GAAG,CAAvB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,cAAc,CAACI,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;MAC9C,MAAME,oBAAoB,GAAGL,cAAc,CAACG,CAAD,CAAd,CAAkBG,UAAlB,GAA+B,IAA5D;MACA,MAAMC,kBAAkB,GAAGP,cAAc,CAACG,CAAD,CAAd,CAAkBK,YAA7C;;MACA,IAAI,CAACP,iBAAD,IAAsBE,CAAC,KAAK,KAAKT,iBAAL,CAAuBU,MAAvD,EAA+D;QAC7DH,iBAAiB,GAAG,KAApB;QACA,MAAMQ,OAAO,GAAG,IAAIC,gCAAJ,EAAhB;QACAD,OAAO,CAACE,cAAR,GAAyBN,oBAAzB;QACAI,OAAO,CAACG,YAAR,GAAuBL,kBAAvB;QACAE,OAAO,CAACI,sBAAR,GAAiCR,oBAAoB,KAAK,CAAzB,GAA6B,IAA7B,GAAoC,KAArE;;QACA,IAAIA,oBAAoB,KAAK,CAA7B,EAAgC;UAC9BI,OAAO,CAACK,WAAR,GAAsBxB,IAAI,CAACC,GAAL,EAAtB;QACD;;QACD,KAAKG,iBAAL,CAAuBG,IAAvB,CAA4BY,OAA5B;;QACAP,gBAAgB;QAChB;MACD;;MAED,IACE,KAAKR,iBAAL,CAAuBQ,gBAAvB,EAAyCS,cAAzC,KAA4D,CAA5D,IACAN,oBAAoB,GAAG,CAFzB,EAGE;QACA,KAAKX,iBAAL,CAAuBQ,gBAAvB,EAAyCY,WAAzC,GAAuDxB,IAAI,CAACC,GAAL,EAAvD;MACD;;MACD,KAAKG,iBAAL,CAAuBQ,gBAAvB,EAAyCS,cAAzC,GAA0DN,oBAA1D;MACA,KAAKX,iBAAL,CAAuBQ,gBAAvB,EAAyCU,YAAzC,GAAwDL,kBAAxD;MACA,KAAKb,iBAAL,CAAuBQ,gBAAvB,EAAyCW,sBAAzC,GACER,oBAAoB,KAAK,CAAzB,GAA6B,IAA7B,GAAoC,KADtC;;MAEA,IAAI,KAAKX,iBAAL,CAAuBQ,gBAAvB,EAAyCW,sBAAzC,KAAoE,IAAxE,EAA8E;QAC5E,KAAKnB,iBAAL,CAAuBQ,gBAAvB,EAAyCa,gBAAzC,GAA4D,KAA5D;MACD;;MACDb,gBAAgB;IACjB;;IAED,IAAID,iBAAJ,EAAuB;MACrB;MACA,KAAKP,iBAAL,CAAuBsB,MAAvB,CAA8Bd,gBAA9B;IACD;EACF;;EAEDe,sBAAsB,CAACC,YAAD,EAA8B;IAClD,MAAMD,sBAAN,CAA6BC,YAA7B;IAEA,MAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;IACA,MAAMC,WAAW,GAAG,IAAID,GAAJ,CAAgB,KAAKE,wBAAL,CAA8BC,IAA9B,EAAhB,CAApB;;IACA,KAAK,MAAMC,UAAX,IAAyBN,YAAY,CAACO,QAAtC,EAAgD;MAC9CN,YAAY,CAACO,GAAb,CAAiBF,UAAU,CAACG,cAA5B;MACA,KAAKL,wBAAL,CAA8BM,GAA9B,CACEJ,UAAU,CAACG,cADb,EAEE,KAAKE,gBAAL,CAAsBL,UAAU,CAACM,aAAjC,CAFF;IAID;;IAED,KAAK,MAAMC,EAAX,IAAiBV,WAAjB,EAA8B;MAC5B,IAAI,CAACF,YAAY,CAACa,GAAb,CAAiBD,EAAjB,CAAL,EAA2B;QACzB,MAAMD,aAAa,GAAG,KAAKR,wBAAL,CAA8BW,GAA9B,CAAkCF,EAAlC,CAAtB;;QACA,IAAID,aAAa,KAAK9C,yBAAyB,CAACkD,qBAAhD,EAAuE;UACrE,KAAKZ,wBAAL,CAA8BM,GAA9B,CACEG,EADF,EAEE/C,yBAAyB,CAACmD,gCAF5B;QAID,CALD,MAKO;UACL,KAAKb,wBAAL,CAA8BM,GAA9B,CACEG,EADF,EAEE/C,yBAAyB,CAACoD,0BAF5B;QAID;MACF;IACF;;IAED,KAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,iBAAL,CAAuBU,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;MACtD,KAAKT,iBAAL,CAAuBS,CAAvB,EAA0BY,gBAA1B,GAA6C,KAA7C;MACA,MAAMsB,QAAQ,GAAG,KAAK3C,iBAAL,CAAuBS,CAAvB,EAA0BkC,QAA3C;;MACA,IAAI,KAAK3C,iBAAL,CAAuBS,CAAvB,EAA0BU,sBAA9B,EAAsD;QACpD;MACD;;MACD,IAAI,KAAKS,wBAAL,CAA8BU,GAA9B,CAAkCK,QAAlC,CAAJ,EAAiD;QAC/C,MAAMC,cAAc,GAAG,KAAKhB,wBAAL,CAA8BW,GAA9B,CAAkCI,QAAlC,CAAvB;;QACA,IACEC,cAAc,KAAKtD,yBAAyB,CAACoD,0BAA7C,IACA,KAAK/C,mBAAL,GAA2B,KAAKK,iBAAL,CAAuBS,CAAvB,EAA0BW,WAArD,GACE9B,yBAAyB,CAACuD,sBAH9B,EAIE;UACA,KAAK7C,iBAAL,CAAuBS,CAAvB,EAA0BY,gBAA1B,GAA6C,IAA7C;QACD;MACF,CATD,MASO;QACL;QACA,IACE,KAAK1B,mBAAL,GAA2B,KAAKK,iBAAL,CAAuBS,CAAvB,EAA0BW,WAArD,GACA9B,yBAAyB,CAACuD,sBAF5B,EAGE;UACA,KAAK7C,iBAAL,CAAuBS,CAAvB,EAA0BY,gBAA1B,GAA6C,IAA7C;QACD;MACF;IACF;;IACD,KAAK1B,mBAAL,GAA2BC,IAAI,CAACC,GAAL,EAA3B;IACA,KAAKiD,0BAAL;EACD;;EAEOA,0BAA0B;IAChC,IAAIC,GAAG,GAAG,EAAV;;IACA,KAAK,MAAM7C,IAAX,IAAmB,KAAKF,iBAAxB,EAA2C;MACzC+C,GAAG,IAAI,YAAY7C,IAAI,CAACyC,QAAQ,eAAezC,IAAI,CAACe,cAAc,qBAAqBf,IAAI,CAACmB,gBAAgB,qBAAqBnB,IAAI,CAACiB,sBAAsB,IAA5J;IACD;;IACD,KAAK1B,MAAL,CAAYuD,KAAZ,CAAkB,MAAK;MACrB,OAAOD,GAAP;IACD,CAFD;EAGD;;EAEDE,mBAAmB,CAACC,UAAD,EAA0B;IAC3C,MAAMD,mBAAN,CAA0BC,UAA1B;IAEA,MAAMC,mBAAmB,GAAG,IAAIzB,GAAJ,EAA5B;IACA,MAAMC,WAAW,GAAG,IAAID,GAAJ,CAAgB,KAAKE,wBAAL,CAA8BC,IAA9B,EAAhB,CAApB;;IACA,KAAK,MAAMuB,MAAX,IAAqB,KAAKC,YAAL,CAAkBC,OAAvC,EAAgD;MAC9C,IAAIF,MAAM,CAACG,SAAP,KAAqBC,0CAAmBC,KAA5C,EAAmD;QACjD;MACD;;MACDN,mBAAmB,CAACnB,GAApB,CAAwBoB,MAAM,CAACT,QAA/B;;MACA,IAAI,CAAC,KAAKf,wBAAL,CAA8BU,GAA9B,CAAkCc,MAAM,CAACT,QAAzC,CAAL,EAAyD;QACvD,KAAKf,wBAAL,CAA8BM,GAA9B,CACEkB,MAAM,CAACT,QADT,EAEErD,yBAAyB,CAACkD,qBAF5B;MAID;IACF;;IAED,KAAK,MAAMH,EAAX,IAAiBV,WAAjB,EAA8B;MAC5B,IAAI,CAACwB,mBAAmB,CAACb,GAApB,CAAwBD,EAAxB,CAAL,EAAkC;QAChC,KAAKT,wBAAL,CAA8B8B,MAA9B,CAAqCrB,EAArC;MACD;IACF;EACF;;EAEDsB,0BAA0B,CAACC,YAAD,EAAmC;IAC3D,MAAMD,0BAAN,CAAiCC,YAAjC;;IACA,IAAI,CAACA,YAAY,CAACC,WAAd,IAA6BD,YAAY,CAACC,WAAb,KAA6BC,SAA9D,EAAyE;MACvE;IACD;;IAED,IAAIC,qBAAqB,GAAG,CAA5B;;IACA,KAAK,MAAMC,UAAX,IAAyBJ,YAAY,CAACC,WAAtC,EAAmD;MACjD;MACA,IAAI,KAAK7D,iBAAL,CAAuBU,MAAvB,GAAgCqD,qBAAqB,GAAG,CAA5D,EAA+D;QAC7D,KAAKtE,MAAL,CAAYwE,IAAZ,CAAiB,6DAAjB;QACA;MACD;;MACD,KAAKjE,iBAAL,CAAuB+D,qBAAvB,EAA8CG,OAA9C,GAAwDF,UAAU,CAACE,OAAnE;MACA,KAAKlE,iBAAL,CAAuB+D,qBAAvB,EAA8CpB,QAA9C,GAAyDqB,UAAU,CAACrB,QAApE;;MACA,IAAI,CAAC,KAAKf,wBAAL,CAA8BU,GAA9B,CAAkC0B,UAAU,CAACrB,QAA7C,CAAL,EAA6D;QAC3D,KAAKf,wBAAL,CAA8BM,GAA9B,CACE8B,UAAU,CAACrB,QADb,EAEErD,yBAAyB,CAACkD,qBAF5B;MAID;;MACDuB,qBAAqB;IACtB;EACF;;AA9L2E;;AAA9EI,4C,CAGE;;AACgB7E,kDAAwB,CAAC,CAAzB,C,CAChB;;AACgBA,6DAAmC,CAAC,CAApC,C,CAChB;;AACgBA,uDAA6B,CAA7B;AAEAA,mDAAiC,IAAjC","names":["SimulcastVideoStreamIndex","DefaultVideoStreamIndex_1","constructor","logger","Map","_lastBitRateMsgTime","Date","now","localStreamDescriptions","clonedDescriptions","_localStreamInfos","forEach","desc","push","clone","integrateUplinkPolicyDecision","encodingParams","hasStreamsToReuse","localStreamIndex","i","length","targetMaxBitrateKbps","maxBitrate","targetMaxFrameRate","maxFramerate","newInfo","VideoStreamDescription_1","maxBitrateKbps","maxFrameRate","disabledByUplinkPolicy","timeEnabled","disabledByWebRTC","splice","integrateBitratesFrame","bitrateFrame","stillSending","Set","existingSet","streamIdToBitrateKbpsMap","keys","bitrateMsg","bitrates","add","sourceStreamId","set","convertBpsToKbps","avgBitrateBps","id","has","get","UNSEEN_STREAM_BITRATE","RECENTLY_INACTIVE_STREAM_BITRATE","NOT_SENDING_STREAM_BITRATE","streamId","avgBitrateKbps","BitratesMsgFrequencyMs","logLocalStreamDescriptions","msg","debug","integrateIndexFrame","indexFrame","newIndexStreamIdSet","stream","currentIndex","sources","mediaType","SignalingProtocol_js_1","VIDEO","delete","integrateSubscribeAckFrame","subscribeAck","allocations","undefined","localStreamStartIndex","allocation","info","groupId","exports"],"sourceRoot":"","sources":["../../src/videostreamindex/SimulcastVideoStreamIndex.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
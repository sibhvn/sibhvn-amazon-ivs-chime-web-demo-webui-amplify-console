{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst FILTER_DURATION_FACTOR = 0.8;\n/**\n * The frame counter tracks frame rates of video and segmentation.\n */\n\n/** @internal */\n\nclass BackgroundFilterFrameCounter {\n  constructor(delegate, reportingPeriodMillis, filterCPUUtilization, logger) {\n    this.delegate = delegate;\n    this.reportingPeriodMillis = reportingPeriodMillis;\n    this.filterCPUUtilization = filterCPUUtilization;\n    this.logger = logger;\n    this._processingFilter = true;\n    this.lastReportedEventTimestamp = 0;\n    this.lastFilterCompleteTimestamp = 0;\n    this.filterTotalMillis = 0;\n    this.filterCount = 0;\n    this.framerate = 0;\n    this.filterDurationNotifyMillis = 0;\n    this.setSegmentationDuration();\n  }\n  /**\n   * Report events once per period.\n   */\n\n\n  reportEvent(timestamp) {\n    const timeDiff = timestamp - this.lastReportedEventTimestamp;\n\n    if (timeDiff >= this.reportingPeriodMillis) {\n      const currentFilterCount = this.filterCount;\n      const currentFilterTotalMillis = this.filterTotalMillis;\n      this.filterCount = 0;\n      this.filterTotalMillis = 0;\n      this.lastReportedEventTimestamp = timestamp; // Do not send notification unless a valid framerate or segment count is set.\n\n      if (this.framerate === 0 || currentFilterCount === 0) {\n        return;\n      }\n\n      const avgFilterDurationMillis = Math.round(currentFilterTotalMillis / currentFilterCount);\n      const framesDropped = Math.round(this.framerate * (timeDiff / 1000)) - currentFilterCount;\n      const cpuUtilization = Math.round(100 * currentFilterTotalMillis / timeDiff);\n\n      if (avgFilterDurationMillis >= this.filterDurationNotifyMillis) {\n        this.delegate.filterFrameDurationHigh({\n          framesDropped,\n          avgFilterDurationMillis,\n          framerate: this.framerate,\n          periodMillis: timeDiff\n        });\n      }\n\n      if (cpuUtilization >= this.filterCPUUtilization) {\n        this.delegate.filterCPUUtilizationHigh({\n          cpuUtilization,\n          filterMillis: currentFilterTotalMillis,\n          periodMillis: timeDiff\n        });\n      }\n    }\n  }\n\n  setSegmentationDuration() {\n    // allow filtering to take up to 80% of the expected frame duration\n    this.filterDurationNotifyMillis = Math.round(1000 / this.framerate * FILTER_DURATION_FACTOR);\n  }\n\n  frameReceived(framerate) {\n    if (framerate !== this.framerate) {\n      this.framerate = framerate;\n      this.logger.info(`frame counter setting frame rate to ${this.framerate}`);\n      this.setSegmentationDuration();\n    }\n\n    const timestamp = Date.now();\n    this.reportEvent(timestamp);\n  }\n\n  filterSubmitted() {\n    this._processingFilter = true;\n    this.lastFilterCompleteTimestamp = Date.now();\n  }\n\n  filterComplete() {\n    this.filterTotalMillis += Date.now() - this.lastFilterCompleteTimestamp;\n    this._processingFilter = false;\n    this.filterCount++;\n  }\n\n  get processingSegment() {\n    return this._processingFilter;\n  }\n\n}\n\nexports.default = BackgroundFilterFrameCounter;","map":{"version":3,"mappings":"cAAA;AACA;;;;;AAKA,MAAMA,sBAAsB,GAAG,GAA/B;AAEA;;;;AAGA;;AACA,MAAqBC,4BAArB,CAAiD;EAW/CC,YACUC,QADV,EAEUC,qBAFV,EAGUC,oBAHV,EAIUC,MAJV,EAIwB;IAHd;IACA;IACA;IACA;IAdF,yBAA6B,IAA7B;IAEA,kCAAqC,CAArC;IACA,mCAAsC,CAAtC;IACA,yBAA4B,CAA5B;IAEA,mBAAsB,CAAtB;IACA,iBAAoB,CAApB;IACA,kCAA6B,CAA7B;IAQN,KAAKC,uBAAL;EACD;EAED;;;;;EAGQC,WAAW,CAACC,SAAD,EAAkB;IACnC,MAAMC,QAAQ,GAAGD,SAAS,GAAG,KAAKE,0BAAlC;;IACA,IAAID,QAAQ,IAAI,KAAKN,qBAArB,EAA4C;MAC1C,MAAMQ,kBAAkB,GAAG,KAAKC,WAAhC;MACA,MAAMC,wBAAwB,GAAG,KAAKC,iBAAtC;MAEA,KAAKF,WAAL,GAAmB,CAAnB;MACA,KAAKE,iBAAL,GAAyB,CAAzB;MACA,KAAKJ,0BAAL,GAAkCF,SAAlC,CAN0C,CAQ1C;;MACA,IAAI,KAAKO,SAAL,KAAmB,CAAnB,IAAwBJ,kBAAkB,KAAK,CAAnD,EAAsD;QACpD;MACD;;MAED,MAAMK,uBAAuB,GAAGC,IAAI,CAACC,KAAL,CAAWL,wBAAwB,GAAGF,kBAAtC,CAAhC;MACA,MAAMQ,aAAa,GAAGF,IAAI,CAACC,KAAL,CAAW,KAAKH,SAAL,IAAkBN,QAAQ,GAAG,IAA7B,CAAX,IAAiDE,kBAAvE;MACA,MAAMS,cAAc,GAAGH,IAAI,CAACC,KAAL,CAAY,MAAML,wBAAP,GAAmCJ,QAA9C,CAAvB;;MAEA,IAAIO,uBAAuB,IAAI,KAAKK,0BAApC,EAAgE;QAC9D,KAAKnB,QAAL,CAAcoB,uBAAd,CAAsC;UACpCH,aADoC;UAEpCH,uBAFoC;UAGpCD,SAAS,EAAE,KAAKA,SAHoB;UAIpCQ,YAAY,EAAEd;QAJsB,CAAtC;MAMD;;MAED,IAAIW,cAAc,IAAI,KAAKhB,oBAA3B,EAAiD;QAC/C,KAAKF,QAAL,CAAcsB,wBAAd,CAAuC;UACrCJ,cADqC;UAErCK,YAAY,EAAEZ,wBAFuB;UAGrCU,YAAY,EAAEd;QAHuB,CAAvC;MAKD;IACF;EACF;;EAEOH,uBAAuB;IAC7B;IACA,KAAKe,0BAAL,GAAkCJ,IAAI,CAACC,KAAL,CAAY,OAAO,KAAKH,SAAb,GAA0BhB,sBAArC,CAAlC;EACD;;EAED2B,aAAa,CAACX,SAAD,EAAkB;IAC7B,IAAIA,SAAS,KAAK,KAAKA,SAAvB,EAAkC;MAChC,KAAKA,SAAL,GAAiBA,SAAjB;MACA,KAAKV,MAAL,CAAYsB,IAAZ,CAAiB,uCAAuC,KAAKZ,SAAS,EAAtE;MACA,KAAKT,uBAAL;IACD;;IACD,MAAME,SAAS,GAAGoB,IAAI,CAACC,GAAL,EAAlB;IACA,KAAKtB,WAAL,CAAiBC,SAAjB;EACD;;EAEDsB,eAAe;IACb,KAAKC,iBAAL,GAAyB,IAAzB;IACA,KAAKC,2BAAL,GAAmCJ,IAAI,CAACC,GAAL,EAAnC;EACD;;EAEDI,cAAc;IACZ,KAAKnB,iBAAL,IAA0Bc,IAAI,CAACC,GAAL,KAAa,KAAKG,2BAA5C;IACA,KAAKD,iBAAL,GAAyB,KAAzB;IACA,KAAKnB,WAAL;EACD;;EAEoB,IAAjBsB,iBAAiB;IACnB,OAAO,KAAKH,iBAAZ;EACD;;AAzF8C;;AAAjDI","names":["FILTER_DURATION_FACTOR","BackgroundFilterFrameCounter","constructor","delegate","reportingPeriodMillis","filterCPUUtilization","logger","setSegmentationDuration","reportEvent","timestamp","timeDiff","lastReportedEventTimestamp","currentFilterCount","filterCount","currentFilterTotalMillis","filterTotalMillis","framerate","avgFilterDurationMillis","Math","round","framesDropped","cpuUtilization","filterDurationNotifyMillis","filterFrameDurationHigh","periodMillis","filterCPUUtilizationHigh","filterMillis","frameReceived","info","Date","now","filterSubmitted","_processingFilter","lastFilterCompleteTimestamp","filterComplete","processingSegment","exports"],"sourceRoot":"","sources":["../../src/backgroundfilter/BackgroundFilterFrameCounter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
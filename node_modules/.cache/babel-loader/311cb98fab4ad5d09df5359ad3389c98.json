{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass DefaultActiveSpeakerPolicy {\n  /** Creates active speaker policy with speakerWeight, cutoffThreshold, silenceThreshold, and takeoverRate.\n   *\n   * @param speakerWeight\n   * The number used to calculate new active speaker score for current attendee.\n   * ```js\n   * Formula:\n   * updatedCurrentAttendeeScore = currentAttendeeExistingScore * speakerWeight + currentReceivedVolume * (1 - speakerWeight)\n   * ```\n   *\n   * @param cutoffThreshold\n   * The threshold number compared with updated active speaker score.\n   * If the updated active speaker score is less than this threshold value,\n   * the updated score is returned as 0, else the updated score is returned.\n   *\n   * @param silenceThreshold\n   * The threshold number compared with current received volume.\n   * While calculating the new active speaker score, if the current received\n   * volume is less than this threshold value, the current received volume is considered as 0,\n   * else 1.\n   *\n   * @param takeoverRate\n   * The number used to calculate other attendee's active speaker score, other than the current attendee.\n   * ```js\n   * Formula:\n   *  updatedOtherAttendeeActiveSpeakerScore = Math.max(\n   *    existingOtherAttendeeActiveSpeakerScore - takeoverRate * currentReceivedVolume,\n   *    0\n   *  );\n   * ```\n   */\n  constructor() {\n    let speakerWeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.9;\n    let cutoffThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.01;\n    let silenceThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.2;\n    let takeoverRate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.2;\n    this.speakerWeight = speakerWeight;\n    this.cutoffThreshold = cutoffThreshold;\n    this.silenceThreshold = silenceThreshold;\n    this.takeoverRate = takeoverRate;\n    /**\n     * The map of attendeeIds to their active speaker score values\n     */\n\n    this.volumes = {};\n  }\n\n  calculateScore(attendeeId, volume, muted) {\n    if (muted || volume === null) {\n      volume = 0;\n    }\n\n    if (!this.volumes.hasOwnProperty(attendeeId)) {\n      this.volumes[attendeeId] = 0;\n    }\n\n    if (volume > this.silenceThreshold) {\n      volume = 1.0;\n    } else {\n      volume = 0.0;\n    }\n\n    const score = this.volumes[attendeeId] * this.speakerWeight + volume * (1 - this.speakerWeight);\n    this.volumes[attendeeId] = score;\n\n    for (const otherAttendeeId in this.volumes) {\n      if (otherAttendeeId !== attendeeId) {\n        this.volumes[otherAttendeeId] = Math.max(this.volumes[otherAttendeeId] - this.takeoverRate * volume, 0);\n      }\n    }\n\n    if (score < this.cutoffThreshold) {\n      return 0;\n    }\n\n    return score;\n  }\n\n  prioritizeVideoSendBandwidthForActiveSpeaker() {\n    return true;\n  }\n\n}\n\nexports.default = DefaultActiveSpeakerPolicy;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAIA,MAAqBA,0BAArB,CAA+C;EAM7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BAC,cAI4B;IAAA,IAHlBC,aAGkB,uEAHM,GAGN;IAAA,IAFlBC,eAEkB,uEAFQ,IAER;IAAA,IADlBC,gBACkB,uEADC,GACD;IAAA,IAAlBC,YAAkB,uEAAH,GAAG;IAHlB;IACA;IACA;IACA;IAvCV;;;;IAGQ,eAA4C,EAA5C;EAqCJ;;EAEJC,cAAc,CAACC,UAAD,EAAqBC,MAArB,EAA4CC,KAA5C,EAAiE;IAC7E,IAAIA,KAAK,IAAID,MAAM,KAAK,IAAxB,EAA8B;MAC5BA,MAAM,GAAG,CAAT;IACD;;IACD,IAAI,CAAC,KAAKE,OAAL,CAAaC,cAAb,CAA4BJ,UAA5B,CAAL,EAA8C;MAC5C,KAAKG,OAAL,CAAaH,UAAb,IAA2B,CAA3B;IACD;;IACD,IAAIC,MAAM,GAAG,KAAKJ,gBAAlB,EAAoC;MAClCI,MAAM,GAAG,GAAT;IACD,CAFD,MAEO;MACLA,MAAM,GAAG,GAAT;IACD;;IACD,MAAMI,KAAK,GAAG,KAAKF,OAAL,CAAaH,UAAb,IAA2B,KAAKL,aAAhC,GAAgDM,MAAM,IAAI,IAAI,KAAKN,aAAb,CAApE;IACA,KAAKQ,OAAL,CAAaH,UAAb,IAA2BK,KAA3B;;IACA,KAAK,MAAMC,eAAX,IAA8B,KAAKH,OAAnC,EAA4C;MAC1C,IAAIG,eAAe,KAAKN,UAAxB,EAAoC;QAClC,KAAKG,OAAL,CAAaG,eAAb,IAAgCC,IAAI,CAACC,GAAL,CAC9B,KAAKL,OAAL,CAAaG,eAAb,IAAgC,KAAKR,YAAL,GAAoBG,MADtB,EAE9B,CAF8B,CAAhC;MAID;IACF;;IACD,IAAII,KAAK,GAAG,KAAKT,eAAjB,EAAkC;MAChC,OAAO,CAAP;IACD;;IACD,OAAOS,KAAP;EACD;;EAEDI,4CAA4C;IAC1C,OAAO,IAAP;EACD;;AAzE4C;;AAA/CC","names":["DefaultActiveSpeakerPolicy","constructor","speakerWeight","cutoffThreshold","silenceThreshold","takeoverRate","calculateScore","attendeeId","volume","muted","volumes","hasOwnProperty","score","otherAttendeeId","Math","max","prioritizeVideoSendBandwidthForActiveSpeaker","exports"],"sourceRoot":"","sources":["../../src/activespeakerpolicy/DefaultActiveSpeakerPolicy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
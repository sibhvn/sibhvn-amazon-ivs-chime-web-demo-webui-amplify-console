{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BackgroundFilterVideoFrameProcessor_1 = require(\"../backgroundfilter/BackgroundFilterVideoFrameProcessor\");\n\nconst ConsoleLogger_1 = require(\"../logger/ConsoleLogger\");\n\nconst LogLevel_1 = require(\"../logger/LogLevel\");\n\nconst NoOpVideoFrameProcessor_1 = require(\"../videoframeprocessor/NoOpVideoFrameProcessor\");\n\nconst BackgroundBlurProcessorBuiltIn_1 = require(\"./BackgroundBlurProcessorBuiltIn\");\n\nconst BackgroundBlurProcessorProvided_1 = require(\"./BackgroundBlurProcessorProvided\");\n\nconst BackgroundBlurStrength_1 = require(\"./BackgroundBlurStrength\");\n/**\n * No-op implementation of the blur processor. An instance of this class will be returned when a user attempts\n * to create a blur processor when it is not supported.\n */\n\n/** @internal */\n\n\nclass NoOpBackgroundBlurProcessor extends NoOpVideoFrameProcessor_1.default {\n  /**\n   * no-op\n   */\n  setBlurStrength() {}\n  /**\n   * no-op\n   * @returns\n   */\n\n\n  loadAssets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return;\n    });\n  }\n  /**\n   * no-op\n   */\n\n\n  addObserver() {}\n  /**\n   * no-op\n   */\n\n\n  removeObserver() {}\n\n}\n/**\n * [[BackgroundBlurVideoFrameProcessor]]\n * Creates a background blur processor which identifies the foreground person and blurs the background.\n */\n\n\nclass BackgroundBlurVideoFrameProcessor extends BackgroundFilterVideoFrameProcessor_1.default {\n  /**\n   * A factory method that will call the private constructor to instantiate the processor and asynchronously\n   * initialize the worker, wasm, and ML models. Upon completion of the initialization the promise will either\n   * be resolved or rejected.\n   * @param spec The spec defines the assets that will be used for adding background blur to a frame\n   * @param blurStrength How much blur to apply to a frame\n   * @returns\n   */\n  static create(spec, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      spec = BackgroundBlurVideoFrameProcessor.resolveSpec(spec);\n      options = BackgroundBlurVideoFrameProcessor.resolveOptions(options);\n      const {\n        logger\n      } = options;\n      const supported = yield BackgroundBlurVideoFrameProcessor.isSupported(spec, options); // if blur is not supported do not initialize. The processor will become a no op if not supported.\n\n      logger.info(`processor is ${supported ? '' : 'not'} supported`);\n\n      if (!supported) {\n        logger.warn('Using no-op processor because background blur is not supported');\n        return new NoOpBackgroundBlurProcessor();\n      }\n\n      let processor;\n\n      if (yield BackgroundBlurProcessorProvided_1.default.isSupported()) {\n        logger.info('Using browser-provided background blur');\n        processor = new BackgroundBlurProcessorProvided_1.default(spec, options);\n      } else {\n        logger.info('Using built-in background blur');\n        processor = new BackgroundBlurProcessorBuiltIn_1.default(spec, options);\n      }\n\n      yield processor.loadAssets();\n      return processor;\n    });\n  }\n  /**\n   * Based on the options that are passed in set defaults for options\n   * @param options  the options that are passed in\n   * @returns An updated set of options with defaults set\n   */\n\n\n  static resolveOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!options.blurStrength) {\n      options.blurStrength = BackgroundBlurStrength_1.default.MEDIUM;\n    }\n\n    if (!options.logger) {\n      options.logger = new ConsoleLogger_1.default('BackgroundBlurProcessor', LogLevel_1.default.INFO);\n    }\n\n    options = super.resolveOptions(options);\n    return options;\n  }\n  /**\n   * This method will detect the environment in which it is being used and determine if background\n   * blur can be used.\n   * @param spec The {@link BackgroundBlurSpec} spec that will be used to initialize assets\n   * @param options options such as logger\n   * @returns a boolean promise that will resolve to true if supported and false if not\n   */\n\n\n  static isSupported(spec, options) {\n    spec = BackgroundBlurVideoFrameProcessor.resolveSpec(spec);\n    options = BackgroundBlurVideoFrameProcessor.resolveOptions(options);\n    return super.isSupported(spec, options);\n  }\n\n}\n\nexports.default = BackgroundBlurVideoFrameProcessor;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;;AAEA;;AACA;;AAGA;;AACA;;AACA;AAEA;;;;;AAIA;;;AACA,MAAMA,2BAAN,SACUC,iCADV,CACiC;EAE/B;;;EAGAC,eAAe,IAAW;EAE1B;;;;;;EAIMC,UAAU;;MACd;IACD;EAAA;EAED;;;;;EAGAC,WAAW,IAAW;EAEtB;;;;;EAGAC,cAAc,IAAW;;AAvBM;AA0BjC;;;;;;AAIA,MAAqBC,iCAArB,SAA+DC,6CAA/D,CAAkG;EAChG;;;;;;;;EAQmB,OAANC,MAAM,CACjBC,IADiB,EAEjBC,OAFiB,EAEc;;MAE/BD,IAAI,GAAGH,iCAAiC,CAACK,WAAlC,CAA8CF,IAA9C,CAAP;MACAC,OAAO,GAAGJ,iCAAiC,CAACM,cAAlC,CAAiDF,OAAjD,CAAV;MACA,MAAM;QAAEG;MAAF,IAAaH,OAAnB;MAEA,MAAMI,SAAS,GAAG,MAAMR,iCAAiC,CAACS,WAAlC,CAA8CN,IAA9C,EAAoDC,OAApD,CAAxB,EACA;;MACAG,MAAM,CAACG,IAAP,CAAY,gBAAgBF,SAAS,GAAG,EAAH,GAAQ,KAAK,YAAlD;;MACA,IAAI,CAACA,SAAL,EAAgB;QACdD,MAAM,CAACI,IAAP,CAAY,gEAAZ;QACA,OAAO,IAAIjB,2BAAJ,EAAP;MACD;;MAED,IAAIkB,SAAJ;;MACA,IAAI,MAAMC,0CAAgCJ,WAAhC,EAAV,EAAyD;QACvDF,MAAM,CAACG,IAAP,CAAY,wCAAZ;QACAE,SAAS,GAAG,IAAIC,yCAAJ,CAAoCV,IAApC,EAA0CC,OAA1C,CAAZ;MACD,CAHD,MAGO;QACLG,MAAM,CAACG,IAAP,CAAY,gCAAZ;QACAE,SAAS,GAAG,IAAIE,wCAAJ,CAAmCX,IAAnC,EAAyCC,OAAzC,CAAZ;MACD;;MAED,MAAMQ,SAAS,CAACf,UAAV,EAAN;MACA,OAAOe,SAAP;IACD;EAAA;EAED;;;;;;;EAK+B,OAAdN,cAAc,GAAoC;IAAA,IAAnCF,OAAmC,uEAAF,EAAE;;IACjE,IAAI,CAACA,OAAO,CAACW,YAAb,EAA2B;MACzBX,OAAO,CAACW,YAAR,GAAuBC,iCAAaC,MAApC;IACD;;IAED,IAAI,CAACb,OAAO,CAACG,MAAb,EAAqB;MACnBH,OAAO,CAACG,MAAR,GAAiB,IAAIW,uBAAJ,CAAkB,yBAAlB,EAA6CC,mBAASC,IAAtD,CAAjB;IACD;;IACDhB,OAAO,GAAG,MAAME,cAAN,CAAqBF,OAArB,CAAV;IACA,OAAOA,OAAP;EACD;EAED;;;;;;;;;EAOkB,OAAXK,WAAW,CAACN,IAAD,EAA8BC,OAA9B,EAA2D;IAC3ED,IAAI,GAAGH,iCAAiC,CAACK,WAAlC,CAA8CF,IAA9C,CAAP;IACAC,OAAO,GAAGJ,iCAAiC,CAACM,cAAlC,CAAiDF,OAAjD,CAAV;IACA,OAAO,MAAMK,WAAN,CAAkBN,IAAlB,EAAwBC,OAAxB,CAAP;EACD;;AAlE+F;;AAAlGiB","names":["NoOpBackgroundBlurProcessor","NoOpVideoFrameProcessor_1","setBlurStrength","loadAssets","addObserver","removeObserver","BackgroundBlurVideoFrameProcessor","BackgroundFilterVideoFrameProcessor_1","create","spec","options","resolveSpec","resolveOptions","logger","supported","isSupported","info","warn","processor","BackgroundBlurProcessorProvided_1","BackgroundBlurProcessorBuiltIn_1","blurStrength","BackgroundBlurStrength_1","MEDIUM","ConsoleLogger_1","LogLevel_1","INFO","exports"],"sourceRoot":"","sources":["../../src/backgroundblurprocessor/BackgroundBlurVideoFrameProcessor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
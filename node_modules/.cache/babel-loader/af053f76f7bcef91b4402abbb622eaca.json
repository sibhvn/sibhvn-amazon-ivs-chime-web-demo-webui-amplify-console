{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[WaitForAttendeePresenceTask]] waits until an attendee presence event happens.\n */\n\n\nclass WaitForAttendeePresenceTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'WaitForAttendeePresenceTask';\n  }\n\n  cancel() {\n    // Just in case. The baseCancel behavior should prevent this.\n\n    /* istanbul ignore else */\n    if (this.cancelPromise) {\n      const error = new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.NoAttendeePresent}`);\n      this.cancelPromise(error);\n      delete this.cancelPromise;\n    }\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n      return new Promise((resolve, reject) => {\n        const handler = (presentAttendeeId, present, _externalUserId, _dropped, _pos) => {\n          if (attendeeId === presentAttendeeId && present) {\n            this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n            resolve();\n            delete this.cancelPromise;\n          }\n        };\n\n        this.cancelPromise = error => {\n          this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n          reject(error);\n        };\n\n        this.context.realtimeController.realtimeSubscribeToAttendeeIdPresence(handler);\n      });\n    });\n  }\n\n}\n\nexports.default = WaitForAttendeePresenceTask;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAEA;AAEA;;;;;AAGA,MAAqBA,2BAArB,SAAyDC,kBAAzD,CAAiE;EAK/DC,YAAoBC,OAApB,EAAsD;IACpD,MAAMA,OAAO,CAACC,MAAd;IADkB;IAJV,gBAAW,6BAAX;EAMT;;EAEDC,MAAM;IACJ;;IACA;IACA,IAAI,KAAKC,aAAT,EAAwB;MACtB,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CACZ,aAAa,KAAKC,IAAL,EAAW,oCACtBC,mCAAyBC,iBAC3B,EAHY,CAAd;MAKA,KAAKL,aAAL,CAAmBC,KAAnB;MACA,OAAO,KAAKD,aAAZ;IACD;EACF;;EAEKM,GAAG;;MACP,MAAMC,UAAU,GAAG,KAAKV,OAAL,CAAaW,2BAAb,CAAyCC,WAAzC,CAAqDF,UAAxE;MACA,OAAO,IAAIG,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAoB;QAC3C,MAAMC,OAAO,GAAG,CACdC,iBADc,EAEdC,OAFc,EAGdC,eAHc,EAIdC,QAJc,EAKdC,IALc,KAMN;UACR,IAAIX,UAAU,KAAKO,iBAAf,IAAoCC,OAAxC,EAAiD;YAC/C,KAAKlB,OAAL,CAAasB,kBAAb,CAAgCC,uCAAhC,CAAwEP,OAAxE;YACAF,OAAO;YACP,OAAO,KAAKX,aAAZ;UACD;QACF,CAZD;;QAcA,KAAKA,aAAL,GAAsBC,KAAD,IAAiB;UACpC,KAAKJ,OAAL,CAAasB,kBAAb,CAAgCC,uCAAhC,CAAwEP,OAAxE;UACAD,MAAM,CAACX,KAAD,CAAN;QACD,CAHD;;QAKA,KAAKJ,OAAL,CAAasB,kBAAb,CAAgCE,qCAAhC,CAAsER,OAAtE;MACD,CArBM,CAAP;IAsBD;EAAA;;AA/C8D;;AAAjES","names":["WaitForAttendeePresenceTask","BaseTask_1","constructor","context","logger","cancel","cancelPromise","error","Error","name","MeetingSessionStatusCode_1","NoAttendeePresent","run","attendeeId","meetingSessionConfiguration","credentials","Promise","resolve","reject","handler","presentAttendeeId","present","_externalUserId","_dropped","_pos","realtimeController","realtimeUnsubscribeToAttendeeIdPresence","realtimeSubscribeToAttendeeIdPresence","exports"],"sourceRoot":"","sources":["../../src/task/WaitForAttendeePresenceTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VoiceFocusDeviceTransformer = void 0;\n\nconst voicefocus_1 = require(\"../../libs/voicefocus/voicefocus\");\n\nconst Utils_1 = require(\"../utils/Utils\");\n\nconst Versioning_1 = require(\"../versioning/Versioning\");\n\nconst LoggerAdapter_1 = require(\"./LoggerAdapter\");\n\nconst VoiceFocusTransformDevice_1 = require(\"./VoiceFocusTransformDevice\");\n\nconst VoiceFocusTransformDeviceDelegate_1 = require(\"./VoiceFocusTransformDeviceDelegate\");\n/**\n * `VoiceFocusDeviceTransformer` is used to create {@link VoiceFocusTransformDevice|transform devices}\n * that apply Amazon Voice Focus noise suppression to audio input.\n *\n * This transformer captures relevant configuration. You should check for support, initialize,\n * and then create a device as follows:\n *\n * ```typescript\n * const deviceID = null;\n *\n * // This check for support is cheap and quick, and should be used to gate use\n * // of this feature.\n * if (!(await VoiceFocusDeviceTransformer.isSupported()) {\n *   console.log('Amazon Voice Focus not supported in this browser.');\n *   return deviceID;\n * }\n *\n * let transformer: VoiceFocusDeviceTransformer;\n * try {\n *   // This operation can fail in ways that do not indicate no support,\n *   // but do indicate an inability to apply Amazon Voice Focus. Trying again\n *   // might succeed.\n *   transformer = await VoiceFocusDeviceTransformer.create({});\n * } catch (e) {\n *   // Something went wrong.\n *   console.log('Unable to instantiate Amazon Voice Focus.');\n *   return deviceID;\n * }\n *\n * if (!transformer.isSupported()) {\n *   // The transformer will fall through, but your UI might care.\n *   console.log('Amazon Voice Focus not supported in this browser.');\n * }\n *\n * return await transformer.createTransformDevice(deviceID);\n * ```\n */\n\n\nclass VoiceFocusDeviceTransformer {\n  constructor(spec, _ref, config) {\n    let {\n      preload = true,\n      logger,\n      fetchBehavior = VoiceFocusDeviceTransformer.defaultFetchBehavior()\n    } = _ref;\n    this.spec = spec;\n    this.supported = true;\n    this.logger = logger;\n    this.vfLogger = logger ? new LoggerAdapter_1.default(logger) : undefined;\n    this.preload = preload;\n    this.fetchBehavior = fetchBehavior; // If the user didn't specify one, add the default, which is\n    // identified by the major and minor SDK version.\n\n    this.spec = VoiceFocusDeviceTransformer.augmentSpec(this.spec);\n\n    if (config) {\n      this.configuration = Promise.resolve(config);\n    }\n  }\n  /**\n   * Quickly check whether Amazon Voice Focus is supported on this platform.\n   *\n   * This will return `false` if key technologies are absent. A value of `true` does not\n   * necessarily mean that adding Amazon Voice Focus will succeed: it is still possible that the\n   * configuration of the page or the CPU speed of the device are limiting factors.\n   *\n   * {@link VoiceFocusDeviceTransformer.create} will return an instance whose\n   * `isSupported` method more accurately reflects whether Amazon Voice Focus\n   * is supported in the current environment.\n   *\n   * This method will only reject if you provide invalid inputs.\n   *\n   * @param spec An optional asset group and URL paths to use when fetching. You can pass\n   *             a complete {@link VoiceFocusSpec} here for convenience, matching the signature of {@link VoiceFocusDeviceTransformer.create}.\n   * @param options Additional named arguments, including `logger`. Set\n   *                `allowIFrame` to false to cause the support check to fail in\n   *                an iframe.\n   *                Chromium's security model means that audio processing works\n   *                poorly in iframes.\n   */\n\n\n  static isSupported(spec, options) {\n    var _a, _b;\n\n    const fetchBehavior = VoiceFocusDeviceTransformer.defaultFetchBehavior();\n    const logger = (options === null || options === void 0 ? void 0 : options.logger) ? new LoggerAdapter_1.default(options.logger) : undefined;\n    const opts = {\n      fetchBehavior,\n      logger\n    }; // This is impossible to test in Node, so Istanbul ignore.\n\n    /* istanbul ignore next */\n\n    if (Utils_1.isIFramed()) {\n      if ((options === null || options === void 0 ? void 0 : options.allowIFrame) === false) {\n        (_a = options === null || options === void 0 ? void 0 : options.logger) === null || _a === void 0 ? void 0 : _a.error('Amazon Voice Focus support check inside iframe: not supported.');\n        return Promise.resolve(false);\n      } else {\n        (_b = options === null || options === void 0 ? void 0 : options.logger) === null || _b === void 0 ? void 0 : _b.warn('Amazon Voice Focus support check inside iframe: not recommended.');\n      }\n    }\n\n    return voicefocus_1.VoiceFocus.isSupported(VoiceFocusDeviceTransformer.augmentSpec(spec), opts);\n  }\n  /**\n   * Create a transformer that can apply Amazon Voice Focus noise suppression to a device.\n   *\n   * This method will reject if the provided spec is invalid, or if the process of\n   * checking for support or estimating fails (e.g., because the network is unreachable).\n   *\n   * If Amazon Voice Focus is not supported on this device, this call will not reject and\n   * `isSupported` will return `false` on the returned instance. That instance will\n   * pass through devices unmodified.\n   *\n   * @param spec A definition of how you want Amazon Voice Focus to behave. See the declaration of\n   *             {@link VoiceFocusSpec} for details.\n   * @param options Additional named arguments, including `logger` and `preload`.\n   */\n\n\n  static create() {\n    let spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let config = arguments.length > 2 ? arguments[2] : undefined;\n    let // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    createMeetingResponse = arguments.length > 3 ? arguments[3] : undefined;\n    let // eslint-disable-next-line\n    createAttendeeResponse = arguments.length > 4 ? arguments[4] : undefined;\n\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (createMeetingResponse) {\n        if (createMeetingResponse.Meeting.Meeting) {\n          createMeetingResponse = createMeetingResponse.Meeting;\n        }\n      }\n\n      const meetingFeaturesAllowsES = ((_c = (_b = (_a = createMeetingResponse === null || createMeetingResponse === void 0 ? void 0 : createMeetingResponse.Meeting) === null || _a === void 0 ? void 0 : _a.MeetingFeatures) === null || _b === void 0 ? void 0 : _b.Audio) === null || _c === void 0 ? void 0 : _c.EchoReduction) === 'AVAILABLE';\n      const forbiddenConfig = config && config.supported === true && config.model.name === 'ns_es' && !meetingFeaturesAllowsES;\n      const forbiddenSpec = spec.name === 'ns_es' && !meetingFeaturesAllowsES;\n\n      if (forbiddenConfig || forbiddenSpec) {\n        throw new Error('Echo Reduction requested but not enabled.');\n      }\n\n      const transformer = new VoiceFocusDeviceTransformer(spec, options, config); // This also preps the first `VoiceFocus` instance.\n\n      yield transformer.init();\n      return transformer;\n    });\n  }\n  /**\n   * Given a spec and options, perform the configuration work that is\n   * ordinarily performed during creation of a transformer.\n   *\n   * The computed configuration is not portable between devices or sessions,\n   * but is useful for 'moving' transformers between windows.\n   *\n   * Pass the returned configuration as the third argument to a call to\n   * {@link VoiceFocusDeviceTransformer.create} with the matching spec.\n   */\n\n\n  static configure() {\n    let spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      const transformer = new VoiceFocusDeviceTransformer(spec, options, undefined);\n      return transformer.configure(true);\n    });\n  }\n  /**\n   * Return the computed configuration for this transformer.\n   */\n\n\n  getConfiguration() {\n    return this.configuration;\n  }\n  /**\n   * Return whether this transformer is able to function in this environment.\n   * If not, calls to\n   * {@link VoiceFocusDeviceTransformer.createTransformDevice|createTransformDevice}\n   * will pass through an unmodified device.\n   */\n\n\n  isSupported() {\n    return this.supported;\n  }\n  /**\n   * Apply Amazon Voice Focus to the selected {@link Device}.\n   *\n   * If this is a stream, it should be one that does not include other noise suppression features,\n   * and you should consider whether to disable automatic gain control (AGC) on the stream, because\n   * it can interact with noise suppression.\n   *\n   * @returns a device promise. This will always resolve to either a\n   *          {@link VoiceFocusTransformDevice} or undefined; it will never reject.\n   */\n\n\n  createTransformDevice(device, nodeOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.supported) {\n        // Fall back.\n        return undefined;\n      }\n\n      try {\n        const preload = true;\n        const [vf, delegate] = yield this.allocateVoiceFocus(preload);\n        const options = Object.assign(Object.assign({}, nodeOptions), {\n          es: this.spec.name === 'ns_es'\n        });\n        return new VoiceFocusTransformDevice_1.default(device, vf, delegate, options);\n      } catch (e) {\n        // Fall back.\n\n        /* istanbul ignore next */\n        return undefined;\n      }\n    });\n  }\n\n  static augmentSpec(spec) {\n    if (!spec || !spec.assetGroup && !spec.revisionID) {\n      return Object.assign(Object.assign({}, spec), {\n        assetGroup: VoiceFocusDeviceTransformer.currentSDKAssetGroup()\n      });\n    }\n\n    return spec;\n  }\n\n  configure() {\n    let preResolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return __awaiter(this, void 0, void 0, function* () {\n      const options = {\n        fetchBehavior: this.fetchBehavior,\n        preResolve,\n        logger: this.vfLogger\n      };\n      return voicefocus_1.VoiceFocus.configure(this.spec, options);\n    });\n  }\n\n  init() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.configuration) {\n        this.configuration = this.configure();\n      }\n\n      const config = yield this.configuration;\n\n      if (!config.supported) {\n        // No need to init: it won't work.\n        this.supported = false;\n        return;\n      } // We initialize the first one right now, which makes it easier to detect\n      // possible failures.\n      // This can throw for malformed input. Pass that up the chain.\n\n\n      this.pendingVoiceFocus = this.createVoiceFocus(config, this.preload);\n\n      try {\n        yield this.pendingVoiceFocus;\n      } catch (e) {\n        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(`Unable to initialize Amazon Voice Focus: ${e}`);\n        this.supported = false;\n      }\n    });\n  }\n\n  createVoiceFocus(config, preload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const delegate = new VoiceFocusTransformDeviceDelegate_1.default();\n      const vf = yield voicefocus_1.VoiceFocus.init(config, {\n        delegate,\n        preload,\n        logger: this.vfLogger\n      });\n      return [vf, delegate];\n    });\n  }\n\n  allocateVoiceFocus(preload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // A little safety.\n\n      /* istanbul ignore next */\n      if (!this.supported) {\n        throw new Error('Not supported.');\n      }\n\n      if (this.pendingVoiceFocus) {\n        // Use the one we already have, and free the slot for any future execution.\n        const vf = this.pendingVoiceFocus;\n        this.pendingVoiceFocus = undefined;\n        return vf;\n      }\n\n      return this.createVoiceFocus(yield this.configuration, preload);\n    });\n  }\n\n  static majorVersion() {\n    return Versioning_1.default.sdkVersion.match(/^[1-9][0-9]*\\.(?:0|[1-9][0-9]*)/)[0];\n  }\n\n  static majorMinorVersion() {\n    return Versioning_1.default.sdkVersion.match(/^[1-9][0-9]*\\.(?:0|(?:[1-9][0-9]*))\\.(?:0|[1-9][0-9]*)/)[0];\n  }\n\n  static currentSDKAssetGroup() {\n    // Just on the off chance someone does something silly, handle\n    // malformed version strings here.\n    const v = this.majorVersion(); // Just a little safety.\n\n    /* istanbul ignore next */\n\n    if (!v) {\n      return `stable-v1`;\n    }\n\n    return `sdk-${v}`;\n  } // Note that we use query strings here, not headers, in order to make these requests 'simple' and\n  // avoid the need for CORS preflights.\n  // Be very, very careful if you choose to add headers here. You should never need to.\n\n\n  static defaultFetchBehavior() {\n    // Just a little safety.\n\n    /* istanbul ignore next */\n    const version = VoiceFocusDeviceTransformer.majorMinorVersion() || 'unknown';\n    const ua = Versioning_1.default.sdkUserAgentLowResolution;\n    return {\n      escapedQueryString: `sdk=${encodeURIComponent(version)}&ua=${encodeURIComponent(ua)}`\n    };\n  }\n\n}\n\nexports.VoiceFocusDeviceTransformer = VoiceFocusDeviceTransformer;\nexports.default = VoiceFocusDeviceTransformer;","map":{"version":3,"mappings":"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","names":["VoiceFocusDeviceTransformer","constructor","spec","config","preload","logger","fetchBehavior","defaultFetchBehavior","vfLogger","LoggerAdapter_1","undefined","augmentSpec","configuration","Promise","resolve","isSupported","options","opts","Utils_1","allowIFrame","_a","error","_b","warn","voicefocus_1","create","createMeetingResponse","createAttendeeResponse","Meeting","meetingFeaturesAllowsES","MeetingFeatures","Audio","_c","EchoReduction","forbiddenConfig","supported","model","name","forbiddenSpec","Error","transformer","init","configure","getConfiguration","createTransformDevice","device","nodeOptions","vf","delegate","allocateVoiceFocus","es","VoiceFocusTransformDevice_1","e","assetGroup","revisionID","currentSDKAssetGroup","preResolve","pendingVoiceFocus","createVoiceFocus","VoiceFocusTransformDeviceDelegate_1","majorVersion","Versioning_1","sdkVersion","match","majorMinorVersion","v","version","ua","sdkUserAgentLowResolution","escapedQueryString","encodeURIComponent","exports"],"sourceRoot":"","sources":["../../src/voicefocus/VoiceFocusDeviceTransformer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
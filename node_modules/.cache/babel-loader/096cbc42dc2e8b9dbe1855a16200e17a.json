{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseTask_1 = require(\"./BaseTask\");\n\nclass ReleaseMediaStreamsTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'ReleaseMediaStreamsTask';\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.context.mediaStreamBroker) {\n        return;\n      } // This should really be a _device deselection_ operation,\n      // allowing the device controller to clean up any selected transform\n      // device or other resources.\n      //\n      // We can't fix it within the current API because CSST only knows about\n      // `MediaStreamBroker`, not about `DeviceController` â€” it only knows how\n      // to release media streams that are tracked in the\n      // `AudioVideoControllerState`, not how to unselect a device.\n      //\n      // The issue here is that we now work with much more than streams, and\n      // this API hasn't kept pace with the complexity of the rest of the SDK.\n      //\n      // It's currently up to the developer's application to manage which device\n      // is currently selected and `DDC` has to figure out from the stream\n      // passed here which device to clean up.\n      //\n      // This can be addressed in a future v3.0.\n\n\n      try {\n        this.context.mediaStreamBroker.releaseMediaStream(this.context.activeAudioInput);\n        this.context.activeAudioInput = null;\n        this.context.mediaStreamBroker.releaseMediaStream(this.context.activeVideoInput);\n        this.context.activeVideoInput = null;\n        this.context.realtimeController.realtimeSetLocalAudioInput(null);\n      } catch (e) {\n        this.context.logger.error(`Failed to release media streams: ${e}`);\n      }\n    });\n  }\n\n}\n\nexports.default = ReleaseMediaStreamsTask;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAEA,MAAqBA,uBAArB,SAAqDC,kBAArD,CAA6D;EAG3DC,YAAoBC,OAApB,EAAsD;IACpD,MAAMA,OAAO,CAACC,MAAd;IADkB;IAFV,gBAAW,yBAAX;EAIT;;EAEKC,GAAG;;MACP,IAAI,CAAC,KAAKF,OAAL,CAAaG,iBAAlB,EAAqC;QACnC;MACD,EAED;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;;MAEA,IAAI;QACF,KAAKH,OAAL,CAAaG,iBAAb,CAA+BC,kBAA/B,CAAkD,KAAKJ,OAAL,CAAaK,gBAA/D;QACA,KAAKL,OAAL,CAAaK,gBAAb,GAAgC,IAAhC;QACA,KAAKL,OAAL,CAAaG,iBAAb,CAA+BC,kBAA/B,CAAkD,KAAKJ,OAAL,CAAaM,gBAA/D;QACA,KAAKN,OAAL,CAAaM,gBAAb,GAAgC,IAAhC;QACA,KAAKN,OAAL,CAAaO,kBAAb,CAAgCC,0BAAhC,CAA2D,IAA3D;MACD,CAND,CAME,OAAOC,CAAP,EAAU;QACV,KAAKT,OAAL,CAAaC,MAAb,CAAoBS,KAApB,CAA0B,oCAAoCD,CAAC,EAA/D;MACD;IACF;EAAA;;AAvC0D;;AAA7DE","names":["ReleaseMediaStreamsTask","BaseTask_1","constructor","context","logger","run","mediaStreamBroker","releaseMediaStream","activeAudioInput","activeVideoInput","realtimeController","realtimeSetLocalAudioInput","e","error","exports"],"sourceRoot":"","sources":["../../src/task/ReleaseMediaStreamsTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
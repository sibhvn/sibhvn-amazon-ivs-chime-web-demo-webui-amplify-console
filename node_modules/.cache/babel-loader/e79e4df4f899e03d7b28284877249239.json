{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BackgroundBlurProcessorProvided_1 = require(\"./BackgroundBlurProcessorProvided\");\n\nconst BackgroundBlurStrength_1 = require(\"./BackgroundBlurStrength\");\n/**\n * The [[BackgroundBlurProcessorBuiltIn]] uses the browser's built-in capability to apply blurring to\n * the background image as apposed to [[BackgroundBlurProcessorProvided]] that uses WASM and\n * TensorFlow Lite to apply the blur.\n */\n\n/** @internal */\n\n\nclass BackgroundBlurProcessorBuiltIn extends BackgroundBlurProcessorProvided_1.default {\n  /**\n   * A constructor that will apply default values if spec and strength are not provided.\n   * If no spec is provided the selfie segmentation model is used with default paths to CDN for the\n   * worker and wasm files used to process each frame.\n   * @param spec The spec defines the assets that will be used for adding background blur to a frame.\n   * @param options How much blur to apply to a frame.\n   */\n  constructor(spec, options) {\n    super(spec, options);\n    this.blurCanvas = document.createElement('canvas');\n    this.blurCanvasCtx = this.blurCanvas.getContext('2d');\n    this.blurCanvas.width = this.spec.model.input.width;\n    this.blurCanvas.height = this.spec.model.input.height;\n    this.logger.info('BackgroundBlur processor using builtin blur');\n  }\n\n  drawImageWithMask(inputCanvas, mask) {\n    // Mask will not be set until the worker has completed handling the predict event. Until the first frame is processed,\n    // the whole frame will be blurred.\n    const blurredImage = this.blurredImage;\n    const {\n      canvasCtx,\n      targetCanvas\n    } = this;\n    const {\n      width,\n      height\n    } = targetCanvas;\n\n    if (!mask || !blurredImage) {\n      canvasCtx.clearRect(0, 0, width, height);\n      return;\n    }\n\n    const scaledCtx = this.scaledCanvas.getContext('2d');\n    scaledCtx.putImageData(mask, 0, 0);\n    this.blurCanvasCtx.putImageData(this.blurredImage, 0, 0); // draw the mask\n\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, width, height);\n    canvasCtx.drawImage(this.scaledCanvas, 0, 0, width, height); // Only overwrite existing pixels.\n\n    canvasCtx.globalCompositeOperation = 'source-in'; // draw image over mask...\n\n    canvasCtx.drawImage(inputCanvas, 0, 0, width, height); // draw under person\n\n    canvasCtx.globalCompositeOperation = 'destination-over';\n    canvasCtx.drawImage(this.blurCanvas, 0, 0, width, height);\n    canvasCtx.restore();\n  }\n\n  setBlurStrength(blurStrength) {\n    super.setBlurStrength(blurStrength);\n\n    if (this.worker) {\n      // live update\n      this.modelInitialized = false;\n      this.worker.postMessage({\n        msg: 'destroy'\n      });\n      const model = this.spec.model;\n      this.worker.postMessage({\n        msg: 'loadModel',\n        payload: {\n          modelUrl: model.path,\n          inputHeight: model.input.height,\n          inputWidth: model.input.width,\n          inputChannels: 4,\n          modelRangeMin: model.input.range[0],\n          modelRangeMax: model.input.range[1],\n          blurPixels: this.blurAmount\n        }\n      });\n    }\n  }\n\n  setBlurPixels() {\n    // the blurred image is sized down to 144, regardless of what the canvas size is, so\n    // we use the default blur strengths (540p)\n    this.blurAmount = BackgroundBlurStrength_1.BlurStrengthMapper.getBlurAmount(this._blurStrength, {\n      height: 540\n    });\n    this.logger.info(`background blur amount set to ${this.blurAmount}`);\n  }\n\n  handleInitialize(msg) {\n    this.logger.info(`received initialize message: ${this.stringify(msg)}`);\n\n    if (!msg.payload) {\n      this.logger.error('failed to initialize module');\n      this.initWorkerPromise.reject(new Error('failed to initialize the module'));\n      return;\n    }\n\n    const model = this.spec.model;\n    this.worker.postMessage({\n      msg: 'loadModel',\n      payload: {\n        modelUrl: model.path,\n        inputHeight: model.input.height,\n        inputWidth: model.input.width,\n        inputChannels: 4,\n        modelRangeMin: model.input.range[0],\n        modelRangeMax: model.input.range[1],\n        blurPixels: this.blurAmount\n      }\n    });\n    this.initWorkerPromise.resolve({});\n  }\n\n  handlePredict(msg) {\n    this.blurredImage = msg.payload.blurOutput;\n    super.handlePredict(msg);\n  }\n\n  destroy() {\n    const _super = Object.create(null, {\n      destroy: {\n        get: () => super.destroy\n      }\n    });\n\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      _super.destroy.call(this);\n\n      (_a = this.blurCanvas) === null || _a === void 0 ? void 0 : _a.remove();\n      this.blurCanvas = undefined;\n    });\n  }\n\n}\n\nexports.default = BackgroundBlurProcessorBuiltIn;","map":{"version":3,"mappings":"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","names":["BackgroundBlurProcessorBuiltIn","BackgroundBlurProcessorProvided_1","constructor","spec","options","document","createElement","blurCanvas","getContext","width","model","input","height","logger","info","drawImageWithMask","inputCanvas","mask","blurredImage","canvasCtx","targetCanvas","clearRect","scaledCtx","scaledCanvas","putImageData","blurCanvasCtx","save","drawImage","globalCompositeOperation","restore","setBlurStrength","blurStrength","worker","modelInitialized","postMessage","msg","payload","modelUrl","path","inputHeight","inputWidth","inputChannels","modelRangeMin","range","modelRangeMax","blurPixels","blurAmount","setBlurPixels","BackgroundBlurStrength_1","getBlurAmount","_blurStrength","handleInitialize","stringify","error","initWorkerPromise","reject","Error","resolve","handlePredict","blurOutput","destroy","_super","call","_a","remove","undefined","exports"],"sourceRoot":"","sources":["../../src/backgroundblurprocessor/BackgroundBlurProcessorBuiltIn.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass DefaultTransceiverController {\n  constructor(logger, browserBehavior) {\n    this.logger = logger;\n    this.browserBehavior = browserBehavior;\n    this._localCameraTransceiver = null;\n    this._localAudioTransceiver = null;\n    this.videoSubscriptions = [];\n    this.defaultMediaStream = null;\n    this.peer = null;\n    this.streamIdToTransceiver = new Map();\n  }\n\n  setEncodingParameters(encodingParamMap) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {\n        return;\n      }\n\n      const sender = this._localCameraTransceiver.sender;\n\n      if (!encodingParamMap || encodingParamMap.size === 0) {\n        return;\n      }\n\n      const newEncodingParams = Array.from(encodingParamMap.values());\n      const oldParam = sender.getParameters();\n\n      if (!oldParam.encodings || oldParam.encodings.length === 0) {\n        oldParam.encodings = newEncodingParams;\n      } else {\n        for (const existing of oldParam.encodings) {\n          for (const changed of newEncodingParams) {\n            if ((existing.rid || changed.rid) && existing.rid !== changed.rid) {\n              continue;\n            }\n\n            let key;\n\n            for (key in changed) {\n              // These properties can't be changed.\n              if (key === 'rid' || key === 'codecPayloadType') {\n                continue;\n              }\n              /* istanbul ignore else */\n\n\n              if (changed.hasOwnProperty(key)) {\n                existing[key] = changed[key];\n              }\n            }\n          }\n        }\n      }\n\n      yield sender.setParameters(oldParam);\n    });\n  }\n\n  static setVideoSendingBitrateKbpsForSender(sender, bitrateKbps, _logger) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!sender || bitrateKbps <= 0) {\n        return;\n      }\n\n      const param = sender.getParameters();\n\n      if (!param.encodings) {\n        param.encodings = [{}];\n      }\n\n      for (const encodeParam of param.encodings) {\n        encodeParam.maxBitrate = bitrateKbps * 1000;\n      }\n\n      yield sender.setParameters(param);\n    });\n  }\n\n  static replaceAudioTrackForSender(sender, track) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!sender) {\n        return false;\n      }\n\n      yield sender.replaceTrack(track);\n      return true;\n    });\n  }\n\n  localAudioTransceiver() {\n    return this._localAudioTransceiver;\n  }\n\n  localVideoTransceiver() {\n    return this._localCameraTransceiver;\n  }\n\n  setVideoSendingBitrateKbps(bitrateKbps) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {\n        return;\n      }\n\n      const sender = this._localCameraTransceiver.sender;\n      yield DefaultTransceiverController.setVideoSendingBitrateKbpsForSender(sender, bitrateKbps, this.logger);\n    });\n  }\n\n  setPeer(peer) {\n    this.peer = peer;\n  }\n\n  reset() {\n    this._localCameraTransceiver = null;\n    this._localAudioTransceiver = null;\n    this.videoSubscriptions = [];\n    this.defaultMediaStream = null;\n    this.peer = null;\n  }\n\n  useTransceivers() {\n    if (!this.peer || !this.browserBehavior.requiresUnifiedPlan()) {\n      return false;\n    }\n\n    return typeof this.peer.getTransceivers !== 'undefined';\n  }\n\n  hasVideoInput() {\n    if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') return false;\n    return true;\n  }\n\n  trackIsVideoInput(track) {\n    if (!this._localCameraTransceiver) {\n      return false;\n    }\n\n    return track === this._localCameraTransceiver.sender.track || track === this._localCameraTransceiver.receiver.track;\n  }\n\n  setupLocalTransceivers() {\n    if (!this.useTransceivers()) {\n      return;\n    }\n\n    if (!this.defaultMediaStream && typeof MediaStream !== 'undefined') {\n      this.defaultMediaStream = new MediaStream();\n    }\n\n    if (!this._localAudioTransceiver) {\n      this._localAudioTransceiver = this.peer.addTransceiver('audio', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream]\n      });\n    }\n\n    if (!this._localCameraTransceiver) {\n      this._localCameraTransceiver = this.peer.addTransceiver('video', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream]\n      });\n    }\n  }\n\n  replaceAudioTrack(track) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._localAudioTransceiver || this._localAudioTransceiver.direction !== 'sendrecv') {\n        this.logger.info(`audio transceiver direction is not set up or not activated`);\n        return false;\n      }\n\n      yield this._localAudioTransceiver.sender.replaceTrack(track);\n      return true;\n    });\n  }\n\n  setAudioInput(track) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.setTransceiverInput(this._localAudioTransceiver, track);\n      return;\n    });\n  }\n\n  setVideoInput(track) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.setTransceiverInput(this._localCameraTransceiver, track);\n      return;\n    });\n  }\n\n  updateVideoTransceivers(videoStreamIndex, videosToReceive) {\n    if (!this.useTransceivers()) {\n      return videosToReceive.array();\n    } // See https://blog.mozilla.org/webrtc/rtcrtptransceiver-explored/ for details on transceivers\n\n\n    const transceivers = this.peer.getTransceivers(); // Subscription index 0 is reserved for transmitting camera.\n    // We mark inactive slots with 0 in the subscription array.\n\n    this.videoSubscriptions = [0];\n    videosToReceive = videosToReceive.clone();\n    this.updateTransceivers(transceivers, videoStreamIndex, videosToReceive);\n    this.logger.debug(() => {\n      return this.debugDumpTransceivers();\n    });\n    return this.videoSubscriptions;\n  }\n\n  updateTransceivers(transceivers, videoStreamIndex, videosToReceive) {\n    const videosRemaining = videosToReceive.array();\n\n    if (transceivers.length !== 0 && !transceivers[0].stop) {\n      // This function and its usage can be removed once we raise Chrome browser requirements\n      // to M88 (when `RTCRtpTransceiver.stop` was added)\n      this.logger.info('Updating transceivers without `stop` function');\n      this.updateTransceiverWithoutStop(transceivers, videoStreamIndex, videosRemaining);\n    } else if (transceivers.length !== 0) {\n      this.updateTransceiverWithStop(transceivers, videoStreamIndex, videosRemaining);\n    } // Add transceivers for the remaining subscriptions\n\n\n    for (const index of videosRemaining) {\n      // @ts-ignore\n      const transceiver = this.peer.addTransceiver('video', {\n        direction: 'recvonly',\n        streams: [new MediaStream()]\n      });\n      this.streamIdToTransceiver.set(index, transceiver);\n      this.videoSubscriptions.push(index);\n      this.logger.info(`adding transceiver mid: ${transceiver.mid} subscription: ${index} direction: recvonly`);\n    }\n  }\n\n  updateTransceiverWithStop(transceivers, videoStreamIndex, videosRemaining) {\n    // Begin counting out index in the the subscription array at 1 since the camera.\n    // Always occupies position 0 (whether active or not).\n    let n = 1; // Reset since otherwise there will be stale indexes corresponding to\n    // stopped transceivers.\n\n    this.videoSubscriptions = [0];\n\n    for (const transceiver of transceivers) {\n      if (transceiver === this._localCameraTransceiver || !this.transceiverIsVideo(transceiver) || !transceiver.mid) {\n        continue;\n      }\n\n      let reusingTranceiver = false; // See if we want this existing transceiver for a simulcast stream switch\n      //\n      // By convention with the service backend, msid is equal to the media section mid, prefixed with the string \"v_\";\n      // we use this to get the stream ID for the track\n\n      const streamId = videoStreamIndex.streamIdForTrack('v_' + transceiver.mid);\n\n      if (transceiver.direction !== 'inactive' && streamId !== undefined) {\n        for (const [index, recvStreamId] of videosRemaining.entries()) {\n          // `streamId` may still be the same as `recvStreamId`\n          if (videoStreamIndex.StreamIdsInSameGroup(streamId, recvStreamId)) {\n            transceiver.direction = 'recvonly';\n            this.videoSubscriptions[n] = recvStreamId;\n            reusingTranceiver = true;\n            this.streamIdToTransceiver.delete(streamId);\n            this.streamIdToTransceiver.set(recvStreamId, transceiver);\n            videosRemaining.splice(index, 1);\n            break;\n          }\n        }\n      }\n\n      if (!reusingTranceiver) {\n        this.videoSubscriptions[n] = 0;\n        this.logger.info(`Stopping MID: ${transceiver.mid}, direction: ${transceiver.direction}, current direction: ${transceiver.currentDirection}`); // Clean up transceiver and mappings for streams that have been unsubscribed from.  Note we do not try to reuse\n        // old inactive transceivers for new streams as Firefox will reuse the last frame from\n        // that transceiver, and additionally we simply don't want to risk wiring up a transceiver\n        // to the incorrect video stream for no real benefit besides possible a smaller SDP size.\n\n        transceiver.stop(); // Note (as of Firefox 94): Firefox will keep these around forever\n\n        for (const [streamId, previousTransceiver] of this.streamIdToTransceiver.entries()) {\n          if (transceiver.mid === previousTransceiver.mid) {\n            this.streamIdToTransceiver.delete(streamId);\n          }\n        }\n      }\n\n      n += 1;\n    }\n  } // This function operates similarily to `updateTransceiverWithStop` with the following changes to account\n  // for the fact RTCRtpTransceiver.stop is not available on all supported browsers:\n  //  * We attempt to reuse inactive transceivers because libwebrtc will not remove them otherwise and\n  //    the SDP will grow endlessly.\n  //  * We mark unsubscribed transceivers as 'inactive' so that they can be reused. This requires using a\n  //    second for loop.\n\n\n  updateTransceiverWithoutStop(transceivers, videoStreamIndex, videosRemaining) {\n    let n = 1;\n\n    for (const transceiver of transceivers) {\n      if (transceiver === this._localCameraTransceiver || !this.transceiverIsVideo(transceiver)) {\n        continue;\n      }\n\n      this.videoSubscriptions[n] = 0;\n\n      if (transceiver.direction !== 'inactive') {\n        const streamId = videoStreamIndex.streamIdForTrack('v_' + transceiver.mid);\n\n        if (streamId !== undefined) {\n          for (const [index, recvStreamId] of videosRemaining.entries()) {\n            if (videoStreamIndex.StreamIdsInSameGroup(streamId, recvStreamId)) {\n              transceiver.direction = 'recvonly';\n              this.videoSubscriptions[n] = recvStreamId;\n              this.streamIdToTransceiver.delete(streamId);\n              this.streamIdToTransceiver.set(recvStreamId, transceiver);\n              videosRemaining.splice(index, 1);\n              break;\n            }\n          }\n        }\n      }\n\n      n += 1;\n    } // Next fill in open slots and remove unused\n\n\n    n = 1;\n\n    for (const transceiver of transceivers) {\n      if (transceiver === this._localCameraTransceiver || !this.transceiverIsVideo(transceiver)) {\n        continue;\n      }\n\n      if (transceiver.direction === 'inactive' && videosRemaining.length > 0) {\n        // Fill available slot\n        transceiver.direction = 'recvonly';\n        const streamId = videosRemaining.shift();\n        this.videoSubscriptions[n] = streamId;\n        this.streamIdToTransceiver.set(streamId, transceiver);\n      } else {\n        // Remove if no longer subscribed\n        if (this.videoSubscriptions[n] === 0) {\n          transceiver.direction = 'inactive';\n\n          for (const [streamId, previousTransceiver] of this.streamIdToTransceiver.entries()) {\n            if (transceiver === previousTransceiver) {\n              this.streamIdToTransceiver.delete(streamId);\n            }\n          }\n        }\n      }\n\n      n += 1;\n    }\n  }\n\n  getMidForStreamId(streamId) {\n    var _a;\n\n    return (_a = this.streamIdToTransceiver.get(streamId)) === null || _a === void 0 ? void 0 : _a.mid;\n  }\n\n  setStreamIdForMid(mid, newStreamId) {\n    for (const [streamId, transceiver] of this.streamIdToTransceiver.entries()) {\n      if (transceiver.mid === mid) {\n        this.streamIdToTransceiver.delete(streamId);\n        this.streamIdToTransceiver.set(newStreamId, transceiver);\n        return;\n      }\n    }\n  }\n\n  transceiverIsVideo(transceiver) {\n    return transceiver.receiver && transceiver.receiver.track && transceiver.receiver.track.kind === 'video' || transceiver.sender && transceiver.sender.track && transceiver.sender.track.kind === 'video';\n  }\n\n  debugDumpTransceivers() {\n    let msg = '';\n    let n = 0;\n\n    for (const transceiver of this.peer.getTransceivers()) {\n      if (!this.transceiverIsVideo(transceiver)) {\n        continue;\n      }\n\n      msg += `transceiver index=${n} mid=${transceiver.mid} subscription=${this.videoSubscriptions[n]} direction=${transceiver.direction}\\n`;\n      n += 1;\n    }\n\n    return msg;\n  }\n\n  setTransceiverInput(transceiver, track) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!transceiver) {\n        return;\n      }\n\n      if (track) {\n        transceiver.direction = 'sendrecv';\n      } else {\n        transceiver.direction = 'inactive';\n      }\n\n      yield transceiver.sender.replaceTrack(track);\n    });\n  }\n\n}\n\nexports.default = DefaultTransceiverController;","map":{"version":3,"mappings":"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","names":["DefaultTransceiverController","constructor","logger","browserBehavior","Map","setEncodingParameters","encodingParamMap","_localCameraTransceiver","direction","sender","size","newEncodingParams","Array","from","values","oldParam","getParameters","encodings","length","existing","changed","rid","key","hasOwnProperty","setParameters","setVideoSendingBitrateKbpsForSender","bitrateKbps","_logger","param","encodeParam","maxBitrate","replaceAudioTrackForSender","track","replaceTrack","localAudioTransceiver","_localAudioTransceiver","localVideoTransceiver","setVideoSendingBitrateKbps","setPeer","peer","reset","videoSubscriptions","defaultMediaStream","useTransceivers","requiresUnifiedPlan","getTransceivers","hasVideoInput","trackIsVideoInput","receiver","setupLocalTransceivers","MediaStream","addTransceiver","streams","replaceAudioTrack","info","setAudioInput","setTransceiverInput","setVideoInput","updateVideoTransceivers","videoStreamIndex","videosToReceive","array","transceivers","clone","updateTransceivers","debug","debugDumpTransceivers","videosRemaining","stop","updateTransceiverWithoutStop","updateTransceiverWithStop","index","transceiver","streamIdToTransceiver","set","push","mid","n","transceiverIsVideo","reusingTranceiver","streamId","streamIdForTrack","undefined","recvStreamId","entries","StreamIdsInSameGroup","delete","splice","currentDirection","previousTransceiver","shift","getMidForStreamId","get","_a","setStreamIdForMid","newStreamId","kind","msg","exports"],"sourceRoot":"","sources":["../../src/transceivercontroller/DefaultTransceiverController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BackgroundFilterProcessor_1 = require(\"../backgroundfilter/BackgroundFilterProcessor\");\n\nconst BackgroundReplacementVideoFrameProcessorDelegate_1 = require(\"./BackgroundReplacementVideoFrameProcessorDelegate\");\n/**\n * [[BackgroundReplacementFilter]] implements [[BackgroundReplacementProcessor]].\n * It's a background replacement processor and input is passed into a worker that will apply a segmentation\n * to separate the foreground from the background. Then the background will have a replacement applied.\n *\n * The [[BackgroundReplacementProcessorProvided]] uses WASM and TensorFlow Lite to apply replacement of the\n * background image.\n */\n\n/** @internal */\n\n\nclass BackgroundReplacementFilter extends BackgroundFilterProcessor_1.default {\n  /**\n   * A constructor that will apply default values if spec and strength are not provided.\n   * If no spec is provided the selfie segmentation model is used with default paths to CDN for the\n   * worker and wasm files used to process each frame.\n   * @param spec The spec defines the assets that will be used for adding background filter to a frame\n   * @param options The background replacement image path\n   */\n  constructor(spec, options) {\n    super('background replacement', spec, options, new BackgroundReplacementVideoFrameProcessorDelegate_1.default());\n    this.replacementBlob = options.imageBlob;\n    this.logger.info('BackgroundReplacement processor successfully created');\n    this.logger.info(`BackgroundReplacement spec: ${this.stringify(this.spec)}`);\n    this.logger.info(`BackgroundReplacement options: ${this.stringify(options)}`);\n  }\n\n  setImageBlob(blob) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.replacementBlob = blob;\n      this.replacementImage = yield BackgroundReplacementFilter.loadImage(this.createReplacementObjectUrl());\n    });\n  }\n\n  initOnFirstExecution() {}\n\n  drawImageWithMask(inputCanvas, mask) {\n    // Mask will not be set until the worker has completed handling the predict event. Until the first frame is processed,\n    // the whole frame will be replaced.\n    if (!mask) {\n      mask = new ImageData(this.spec.model.input.width, this.spec.model.input.height);\n    }\n\n    const scaledCtx = this.scaledCanvas.getContext('2d');\n    scaledCtx.putImageData(mask, 0, 0);\n    const {\n      canvasCtx,\n      targetCanvas\n    } = this;\n    const {\n      width,\n      height\n    } = targetCanvas; // draw the mask\n\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, width, height);\n    canvasCtx.drawImage(this.scaledCanvas, 0, 0, width, height); // Only overwrite existing pixels.\n\n    canvasCtx.globalCompositeOperation = 'source-in'; // draw image over mask...\n\n    canvasCtx.drawImage(inputCanvas, 0, 0, width, height); // draw under person\n\n    canvasCtx.globalCompositeOperation = 'destination-over';\n    canvasCtx.drawImage(this.replacementImage, 0, 0, targetCanvas.width, targetCanvas.height);\n    canvasCtx.restore();\n  }\n  /* istanbul ignore next */\n\n\n  static loadImageExecutor(resolve, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reject, imageUrl) {\n    const image = new Image();\n    image.crossOrigin = 'Anonymous';\n    image.addEventListener('load', () => {\n      resolve(image);\n    }, false);\n    image.addEventListener('error', error => {\n      reject(new Error(`Could not load replacement image ${image.src}: ${error.message}`));\n    }, false);\n    image.src = imageUrl;\n  }\n  /** @internal */\n\n\n  static loadImage(imageUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => this.loadImageExecutor(resolve, reject, imageUrl));\n    });\n  }\n\n  revokeReplacementObjectUrl() {\n    if (this.replacementObjectUrl) {\n      URL.revokeObjectURL(this.replacementObjectUrl);\n    }\n  }\n\n  createReplacementObjectUrl() {\n    this.revokeReplacementObjectUrl();\n    this.replacementObjectUrl = URL.createObjectURL(this.replacementBlob);\n    return this.replacementObjectUrl;\n  }\n  /**\n   * This method initializes all of the resource necessary to process background replacement. It returns\n   * a promise and resolves or rejects the promise once the initialization is complete.\n   * @returns\n   * @throws An error will be thrown\n   */\n\n\n  loadAssets() {\n    const _super = Object.create(null, {\n      loadAssets: {\n        get: () => super.loadAssets\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      this.replacementImage = yield BackgroundReplacementFilter.loadImage(this.createReplacementObjectUrl());\n\n      _super.loadAssets.call(this);\n\n      return;\n    });\n  }\n\n  addObserver(observer) {\n    this.delegate.addObserver(observer);\n  }\n\n  removeObserver(observer) {\n    this.delegate.removeObserver(observer);\n  }\n\n  destroy() {\n    const _super = Object.create(null, {\n      destroy: {\n        get: () => super.destroy\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      _super.destroy.call(this);\n\n      this.revokeReplacementObjectUrl();\n    });\n  }\n\n}\n\nexports.default = BackgroundReplacementFilter;","map":{"version":3,"mappings":"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","names":["BackgroundReplacementFilter","BackgroundFilterProcessor_1","constructor","spec","options","BackgroundReplacementVideoFrameProcessorDelegate_1","replacementBlob","imageBlob","logger","info","stringify","setImageBlob","blob","replacementImage","loadImage","createReplacementObjectUrl","initOnFirstExecution","drawImageWithMask","inputCanvas","mask","ImageData","model","input","width","height","scaledCtx","scaledCanvas","getContext","putImageData","canvasCtx","targetCanvas","save","clearRect","drawImage","globalCompositeOperation","restore","loadImageExecutor","resolve","reject","imageUrl","image","Image","crossOrigin","addEventListener","error","Error","src","message","Promise","revokeReplacementObjectUrl","replacementObjectUrl","URL","revokeObjectURL","createObjectURL","loadAssets","_super","call","addObserver","observer","delegate","removeObserver","destroy","exports"],"sourceRoot":"","sources":["../../src/backgroundreplacementprocessor/BackgroundReplacementFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
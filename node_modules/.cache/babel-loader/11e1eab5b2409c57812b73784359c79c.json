{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst OnceTask_1 = require(\"./OnceTask\");\n\nconst TaskStatus_1 = require(\"./TaskStatus\");\n/*\n * [[BaseTask]] provides common utilities for task implementations.\n */\n\n\nclass BaseTask {\n  constructor(logger) {\n    this.logger = logger;\n    this.taskName = 'BaseTask';\n    this.parentTask = null;\n    this.status = TaskStatus_1.default.IDLE;\n    this.run = this.baseRun.bind(this, this.run);\n    this.cancel = this.baseCancel.bind(this, this.cancel);\n  }\n\n  once() {\n    for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {\n      dependencies[_key] = arguments[_key];\n    }\n\n    return new OnceTask_1.default(this.logger, this, dependencies);\n  }\n\n  cancel() {}\n\n  name() {\n    return this.parentTask ? `${this.parentTask.name()}/${this.taskName}` : this.taskName;\n  }\n\n  setParent(parentTask) {\n    this.parentTask = parentTask;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  logAndThrow(message) {\n    this.logger.info(message);\n    throw new Error(message);\n  }\n\n  baseRun(originalRun) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const startTime = Date.now();\n        this.logger.info(`running task ${this.name()}`);\n\n        switch (this.status) {\n          case TaskStatus_1.default.RUNNING:\n            this.logAndThrow(`${this.name()} is already running`);\n\n          case TaskStatus_1.default.CANCELED:\n            this.logAndThrow(`${this.name()} was canceled before running`);\n\n          case TaskStatus_1.default.FINISHED:\n            this.logAndThrow(`${this.name()} was already finished`);\n        }\n\n        this.status = TaskStatus_1.default.RUNNING;\n        yield originalRun.call(this);\n        this.logger.info(`${this.name()} took ${Math.round(Date.now() - startTime)} ms`);\n      } catch (err) {\n        throw err;\n      } finally {\n        if (this.status !== TaskStatus_1.default.CANCELED) {\n          this.status = TaskStatus_1.default.FINISHED;\n        }\n      }\n    });\n  }\n\n  baseCancel(originalCancel) {\n    if (this.status === TaskStatus_1.default.CANCELED || this.status === TaskStatus_1.default.FINISHED) {\n      this.logger.info(`Not canceling ${this.name()}: state is ${this.status}`);\n      return;\n    }\n\n    this.logger.info(`canceling task ${this.name()}`);\n    this.status = TaskStatus_1.default.CANCELED;\n    originalCancel.call(this);\n  }\n\n}\n\nexports.default = BaseTask;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAEA;AAEA;;;;;AAGA,MAA8BA,QAA9B,CAAsC;EAQpCC,YAAsBC,MAAtB,EAAoC;IAAd;IAPZ,gBAAW,UAAX;IAEF,kBAA0B,IAA1B;IACA,cAAqBC,qBAAWC,IAAhC;IAKN,KAAKC,GAAL,GAAW,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,EAAwB,KAAKF,GAA7B,CAAX;IACA,KAAKG,MAAL,GAAc,KAAKC,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,EAA2B,KAAKC,MAAhC,CAAd;EACD;;EAEDE,IAAI,GAAsC;IAAA,kCAAlCC,YAAkC;MAAlCA,YAAkC;IAAA;;IACxC,OAAO,IAAIC,kBAAJ,CAAa,KAAKV,MAAlB,EAA0B,IAA1B,EAAgCS,YAAhC,CAAP;EACD;;EAEDH,MAAM,IAAW;;EAEjBK,IAAI;IACF,OAAO,KAAKC,UAAL,GAAkB,GAAG,KAAKA,UAAL,CAAgBD,IAAhB,EAAsB,IAAI,KAAKE,QAAQ,EAA5D,GAAiE,KAAKA,QAA7E;EACD;;EAEDC,SAAS,CAACF,UAAD,EAAiB;IACxB,KAAKA,UAAL,GAAkBA,UAAlB;EACD;;EAESG,SAAS;IACjB,OAAO,KAAKC,MAAZ;EACD;;EAESC,WAAW,CAACC,OAAD,EAAgB;IACnC,KAAKlB,MAAL,CAAYmB,IAAZ,CAAiBD,OAAjB;IACA,MAAM,IAAIE,KAAJ,CAAUF,OAAV,CAAN;EACD;;EAEad,OAAO,CAACiB,WAAD,EAAiC;;MACpD,IAAI;QACF,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;QACA,KAAKxB,MAAL,CAAYmB,IAAZ,CAAiB,gBAAgB,KAAKR,IAAL,EAAW,EAA5C;;QAEA,QAAQ,KAAKK,MAAb;UACE,KAAKf,qBAAWwB,OAAhB;YACE,KAAKR,WAAL,CAAiB,GAAG,KAAKN,IAAL,EAAW,qBAA/B;;UACF,KAAKV,qBAAWyB,QAAhB;YACE,KAAKT,WAAL,CAAiB,GAAG,KAAKN,IAAL,EAAW,8BAA/B;;UACF,KAAKV,qBAAW0B,QAAhB;YACE,KAAKV,WAAL,CAAiB,GAAG,KAAKN,IAAL,EAAW,uBAA/B;QANJ;;QASA,KAAKK,MAAL,GAAcf,qBAAWwB,OAAzB;QACA,MAAMJ,WAAW,CAACO,IAAZ,CAAiB,IAAjB,CAAN;QACA,KAAK5B,MAAL,CAAYmB,IAAZ,CAAiB,GAAG,KAAKR,IAAL,EAAW,SAASkB,IAAI,CAACC,KAAL,CAAWP,IAAI,CAACC,GAAL,KAAaF,SAAxB,CAAkC,KAA1E;MACD,CAhBD,CAgBE,OAAOS,GAAP,EAAY;QACZ,MAAMA,GAAN;MACD,CAlBD,SAkBU;QACR,IAAI,KAAKf,MAAL,KAAgBf,qBAAWyB,QAA/B,EAAyC;UACvC,KAAKV,MAAL,GAAcf,qBAAW0B,QAAzB;QACD;MACF;IACF;EAAA;;EAEOpB,UAAU,CAACyB,cAAD,EAA2B;IAC3C,IAAI,KAAKhB,MAAL,KAAgBf,qBAAWyB,QAA3B,IAAuC,KAAKV,MAAL,KAAgBf,qBAAW0B,QAAtE,EAAgF;MAC9E,KAAK3B,MAAL,CAAYmB,IAAZ,CAAiB,iBAAiB,KAAKR,IAAL,EAAW,cAAc,KAAKK,MAAM,EAAtE;MACA;IACD;;IACD,KAAKhB,MAAL,CAAYmB,IAAZ,CAAiB,kBAAkB,KAAKR,IAAL,EAAW,EAA9C;IACA,KAAKK,MAAL,GAAcf,qBAAWyB,QAAzB;IAEAM,cAAc,CAACJ,IAAf,CAAoB,IAApB;EACD;;AAvEmC;;AAAtCK","names":["BaseTask","constructor","logger","TaskStatus_1","IDLE","run","baseRun","bind","cancel","baseCancel","once","dependencies","OnceTask_1","name","parentTask","taskName","setParent","getStatus","status","logAndThrow","message","info","Error","originalRun","startTime","Date","now","RUNNING","CANCELED","FINISHED","call","Math","round","err","originalCancel","exports"],"sourceRoot":"","sources":["../../src/task/BaseTask.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst LogLevel_1 = require(\"./LogLevel\");\n/**\n * ConsoleLogger writes logs with console\n *\n * ```typescript\n *   // working with the ConsoleLogger\n *   const logger = new ConsoleLogger('demo'); //default level is LogLevel.WARN\n *   logger.info('info');\n *   logger.debug('debug');\n *   logger.warn('warn');\n *   logger.error('error');\n *\n *   // setting logging levels\n *   const logger = new ConsoleLogger('demo', LogLevel.INFO)\n *   logger.debug(debugFunc()); // this will not show up\n *   logger.setLogLevel(LogLevel.DEBUG)\n *   logger.debug(debugFunc()); // this will show up\n *\n * ```\n */\n\n\nclass ConsoleLogger {\n  constructor(name) {\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LogLevel_1.default.WARN;\n    this.name = name;\n    this.level = level;\n  }\n\n  info(msg) {\n    this.log(LogLevel_1.default.INFO, msg);\n  }\n\n  warn(msg) {\n    this.log(LogLevel_1.default.WARN, msg);\n  }\n\n  error(msg) {\n    this.log(LogLevel_1.default.ERROR, msg);\n  }\n\n  debug(debugFunction) {\n    if (LogLevel_1.default.DEBUG < this.level) {\n      return;\n    }\n\n    if (typeof debugFunction === 'string') {\n      this.log(LogLevel_1.default.DEBUG, debugFunction);\n    } else if (debugFunction) {\n      this.log(LogLevel_1.default.DEBUG, debugFunction());\n    } else {\n      this.log(LogLevel_1.default.DEBUG, '' + debugFunction);\n    }\n  }\n\n  setLogLevel(level) {\n    this.level = level;\n  }\n\n  getLogLevel() {\n    return this.level;\n  }\n\n  log(type, msg) {\n    if (type < this.level) {\n      return;\n    }\n\n    const timestamp = new Date().toISOString();\n    const logMessage = `${timestamp} [${LogLevel_1.default[type]}] ${this.name} - ${msg}`;\n\n    switch (type) {\n      case LogLevel_1.default.ERROR:\n        console.error(logMessage);\n        break;\n\n      case LogLevel_1.default.WARN:\n        console.warn(logMessage);\n        break;\n\n      case LogLevel_1.default.DEBUG:\n        console.debug(logMessage.replace(/\\\\r\\\\n/g, '\\n'));\n        break;\n\n      case LogLevel_1.default.INFO:\n        console.info(logMessage);\n        break;\n    }\n  }\n\n}\n\nexports.default = ConsoleLogger;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAqBA,aAArB,CAAkC;EAIhCC,YAAYC,IAAZ,EAA+C;IAAA,IAArBC,KAAqB,uEAAbC,mBAASC,IAAI;IAC7C,KAAKH,IAAL,GAAYA,IAAZ;IACA,KAAKC,KAAL,GAAaA,KAAb;EACD;;EAEDG,IAAI,CAACC,GAAD,EAAY;IACd,KAAKC,GAAL,CAASJ,mBAASK,IAAlB,EAAwBF,GAAxB;EACD;;EAEDG,IAAI,CAACH,GAAD,EAAY;IACd,KAAKC,GAAL,CAASJ,mBAASC,IAAlB,EAAwBE,GAAxB;EACD;;EAEDI,KAAK,CAACJ,GAAD,EAAY;IACf,KAAKC,GAAL,CAASJ,mBAASQ,KAAlB,EAAyBL,GAAzB;EACD;;EAEDM,KAAK,CAACC,aAAD,EAAuC;IAC1C,IAAIV,mBAASW,KAAT,GAAiB,KAAKZ,KAA1B,EAAiC;MAC/B;IACD;;IAED,IAAI,OAAOW,aAAP,KAAyB,QAA7B,EAAuC;MACrC,KAAKN,GAAL,CAASJ,mBAASW,KAAlB,EAAyBD,aAAzB;IACD,CAFD,MAEO,IAAIA,aAAJ,EAAmB;MACxB,KAAKN,GAAL,CAASJ,mBAASW,KAAlB,EAAyBD,aAAa,EAAtC;IACD,CAFM,MAEA;MACL,KAAKN,GAAL,CAASJ,mBAASW,KAAlB,EAAyB,KAAKD,aAA9B;IACD;EACF;;EAEDE,WAAW,CAACb,KAAD,EAAgB;IACzB,KAAKA,KAAL,GAAaA,KAAb;EACD;;EAEDc,WAAW;IACT,OAAO,KAAKd,KAAZ;EACD;;EAEOK,GAAG,CAACU,IAAD,EAAiBX,GAAjB,EAA4B;IACrC,IAAIW,IAAI,GAAG,KAAKf,KAAhB,EAAuB;MACrB;IACD;;IAED,MAAMgB,SAAS,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAlB;IACA,MAAMC,UAAU,GAAG,GAAGH,SAAS,KAAKf,mBAASc,IAAT,CAAc,KAAK,KAAKhB,IAAI,MAAMK,GAAG,EAAzE;;IAEA,QAAQW,IAAR;MACE,KAAKd,mBAASQ,KAAd;QACEW,OAAO,CAACZ,KAAR,CAAcW,UAAd;QACA;;MACF,KAAKlB,mBAASC,IAAd;QACEkB,OAAO,CAACb,IAAR,CAAaY,UAAb;QACA;;MACF,KAAKlB,mBAASW,KAAd;QACEQ,OAAO,CAACV,KAAR,CAAcS,UAAU,CAACE,OAAX,CAAmB,SAAnB,EAA8B,IAA9B,CAAd;QACA;;MACF,KAAKpB,mBAASK,IAAd;QACEc,OAAO,CAACjB,IAAR,CAAagB,UAAb;QACA;IAZJ;EAcD;;AAjE+B;;AAAlCG","names":["ConsoleLogger","constructor","name","level","LogLevel_1","WARN","info","msg","log","INFO","warn","error","ERROR","debug","debugFunction","DEBUG","setLogLevel","getLogLevel","type","timestamp","Date","toISOString","logMessage","console","replace","exports"],"sourceRoot":"","sources":["../../src/logger/ConsoleLogger.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
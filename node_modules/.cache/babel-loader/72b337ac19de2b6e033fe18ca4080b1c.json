{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultAudioVideoController_1 = require(\"../audiovideocontroller/DefaultAudioVideoController\");\n\nconst DefaultAudioVideoFacade_1 = require(\"../audiovideofacade/DefaultAudioVideoFacade\");\n\nconst FullJitterBackoff_1 = require(\"../backoff/FullJitterBackoff\");\n\nconst DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\n\nconst ContentShareMediaStreamBroker_1 = require(\"../contentsharecontroller/ContentShareMediaStreamBroker\");\n\nconst DefaultContentShareController_1 = require(\"../contentsharecontroller/DefaultContentShareController\");\n\nconst CSPMonitor_1 = require(\"../cspmonitor/CSPMonitor\");\n\nconst Destroyable_1 = require(\"../destroyable/Destroyable\");\n\nconst EventIngestionConfiguration_1 = require(\"../eventingestionconfiguration/EventIngestionConfiguration\");\n\nconst DefaultMeetingEventReporter_1 = require(\"../eventreporter/DefaultMeetingEventReporter\");\n\nconst MeetingEventsClientConfiguration_1 = require(\"../eventsclientconfiguration/MeetingEventsClientConfiguration\");\n\nconst DefaultReconnectController_1 = require(\"../reconnectcontroller/DefaultReconnectController\");\n\nconst DefaultWebSocketAdapter_1 = require(\"../websocketadapter/DefaultWebSocketAdapter\");\n\nclass DefaultMeetingSession {\n  constructor(configuration, logger, deviceController, eventReporter) {\n    this._configuration = configuration;\n    this._logger = logger;\n    this.checkBrowserSupportAndFeatureConfiguration();\n    CSPMonitor_1.default.addLogger(this._logger);\n    CSPMonitor_1.default.register();\n    this.setupEventReporter(configuration, logger, eventReporter);\n    this._deviceController = deviceController;\n    this.audioVideoController = new DefaultAudioVideoController_1.default(this._configuration, this._logger, new DefaultWebSocketAdapter_1.default(this._logger), deviceController, new DefaultReconnectController_1.default(this._configuration.reconnectTimeoutMs, new FullJitterBackoff_1.default(this._configuration.reconnectFixedWaitMs, this._configuration.reconnectShortBackOffMs, this._configuration.reconnectLongBackOffMs)), this._eventReporter);\n    deviceController.bindToAudioVideoController(this.audioVideoController);\n    const contentShareMediaStreamBroker = new ContentShareMediaStreamBroker_1.default(this._logger);\n    this.contentShareController = new DefaultContentShareController_1.default(contentShareMediaStreamBroker, new DefaultAudioVideoController_1.default(DefaultContentShareController_1.default.createContentShareMeetingSessionConfigure(this._configuration), this._logger, new DefaultWebSocketAdapter_1.default(this._logger), contentShareMediaStreamBroker, new DefaultReconnectController_1.default(this._configuration.reconnectTimeoutMs, new FullJitterBackoff_1.default(this._configuration.reconnectFixedWaitMs, this._configuration.reconnectShortBackOffMs, this._configuration.reconnectLongBackOffMs))), this.audioVideoController);\n    this.audioVideoFacade = new DefaultAudioVideoFacade_1.default(this.audioVideoController, this.audioVideoController.videoTileController, this.audioVideoController.realtimeController, this.audioVideoController.audioMixController, this._deviceController, this.contentShareController);\n  }\n\n  get configuration() {\n    return this._configuration;\n  }\n\n  get logger() {\n    return this._logger;\n  }\n\n  get audioVideo() {\n    return this.audioVideoFacade;\n  }\n\n  get contentShare() {\n    return this.contentShareController;\n  }\n\n  get deviceController() {\n    return this._deviceController;\n  }\n\n  get eventReporter() {\n    return this._eventReporter;\n  }\n  /**\n   * Clean up this instance and resources that it created.\n   *\n   * After calling `destroy`, internal fields like `audioVideoController` will be unavailable.\n   */\n\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (Destroyable_1.isDestroyable(this.contentShareController)) {\n        yield this.contentShareController.destroy();\n      }\n\n      if (Destroyable_1.isDestroyable(this.audioVideoController)) {\n        yield this.audioVideoController.destroy();\n      }\n\n      if (Destroyable_1.isDestroyable(this.eventReporter)) {\n        yield this.eventReporter.destroy();\n      }\n\n      CSPMonitor_1.default.removeLogger(this._logger);\n      this._logger = undefined;\n      this._configuration = undefined;\n      this._deviceController = undefined;\n      this.audioVideoFacade = undefined;\n      this.audioVideoController = undefined;\n      this.contentShareController = undefined;\n      this._eventReporter = undefined;\n    });\n  }\n\n  setupEventReporter(configuration, logger, eventReporter) {\n    if (eventReporter) {\n      this._eventReporter = eventReporter;\n    } else {\n      const eventIngestionURL = configuration.urls.eventIngestionURL;\n\n      if (eventIngestionURL) {\n        this.logger.info(`Event ingestion URL is present in the configuration`);\n        const {\n          meetingId,\n          credentials: {\n            attendeeId,\n            joinToken\n          }\n        } = configuration;\n        const meetingEventsClientConfiguration = new MeetingEventsClientConfiguration_1.default(meetingId, attendeeId, joinToken);\n        const eventIngestionConfiguration = new EventIngestionConfiguration_1.default(meetingEventsClientConfiguration, eventIngestionURL);\n        this._eventReporter = new DefaultMeetingEventReporter_1.default(eventIngestionConfiguration, logger);\n      }\n    }\n  }\n\n  checkBrowserSupportAndFeatureConfiguration() {\n    const browserBehavior = new DefaultBrowserBehavior_1.default();\n    const browser = `${browserBehavior.name()} ${browserBehavior.majorVersion()} (${browserBehavior.version()})`;\n    this.logger.info(`browser is ${browser}`);\n\n    if (!browserBehavior.isSupported()) {\n      this.logger.warn('this browser is not currently supported. ' + 'Stability may suffer. ' + `Supported browsers are: ${browserBehavior.supportString()}.`);\n    }\n\n    if (browserBehavior.hasChromiumWebRTC() && !this._configuration.enableUnifiedPlanForChromiumBasedBrowsers) {\n      this.logger.error('Plan B SDP has been deprecated on Chromium-based browsers. ' + `Overriding configured value of 'enableUnifiedPlanForChromiumBasedBrowsers' to be true`);\n    } // Validation if a custom video uplink policy is specified\n\n\n    if (this._configuration.videoUplinkBandwidthPolicy) {\n      if (this.isSimulcastUplinkPolicy(this._configuration.videoUplinkBandwidthPolicy)) {\n        if (!browserBehavior.hasChromiumWebRTC()) {\n          throw new Error('Simulcast is only supported on Chromium-based browsers');\n        }\n\n        this._configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = true;\n      } else {\n        this._configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;\n      }\n    }\n\n    if (this._configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers) {\n      if (browserBehavior.hasChromiumWebRTC()) {\n        this.logger.info(`Simulcast is enabled for ${browserBehavior.name()}`);\n      } else {\n        this._configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;\n        this.logger.info('Simulcast is only supported on Chromium-based browsers');\n      }\n    }\n  }\n\n  isSimulcastUplinkPolicy(policy) {\n    return !!(policy && policy.addObserver);\n  }\n\n}\n\nexports.default = DefaultMeetingSession;","map":{"version":3,"mappings":"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","names":["DefaultMeetingSession","constructor","configuration","logger","deviceController","eventReporter","_configuration","_logger","checkBrowserSupportAndFeatureConfiguration","CSPMonitor_1","addLogger","register","setupEventReporter","_deviceController","audioVideoController","DefaultAudioVideoController_1","DefaultWebSocketAdapter_1","DefaultReconnectController_1","reconnectTimeoutMs","FullJitterBackoff_1","reconnectFixedWaitMs","reconnectShortBackOffMs","reconnectLongBackOffMs","_eventReporter","bindToAudioVideoController","contentShareMediaStreamBroker","ContentShareMediaStreamBroker_1","contentShareController","DefaultContentShareController_1","createContentShareMeetingSessionConfigure","audioVideoFacade","DefaultAudioVideoFacade_1","videoTileController","realtimeController","audioMixController","audioVideo","contentShare","destroy","Destroyable_1","removeLogger","undefined","eventIngestionURL","urls","info","meetingId","credentials","attendeeId","joinToken","meetingEventsClientConfiguration","MeetingEventsClientConfiguration_1","eventIngestionConfiguration","EventIngestionConfiguration_1","DefaultMeetingEventReporter_1","browserBehavior","DefaultBrowserBehavior_1","browser","name","majorVersion","version","isSupported","warn","supportString","hasChromiumWebRTC","enableUnifiedPlanForChromiumBasedBrowsers","error","videoUplinkBandwidthPolicy","isSimulcastUplinkPolicy","Error","enableSimulcastForUnifiedPlanChromiumBasedBrowsers","policy","addObserver","exports"],"sourceRoot":"","sources":["../../src/meetingsession/DefaultMeetingSession.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst LogLevel_1 = require(\"./LogLevel\");\n/**\n * MultiLogger writes logs to multiple other loggers\n */\n\n\nclass MultiLogger {\n  constructor() {\n    for (var _len = arguments.length, loggers = new Array(_len), _key = 0; _key < _len; _key++) {\n      loggers[_key] = arguments[_key];\n    }\n\n    this._loggers = loggers;\n  }\n\n  info(msg) {\n    for (const logger of this._loggers) {\n      logger.info(msg);\n    }\n  }\n\n  warn(msg) {\n    for (const logger of this._loggers) {\n      logger.warn(msg);\n    }\n  }\n\n  error(msg) {\n    for (const logger of this._loggers) {\n      logger.error(msg);\n    }\n  }\n\n  debug(debugFunction) {\n    let message;\n    let memoized;\n\n    if (typeof debugFunction === 'string') {\n      memoized = debugFunction;\n    } else if (debugFunction) {\n      memoized = () => {\n        if (!message) {\n          message = debugFunction();\n        }\n\n        return message;\n      };\n    } else {\n      memoized = '' + debugFunction;\n    }\n\n    for (const logger of this._loggers) {\n      logger.debug(memoized);\n    }\n  }\n\n  setLogLevel(level) {\n    for (const logger of this._loggers) {\n      logger.setLogLevel(level);\n    }\n  }\n\n  getLogLevel() {\n    for (const logger of this._loggers) {\n      return logger.getLogLevel();\n    }\n\n    return LogLevel_1.default.OFF;\n  }\n\n}\n\nexports.default = MultiLogger;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAGA;AAEA;;;;;AAGA,MAAqBA,WAArB,CAAgC;EAG9BC,cAAgC;IAAA,kCAAjBC,OAAiB;MAAjBA,OAAiB;IAAA;;IAC9B,KAAKC,QAAL,GAAgBD,OAAhB;EACD;;EAEDE,IAAI,CAACC,GAAD,EAAY;IACd,KAAK,MAAMC,MAAX,IAAqB,KAAKH,QAA1B,EAAoC;MAClCG,MAAM,CAACF,IAAP,CAAYC,GAAZ;IACD;EACF;;EAEDE,IAAI,CAACF,GAAD,EAAY;IACd,KAAK,MAAMC,MAAX,IAAqB,KAAKH,QAA1B,EAAoC;MAClCG,MAAM,CAACC,IAAP,CAAYF,GAAZ;IACD;EACF;;EAEDG,KAAK,CAACH,GAAD,EAAY;IACf,KAAK,MAAMC,MAAX,IAAqB,KAAKH,QAA1B,EAAoC;MAClCG,MAAM,CAACE,KAAP,CAAaH,GAAb;IACD;EACF;;EAEDI,KAAK,CAACC,aAAD,EAAuC;IAC1C,IAAIC,OAAJ;IACA,IAAIC,QAAJ;;IACA,IAAI,OAAOF,aAAP,KAAyB,QAA7B,EAAuC;MACrCE,QAAQ,GAAGF,aAAX;IACD,CAFD,MAEO,IAAIA,aAAJ,EAAmB;MACxBE,QAAQ,GAAG,MAAK;QACd,IAAI,CAACD,OAAL,EAAc;UACZA,OAAO,GAAGD,aAAa,EAAvB;QACD;;QACD,OAAOC,OAAP;MACD,CALD;IAMD,CAPM,MAOA;MACLC,QAAQ,GAAG,KAAKF,aAAhB;IACD;;IAED,KAAK,MAAMJ,MAAX,IAAqB,KAAKH,QAA1B,EAAoC;MAClCG,MAAM,CAACG,KAAP,CAAaG,QAAb;IACD;EACF;;EAEDC,WAAW,CAACC,KAAD,EAAgB;IACzB,KAAK,MAAMR,MAAX,IAAqB,KAAKH,QAA1B,EAAoC;MAClCG,MAAM,CAACO,WAAP,CAAmBC,KAAnB;IACD;EACF;;EAEDC,WAAW;IACT,KAAK,MAAMT,MAAX,IAAqB,KAAKH,QAA1B,EAAoC;MAClC,OAAOG,MAAM,CAACS,WAAP,EAAP;IACD;;IACD,OAAOC,mBAASC,GAAhB;EACD;;AAzD6B;;AAAhCC","names":["MultiLogger","constructor","loggers","_loggers","info","msg","logger","warn","error","debug","debugFunction","message","memoized","setLogLevel","level","getLogLevel","LogLevel_1","OFF","exports"],"sourceRoot":"","sources":["../../src/logger/MultiLogger.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}